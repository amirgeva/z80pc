#pragma once

#include "defs.h"
#include "screen.h"

class Font
{
  uint8_t m_CharWidth, m_CharHeight;

  const uint8_t* get_char_data(int c)
  {
    static const uint8_t data[] = {
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04, 0x00,
      0x0A, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x0A, 0x0A, 0x1F, 0x0A, 0x1F, 0x0A, 0x0A, 0x00,
      0x04, 0x0F, 0x14, 0x0E, 0x05, 0x1E, 0x04, 0x00,
      0x18, 0x19, 0x02, 0x04, 0x08, 0x13, 0x03, 0x00,
      0x0E, 0x12, 0x14, 0x08, 0x15, 0x12, 0x0D, 0x00,
      0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02, 0x00,
      0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00,
      0x00, 0x15, 0x0E, 0x1F, 0x0E, 0x15, 0x00, 0x00,
      0x00, 0x04, 0x04, 0x1F, 0x04, 0x04, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
      0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x00, 0x00,
      0x0E, 0x11, 0x13, 0x15, 0x19, 0x11, 0x0E, 0x00,
      0x04, 0x0C, 0x14, 0x04, 0x04, 0x04, 0x1F, 0x00,
      0x0E, 0x11, 0x01, 0x02, 0x04, 0x08, 0x1F, 0x00,
      0x0E, 0x11, 0x01, 0x06, 0x01, 0x11, 0x0E, 0x00,
      0x06, 0x0A, 0x12, 0x1F, 0x02, 0x02, 0x02, 0x00,
      0x1F, 0x10, 0x10, 0x1E, 0x01, 0x01, 0x1E, 0x00,
      0x0E, 0x10, 0x10, 0x1E, 0x11, 0x11, 0x0E, 0x00,
      0x1F, 0x01, 0x02, 0x04, 0x08, 0x08, 0x08, 0x00,
      0x0E, 0x11, 0x11, 0x0E, 0x11, 0x11, 0x0E, 0x00,
      0x0E, 0x11, 0x11, 0x0F, 0x01, 0x01, 0x0E, 0x00,
      0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
      0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x08, 0x00,
      0x00, 0x02, 0x04, 0x08, 0x04, 0x02, 0x00, 0x00,
      0x00, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x00, 0x00,
      0x00, 0x08, 0x04, 0x02, 0x04, 0x08, 0x00, 0x00,
      0x0E, 0x11, 0x11, 0x02, 0x04, 0x00, 0x04, 0x00,
      0x0E, 0x11, 0x17, 0x15, 0x17, 0x10, 0x0E, 0x00,
      0x0E, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11, 0x00,
      0x1E, 0x11, 0x11, 0x1E, 0x11, 0x11, 0x1E, 0x00,
      0x0E, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0E, 0x00,
      0x1E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1E, 0x00,
      0x1F, 0x10, 0x10, 0x1E, 0x10, 0x10, 0x1F, 0x00,
      0x1F, 0x10, 0x10, 0x1E, 0x10, 0x10, 0x10, 0x00,
      0x0E, 0x11, 0x10, 0x10, 0x13, 0x11, 0x0E, 0x00,
      0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x11, 0x00,
      0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1F, 0x00,
      0x1F, 0x01, 0x01, 0x01, 0x01, 0x11, 0x0E, 0x00,
      0x11, 0x11, 0x12, 0x1C, 0x12, 0x11, 0x11, 0x00,
      0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1F, 0x00,
      0x11, 0x1B, 0x15, 0x11, 0x11, 0x11, 0x11, 0x00,
      0x11, 0x11, 0x19, 0x15, 0x13, 0x11, 0x11, 0x00,
      0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00,
      0x1E, 0x11, 0x11, 0x1E, 0x10, 0x10, 0x10, 0x00,
      0x0E, 0x11, 0x11, 0x11, 0x15, 0x12, 0x0D, 0x00,
      0x1E, 0x11, 0x11, 0x1E, 0x11, 0x11, 0x11, 0x00,
      0x0F, 0x10, 0x10, 0x0E, 0x01, 0x01, 0x1E, 0x00,
      0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00,
      0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00,
      0x11, 0x11, 0x11, 0x11, 0x11, 0x0A, 0x04, 0x00,
      0x11, 0x11, 0x11, 0x11, 0x15, 0x1B, 0x11, 0x00,
      0x11, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x11, 0x00,
      0x11, 0x11, 0x0A, 0x04, 0x04, 0x04, 0x04, 0x00,
      0x1F, 0x01, 0x02, 0x04, 0x08, 0x10, 0x1F, 0x00,
      0x06, 0x04, 0x04, 0x04, 0x04, 0x04, 0x06, 0x00,
      0x00, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 0x00,
      0x0C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0C, 0x00,
      0x04, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00,
      0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x0F, 0x00,
      0x10, 0x10, 0x1E, 0x11, 0x11, 0x11, 0x1E, 0x00,
      0x00, 0x00, 0x0E, 0x11, 0x10, 0x11, 0x0E, 0x00,
      0x01, 0x01, 0x0F, 0x11, 0x11, 0x11, 0x0F, 0x00,
      0x00, 0x00, 0x0E, 0x11, 0x1F, 0x10, 0x0F, 0x00,
      0x06, 0x08, 0x1F, 0x08, 0x08, 0x08, 0x08, 0x00,
      0x00, 0x00, 0x0F, 0x11, 0x0F, 0x01, 0x0E, 0x00,
      0x10, 0x10, 0x1E, 0x11, 0x11, 0x11, 0x11, 0x00,
      0x04, 0x00, 0x1C, 0x04, 0x04, 0x04, 0x1F, 0x00,
      0x01, 0x00, 0x07, 0x01, 0x01, 0x11, 0x0E, 0x00,
      0x10, 0x10, 0x12, 0x1C, 0x12, 0x11, 0x11, 0x00,
      0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0E, 0x00,
      0x00, 0x00, 0x1A, 0x15, 0x15, 0x11, 0x11, 0x00,
      0x00, 0x00, 0x1E, 0x11, 0x11, 0x11, 0x11, 0x00,
      0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E, 0x00,
      0x00, 0x00, 0x1E, 0x11, 0x1E, 0x10, 0x10, 0x00,
      0x00, 0x00, 0x0F, 0x11, 0x0F, 0x01, 0x01, 0x00,
      0x00, 0x00, 0x16, 0x19, 0x10, 0x10, 0x10, 0x00,
      0x00, 0x00, 0x0F, 0x10, 0x0E, 0x01, 0x1E, 0x00,
      0x08, 0x08, 0x1E, 0x08, 0x08, 0x09, 0x06, 0x00,
      0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x0F, 0x00,
      0x00, 0x00, 0x11, 0x11, 0x11, 0x0A, 0x04, 0x00,
      0x00, 0x00, 0x11, 0x11, 0x11, 0x15, 0x0A, 0x00,
      0x00, 0x00, 0x11, 0x0A, 0x04, 0x0A, 0x11, 0x00,
      0x00, 0x00, 0x11, 0x11, 0x0F, 0x01, 0x0E, 0x00,
      0x00, 0x00, 0x1F, 0x02, 0x04, 0x08, 0x1F, 0x00,
      0x02, 0x04, 0x04, 0x08, 0x04, 0x04, 0x02, 0x00,
      0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00,
      0x08, 0x04, 0x04, 0x02, 0x04, 0x04, 0x08, 0x00,
      0x00, 0x00, 0x09, 0x16, 0x00, 0x00, 0x00, 0x00,
      0x1F, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1F, 0x00
    };
    static const int n = sizeof(data) / 8;
    c -= 32;
    if (c < 0 || c >= n) return nullptr;
    return &data[c * 8];
  }
public:
  Font()
    : m_CharWidth(5)
    , m_CharHeight(7)
  {}

  uint16_t get_width() const { return m_CharWidth; }
  uint16_t get_height() const { return m_CharHeight; }

  int draw(const char* text, int x, int y, Screen& scr, Color fg, Color bg)
  {
    for (; *text; ++text)
      x=draw(*text, x, y, scr, fg, bg);
    return x;
  }

  int draw(char c, int x, int y, Screen& scr, Color fg, Color bg)
  {
    const uint8_t* ptr = get_char_data(c);
    if (ptr)
    {
      for (int i = 0; i < m_CharHeight; ++i, ++ptr)
      {
        for (int j = 0; j < m_CharWidth; ++j)
        {
          scr.pixel(x + m_CharWidth - j - 1, y + i, (*ptr & (1 << j)) ? fg : bg);
        }
      }
    }
    return x + m_CharWidth + 1;
  }
};