                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module vector
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _ensure_capacity
                                     12 	.globl _copy
                                     13 	.globl _multiply
                                     14 	.globl _release
                                     15 	.globl _allocate
                                     16 	.globl _vector_new
                                     17 	.globl _vector_init
                                     18 	.globl _vector_shut
                                     19 	.globl _vector_size
                                     20 	.globl _vector_clear
                                     21 	.globl _vector_resize
                                     22 	.globl _vector_reserve
                                     23 	.globl _vector_insert
                                     24 	.globl _vector_push
                                     25 	.globl _vector_pop
                                     26 	.globl _vector_access
                                     27 	.globl _vector_set
                                     28 	.globl _vector_get
                                     29 	.globl _vector_erase
                                     30 	.globl _vector_erase_range
                                     31 	.globl _vector_capacity
                                     32 	.globl _vector_element_size
                                     33 ;--------------------------------------------------------
                                     34 ; special function registers
                                     35 ;--------------------------------------------------------
                                     36 ;--------------------------------------------------------
                                     37 ; ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area _DATA
                                     40 ;--------------------------------------------------------
                                     41 ; ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area _INITIALIZED
                                     44 ;--------------------------------------------------------
                                     45 ; absolute external ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area _DABS (ABS)
                                     48 ;--------------------------------------------------------
                                     49 ; global & static initialisations
                                     50 ;--------------------------------------------------------
                                     51 	.area _HOME
                                     52 	.area _GSINIT
                                     53 	.area _GSFINAL
                                     54 	.area _GSINIT
                                     55 ;--------------------------------------------------------
                                     56 ; Home
                                     57 ;--------------------------------------------------------
                                     58 	.area _HOME
                                     59 	.area _HOME
                                     60 ;--------------------------------------------------------
                                     61 ; code
                                     62 ;--------------------------------------------------------
                                     63 	.area _CODE
                                     64 ;vector.c:5: void copy(void* dest, void* src, int size)
                                     65 ;	---------------------------------
                                     66 ; Function copy
                                     67 ; ---------------------------------
      000000                         68 _copy::
      000000 DD E5            [15]   69 	push	ix
      000002 DD 21 00 00      [14]   70 	ld	ix,#0
      000006 DD 39            [15]   71 	add	ix,sp
      000008 F5               [11]   72 	push	af
      000009 F5               [11]   73 	push	af
      00000A 4D               [ 4]   74 	ld	c, l
      00000B 44               [ 4]   75 	ld	b, h
                                     76 ;vector.c:7: if (size > 0)
      00000C AF               [ 4]   77 	xor	a, a
      00000D DD BE 04         [19]   78 	cp	a, 4 (ix)
      000010 DD 9E 05         [19]   79 	sbc	a, 5 (ix)
      000013 E2r18r00         [10]   80 	jp	PO, 00170$
      000016 EE 80            [ 7]   81 	xor	a, #0x80
      000018                         82 00170$:
      000018 F2rD8r00         [10]   83 	jp	P, 00121$
                                     84 ;vector.c:9: char* cdst = (char*)dest;
                                     85 ;vector.c:10: char* csrc = (char*)src;
                                     86 ;vector.c:11: byte reverse = 0;
      00001B DD 36 FE 00      [19]   87 	ld	-2 (ix), #0x00
                                     88 ;vector.c:12: if ((csrc < cdst && (csrc + size)>cdst) ||
      00001F 7B               [ 4]   89 	ld	a, e
      000020 91               [ 4]   90 	sub	a, c
      000021 7A               [ 4]   91 	ld	a, d
      000022 98               [ 4]   92 	sbc	a, b
      000023 3E 00            [ 7]   93 	ld	a, #0x00
      000025 17               [ 4]   94 	rla
      000026 DD 77 FF         [19]   95 	ld	-1 (ix), a
      000029 B7               [ 4]   96 	or	a, a
      00002A 28 0D            [12]   97 	jr	Z, 00107$
      00002C DD 6E 04         [19]   98 	ld	l, 4 (ix)
      00002F DD 66 05         [19]   99 	ld	h, 5 (ix)
      000032 19               [11]  100 	add	hl, de
      000033 79               [ 4]  101 	ld	a, c
      000034 95               [ 4]  102 	sub	a, l
      000035 78               [ 4]  103 	ld	a, b
      000036 9C               [ 4]  104 	sbc	a, h
      000037 38 13            [12]  105 	jr	C, 00103$
      000039                        106 00107$:
                                    107 ;vector.c:13: (cdst < csrc && (cdst + size)>csrc))
      000039 79               [ 4]  108 	ld	a, c
      00003A 93               [ 4]  109 	sub	a, e
      00003B 78               [ 4]  110 	ld	a, b
      00003C 9A               [ 4]  111 	sbc	a, d
      00003D 30 17            [12]  112 	jr	NC, 00104$
      00003F DD 6E 04         [19]  113 	ld	l, 4 (ix)
      000042 DD 66 05         [19]  114 	ld	h, 5 (ix)
      000045 09               [11]  115 	add	hl, bc
      000046 7B               [ 4]  116 	ld	a, e
      000047 95               [ 4]  117 	sub	a, l
      000048 7A               [ 4]  118 	ld	a, d
      000049 9C               [ 4]  119 	sbc	a, h
      00004A 30 0A            [12]  120 	jr	NC, 00104$
      00004C                        121 00103$:
                                    122 ;vector.c:15: if (csrc < cdst) reverse = 1;
      00004C DD 7E FF         [19]  123 	ld	a, -1 (ix)
      00004F B7               [ 4]  124 	or	a, a
      000050 28 04            [12]  125 	jr	Z, 00104$
      000052 DD 36 FE 01      [19]  126 	ld	-2 (ix), #0x01
      000056                        127 00104$:
                                    128 ;vector.c:17: if (reverse)
      000056 DD 7E FE         [19]  129 	ld	a, -2 (ix)
      000059 B7               [ 4]  130 	or	a, a
      00005A 28 3E            [12]  131 	jr	Z, 00131$
                                    132 ;vector.c:19: for (int i = size-1; i >= 0; --i)
      00005C DD 7E 04         [19]  133 	ld	a, 4 (ix)
      00005F C6 FF            [ 7]  134 	add	a, #0xff
      000061 DD 77 FE         [19]  135 	ld	-2 (ix), a
      000064 DD 7E 05         [19]  136 	ld	a, 5 (ix)
      000067 CE FF            [ 7]  137 	adc	a, #0xff
      000069 DD 77 FF         [19]  138 	ld	-1 (ix), a
      00006C                        139 00116$:
      00006C DD CB FF 7E      [20]  140 	bit	7, -1 (ix)
      000070 20 66            [12]  141 	jr	NZ, 00121$
                                    142 ;vector.c:20: cdst[i] = csrc[i];
      000072 DD 7E FE         [19]  143 	ld	a, -2 (ix)
      000075 81               [ 4]  144 	add	a, c
      000076 DD 77 FC         [19]  145 	ld	-4 (ix), a
      000079 DD 7E FF         [19]  146 	ld	a, -1 (ix)
      00007C 88               [ 4]  147 	adc	a, b
      00007D DD 77 FD         [19]  148 	ld	-3 (ix), a
      000080 DD 6E FE         [19]  149 	ld	l, -2 (ix)
      000083 DD 66 FF         [19]  150 	ld	h, -1 (ix)
      000086 19               [11]  151 	add	hl, de
      000087 7E               [ 7]  152 	ld	a, (hl)
      000088 E1               [10]  153 	pop	hl
      000089 E5               [11]  154 	push	hl
      00008A 77               [ 7]  155 	ld	(hl), a
                                    156 ;vector.c:19: for (int i = size-1; i >= 0; --i)
      00008B DD 6E FE         [19]  157 	ld	l, -2 (ix)
      00008E DD 66 FF         [19]  158 	ld	h, -1 (ix)
      000091 2B               [ 6]  159 	dec	hl
      000092 DD 75 FE         [19]  160 	ld	-2 (ix), l
      000095 DD 74 FF         [19]  161 	ld	-1 (ix), h
      000098 18 D2            [12]  162 	jr	00116$
                                    163 ;vector.c:24: for (int i = 0; i < size; ++i)
      00009A                        164 00131$:
      00009A AF               [ 4]  165 	xor	a, a
      00009B DD 77 FE         [19]  166 	ld	-2 (ix), a
      00009E DD 77 FF         [19]  167 	ld	-1 (ix), a
      0000A1                        168 00119$:
      0000A1 DD 7E FE         [19]  169 	ld	a, -2 (ix)
      0000A4 DD 96 04         [19]  170 	sub	a, 4 (ix)
      0000A7 DD 7E FF         [19]  171 	ld	a, -1 (ix)
      0000AA DD 9E 05         [19]  172 	sbc	a, 5 (ix)
      0000AD E2rB2r00         [10]  173 	jp	PO, 00171$
      0000B0 EE 80            [ 7]  174 	xor	a, #0x80
      0000B2                        175 00171$:
      0000B2 F2rD8r00         [10]  176 	jp	P, 00121$
                                    177 ;vector.c:25: cdst[i] = csrc[i];
      0000B5 DD 7E FE         [19]  178 	ld	a, -2 (ix)
      0000B8 81               [ 4]  179 	add	a, c
      0000B9 DD 77 FC         [19]  180 	ld	-4 (ix), a
      0000BC DD 7E FF         [19]  181 	ld	a, -1 (ix)
      0000BF 88               [ 4]  182 	adc	a, b
      0000C0 DD 77 FD         [19]  183 	ld	-3 (ix), a
      0000C3 DD 6E FE         [19]  184 	ld	l, -2 (ix)
      0000C6 DD 66 FF         [19]  185 	ld	h, -1 (ix)
      0000C9 19               [11]  186 	add	hl, de
      0000CA 7E               [ 7]  187 	ld	a, (hl)
      0000CB E1               [10]  188 	pop	hl
      0000CC E5               [11]  189 	push	hl
      0000CD 77               [ 7]  190 	ld	(hl), a
                                    191 ;vector.c:24: for (int i = 0; i < size; ++i)
      0000CE DD 34 FE         [23]  192 	inc	-2 (ix)
      0000D1 20 CE            [12]  193 	jr	NZ, 00119$
      0000D3 DD 34 FF         [23]  194 	inc	-1 (ix)
      0000D6 18 C9            [12]  195 	jr	00119$
      0000D8                        196 00121$:
                                    197 ;vector.c:28: }
      0000D8 DD F9            [10]  198 	ld	sp, ix
      0000DA DD E1            [14]  199 	pop	ix
      0000DC E1               [10]  200 	pop	hl
      0000DD F1               [10]  201 	pop	af
      0000DE E9               [ 4]  202 	jp	(hl)
                                    203 ;vector.c:38: Vector* vector_new(word element_size)
                                    204 ;	---------------------------------
                                    205 ; Function vector_new
                                    206 ; ---------------------------------
      0000DF                        207 _vector_new::
                                    208 ;vector.c:40: Vector* res = (Vector*)allocate(sizeof(Vector));
      0000DF E5               [11]  209 	push	hl
      0000E0 21 08 00         [10]  210 	ld	hl, #0x0008
      0000E3 CDr00r00         [17]  211 	call	_allocate
      0000E6 EB               [ 4]  212 	ex	de, hl
      0000E7 D1               [10]  213 	pop	de
                                    214 ;vector.c:41: if (!res) return 0;
      0000E8 7C               [ 4]  215 	ld	a, h
      0000E9 B5               [ 4]  216 	or	a, l
      0000EA 20 04            [12]  217 	jr	NZ, 00102$
      0000EC 11 00 00         [10]  218 	ld	de, #0x0000
      0000EF C9               [10]  219 	ret
      0000F0                        220 00102$:
                                    221 ;vector.c:42: vector_init(res, element_size);
      0000F0 E5               [11]  222 	push	hl
      0000F1 CDrF7r00         [17]  223 	call	_vector_init
      0000F4 E1               [10]  224 	pop	hl
                                    225 ;vector.c:43: return res;
      0000F5 EB               [ 4]  226 	ex	de, hl
                                    227 ;vector.c:44: }
      0000F6 C9               [10]  228 	ret
                                    229 ;vector.c:46: byte		vector_init(Vector* v, word element_size)
                                    230 ;	---------------------------------
                                    231 ; Function vector_init
                                    232 ; ---------------------------------
      0000F7                        233 _vector_init::
      0000F7 4D               [ 4]  234 	ld	c, l
      0000F8 44               [ 4]  235 	ld	b, h
                                    236 ;vector.c:48: if (!v) return 0;
      0000F9 78               [ 4]  237 	ld	a, b
      0000FA B1               [ 4]  238 	or	a,c
      0000FB C8               [11]  239 	ret	Z
                                    240 ;vector.c:49: v->element_size = element_size;
      0000FC 69               [ 4]  241 	ld	l, c
      0000FD 60               [ 4]  242 	ld	h, b
      0000FE 73               [ 7]  243 	ld	(hl), e
      0000FF 23               [ 6]  244 	inc	hl
      000100 72               [ 7]  245 	ld	(hl), d
                                    246 ;vector.c:50: v->capacity = 0;
      000101 59               [ 4]  247 	ld	e, c
      000102 50               [ 4]  248 	ld	d, b
      000103 13               [ 6]  249 	inc	de
      000104 13               [ 6]  250 	inc	de
      000105 AF               [ 4]  251 	xor	a, a
      000106 12               [ 7]  252 	ld	(de), a
      000107 13               [ 6]  253 	inc	de
      000108 12               [ 7]  254 	ld	(de), a
                                    255 ;vector.c:51: v->size = 0;
      000109 21 04 00         [10]  256 	ld	hl, #0x0004
      00010C 09               [11]  257 	add	hl, bc
      00010D AF               [ 4]  258 	xor	a, a
      00010E 77               [ 7]  259 	ld	(hl), a
      00010F 23               [ 6]  260 	inc	hl
      000110 77               [ 7]  261 	ld	(hl), a
                                    262 ;vector.c:52: v->data = 0;
      000111 21 06 00         [10]  263 	ld	hl, #0x0006
      000114 09               [11]  264 	add	hl, bc
      000115 AF               [ 4]  265 	xor	a, a
      000116 77               [ 7]  266 	ld	(hl), a
      000117 23               [ 6]  267 	inc	hl
      000118 77               [ 7]  268 	ld	(hl), a
                                    269 ;vector.c:53: return 1;
      000119 3E 01            [ 7]  270 	ld	a, #0x01
                                    271 ;vector.c:54: }
      00011B C9               [10]  272 	ret
                                    273 ;vector.c:56: void		vector_shut(Vector* v)
                                    274 ;	---------------------------------
                                    275 ; Function vector_shut
                                    276 ; ---------------------------------
      00011C                        277 _vector_shut::
      00011C EB               [ 4]  278 	ex	de, hl
                                    279 ;vector.c:58: if (v->data)
      00011D D5               [11]  280 	push	de
      00011E FD E1            [14]  281 	pop	iy
      000120 FD 6E 06         [19]  282 	ld	l, 6 (iy)
                                    283 ;	spillPairReg hl
      000123 FD 66 07         [19]  284 	ld	h, 7 (iy)
                                    285 ;	spillPairReg hl
      000126 7C               [ 4]  286 	ld	a, h
      000127 B5               [ 4]  287 	or	a, l
      000128 28 05            [12]  288 	jr	Z, 00102$
                                    289 ;vector.c:59: release(v->data);
      00012A D5               [11]  290 	push	de
      00012B CDr00r00         [17]  291 	call	_release
      00012E D1               [10]  292 	pop	de
      00012F                        293 00102$:
                                    294 ;vector.c:60: if (v)
      00012F 7A               [ 4]  295 	ld	a, d
      000130 B3               [ 4]  296 	or	a, e
      000131 C8               [11]  297 	ret	Z
                                    298 ;vector.c:61: release(v);
      000132 EB               [ 4]  299 	ex	de, hl
                                    300 ;vector.c:62: }
      000133 C3r00r00         [10]  301 	jp	_release
                                    302 ;vector.c:64: static byte vector_reallocate(Vector* v, word new_size)
                                    303 ;	---------------------------------
                                    304 ; Function vector_reallocate
                                    305 ; ---------------------------------
      000136                        306 _vector_reallocate:
      000136 DD E5            [15]  307 	push	ix
      000138 DD 21 00 00      [14]  308 	ld	ix,#0
      00013C DD 39            [15]  309 	add	ix,sp
      00013E FD 21 F8 FF      [14]  310 	ld	iy, #-8
      000142 FD 39            [15]  311 	add	iy, sp
      000144 FD F9            [10]  312 	ld	sp, iy
      000146 DD 75 FE         [19]  313 	ld	-2 (ix), l
      000149 DD 74 FF         [19]  314 	ld	-1 (ix), h
      00014C DD 73 FC         [19]  315 	ld	-4 (ix), e
      00014F DD 72 FD         [19]  316 	ld	-3 (ix), d
                                    317 ;vector.c:66: if (!v) return 0;
      000152 DD 7E FF         [19]  318 	ld	a, -1 (ix)
      000155 DD B6 FE         [19]  319 	or	a, -2 (ix)
      000158 20 04            [12]  320 	jr	NZ, 00102$
      00015A AF               [ 4]  321 	xor	a, a
      00015B C3r02r02         [10]  322 	jp	00107$
      00015E                        323 00102$:
                                    324 ;vector.c:67: char* buffer = (char*)allocate(multiply(new_size, v->element_size));
      00015E DD 6E FE         [19]  325 	ld	l, -2 (ix)
      000161 DD 66 FF         [19]  326 	ld	h, -1 (ix)
      000164 5E               [ 7]  327 	ld	e, (hl)
      000165 23               [ 6]  328 	inc	hl
      000166 56               [ 7]  329 	ld	d, (hl)
      000167 DD 6E FC         [19]  330 	ld	l, -4 (ix)
                                    331 ;	spillPairReg hl
                                    332 ;	spillPairReg hl
      00016A DD 66 FD         [19]  333 	ld	h, -3 (ix)
                                    334 ;	spillPairReg hl
                                    335 ;	spillPairReg hl
      00016D CDr00r00         [17]  336 	call	_multiply
      000170 EB               [ 4]  337 	ex	de, hl
      000171 CDr00r00         [17]  338 	call	_allocate
      000174 33               [ 6]  339 	inc	sp
      000175 33               [ 6]  340 	inc	sp
      000176 D5               [11]  341 	push	de
                                    342 ;vector.c:68: if (!buffer) return 0;
      000177 DD 7E F9         [19]  343 	ld	a, -7 (ix)
      00017A DD B6 F8         [19]  344 	or	a, -8 (ix)
      00017D 20 04            [12]  345 	jr	NZ, 00104$
      00017F AF               [ 4]  346 	xor	a, a
      000180 C3r02r02         [10]  347 	jp	00107$
      000183                        348 00104$:
                                    349 ;vector.c:69: if (v->data)
      000183 DD 7E FE         [19]  350 	ld	a, -2 (ix)
      000186 C6 06            [ 7]  351 	add	a, #0x06
      000188 DD 77 FA         [19]  352 	ld	-6 (ix), a
      00018B DD 7E FF         [19]  353 	ld	a, -1 (ix)
      00018E CE 00            [ 7]  354 	adc	a, #0x00
      000190 DD 77 FB         [19]  355 	ld	-5 (ix), a
      000193 DD 6E FA         [19]  356 	ld	l, -6 (ix)
      000196 DD 66 FB         [19]  357 	ld	h, -5 (ix)
      000199 7E               [ 7]  358 	ld	a, (hl)
      00019A 23               [ 6]  359 	inc	hl
      00019B B6               [ 7]  360 	or	a, (hl)
      00019C 28 38            [12]  361 	jr	Z, 00106$
                                    362 ;vector.c:71: copy(buffer, v->data, multiply(v->size, v->element_size));
      00019E DD 6E FE         [19]  363 	ld	l, -2 (ix)
      0001A1 DD 66 FF         [19]  364 	ld	h, -1 (ix)
      0001A4 5E               [ 7]  365 	ld	e, (hl)
      0001A5 23               [ 6]  366 	inc	hl
      0001A6 56               [ 7]  367 	ld	d, (hl)
      0001A7 DD 4E FE         [19]  368 	ld	c, -2 (ix)
      0001AA DD 46 FF         [19]  369 	ld	b, -1 (ix)
      0001AD 21 04 00         [10]  370 	ld	hl, #4
      0001B0 09               [11]  371 	add	hl, bc
      0001B1 7E               [ 7]  372 	ld	a, (hl)
      0001B2 23               [ 6]  373 	inc	hl
      0001B3 66               [ 7]  374 	ld	h, (hl)
                                    375 ;	spillPairReg hl
      0001B4 6F               [ 4]  376 	ld	l, a
                                    377 ;	spillPairReg hl
                                    378 ;	spillPairReg hl
      0001B5 CDr00r00         [17]  379 	call	_multiply
      0001B8 4B               [ 4]  380 	ld	c, e
      0001B9 42               [ 4]  381 	ld	b, d
      0001BA DD 6E FA         [19]  382 	ld	l, -6 (ix)
      0001BD DD 66 FB         [19]  383 	ld	h, -5 (ix)
      0001C0 5E               [ 7]  384 	ld	e, (hl)
      0001C1 23               [ 6]  385 	inc	hl
      0001C2 56               [ 7]  386 	ld	d, (hl)
      0001C3 E1               [10]  387 	pop	hl
      0001C4 E5               [11]  388 	push	hl
      0001C5 C5               [11]  389 	push	bc
      0001C6 CDr00r00         [17]  390 	call	_copy
                                    391 ;vector.c:72: release(v->data);
      0001C9 DD 6E FA         [19]  392 	ld	l, -6 (ix)
      0001CC DD 66 FB         [19]  393 	ld	h, -5 (ix)
      0001CF 4E               [ 7]  394 	ld	c, (hl)
      0001D0 23               [ 6]  395 	inc	hl
      0001D1 66               [ 7]  396 	ld	h, (hl)
                                    397 ;	spillPairReg hl
      0001D2 69               [ 4]  398 	ld	l, c
                                    399 ;	spillPairReg hl
                                    400 ;	spillPairReg hl
      0001D3 CDr00r00         [17]  401 	call	_release
      0001D6                        402 00106$:
                                    403 ;vector.c:74: v->data = buffer;
      0001D6 C1               [10]  404 	pop	bc
      0001D7 E1               [10]  405 	pop	hl
      0001D8 E5               [11]  406 	push	hl
      0001D9 C5               [11]  407 	push	bc
      0001DA DD 7E F8         [19]  408 	ld	a, -8 (ix)
      0001DD 77               [ 7]  409 	ld	(hl), a
      0001DE 23               [ 6]  410 	inc	hl
      0001DF DD 7E F9         [19]  411 	ld	a, -7 (ix)
      0001E2 77               [ 7]  412 	ld	(hl), a
                                    413 ;vector.c:75: v->capacity = new_size;
      0001E3 DD 7E FE         [19]  414 	ld	a, -2 (ix)
      0001E6 C6 02            [ 7]  415 	add	a, #0x02
      0001E8 DD 77 FA         [19]  416 	ld	-6 (ix), a
      0001EB DD 7E FF         [19]  417 	ld	a, -1 (ix)
      0001EE CE 00            [ 7]  418 	adc	a, #0x00
      0001F0 DD 77 FB         [19]  419 	ld	-5 (ix), a
      0001F3 C1               [10]  420 	pop	bc
      0001F4 E1               [10]  421 	pop	hl
      0001F5 E5               [11]  422 	push	hl
      0001F6 C5               [11]  423 	push	bc
      0001F7 DD 7E FC         [19]  424 	ld	a, -4 (ix)
      0001FA 77               [ 7]  425 	ld	(hl), a
      0001FB 23               [ 6]  426 	inc	hl
      0001FC DD 7E FD         [19]  427 	ld	a, -3 (ix)
      0001FF 77               [ 7]  428 	ld	(hl), a
                                    429 ;vector.c:76: return 1;
      000200 3E 01            [ 7]  430 	ld	a, #0x01
      000202                        431 00107$:
                                    432 ;vector.c:77: }
      000202 DD F9            [10]  433 	ld	sp, ix
      000204 DD E1            [14]  434 	pop	ix
      000206 C9               [10]  435 	ret
                                    436 ;vector.c:79: word		vector_size(Vector* v)
                                    437 ;	---------------------------------
                                    438 ; Function vector_size
                                    439 ; ---------------------------------
      000207                        440 _vector_size::
                                    441 ;vector.c:81: if (!v) return 0;
      000207 7C               [ 4]  442 	ld	a, h
      000208 B5               [ 4]  443 	or	a, l
      000209 20 04            [12]  444 	jr	NZ, 00102$
      00020B 11 00 00         [10]  445 	ld	de, #0x0000
      00020E C9               [10]  446 	ret
      00020F                        447 00102$:
                                    448 ;vector.c:82: return v->size;
      00020F 11 04 00         [10]  449 	ld	de, #0x0004
      000212 19               [11]  450 	add	hl, de
      000213 5E               [ 7]  451 	ld	e, (hl)
      000214 23               [ 6]  452 	inc	hl
      000215 56               [ 7]  453 	ld	d, (hl)
                                    454 ;vector.c:83: }
      000216 C9               [10]  455 	ret
                                    456 ;vector.c:85: byte		vector_clear(Vector* v)
                                    457 ;	---------------------------------
                                    458 ; Function vector_clear
                                    459 ; ---------------------------------
      000217                        460 _vector_clear::
                                    461 ;vector.c:87: if (!v) return 0;
      000217 7C               [ 4]  462 	ld	a, h
      000218 B5               [ 4]  463 	or	a,l
      000219 C8               [11]  464 	ret	Z
                                    465 ;vector.c:88: v->size = 0;
      00021A 01 04 00         [10]  466 	ld	bc, #0x0004
      00021D 09               [11]  467 	add	hl, bc
      00021E AF               [ 4]  468 	xor	a, a
      00021F 77               [ 7]  469 	ld	(hl), a
      000220 23               [ 6]  470 	inc	hl
      000221 77               [ 7]  471 	ld	(hl), a
                                    472 ;vector.c:89: return 1;
      000222 3E 01            [ 7]  473 	ld	a, #0x01
                                    474 ;vector.c:90: }
      000224 C9               [10]  475 	ret
                                    476 ;vector.c:92: byte		vector_resize(Vector* v, word size)
                                    477 ;	---------------------------------
                                    478 ; Function vector_resize
                                    479 ; ---------------------------------
      000225                        480 _vector_resize::
      000225 DD E5            [15]  481 	push	ix
      000227 DD 21 00 00      [14]  482 	ld	ix,#0
      00022B DD 39            [15]  483 	add	ix,sp
      00022D F5               [11]  484 	push	af
      00022E 4D               [ 4]  485 	ld	c, l
      00022F 44               [ 4]  486 	ld	b, h
      000230 33               [ 6]  487 	inc	sp
      000231 33               [ 6]  488 	inc	sp
      000232 D5               [11]  489 	push	de
                                    490 ;vector.c:94: if (!v) return 0;
      000233 78               [ 4]  491 	ld	a, b
      000234 B1               [ 4]  492 	or	a,c
      000235 28 2E            [12]  493 	jr	Z, 00107$
                                    494 ;vector.c:95: if (size > v->capacity)
      000237 69               [ 4]  495 	ld	l, c
                                    496 ;	spillPairReg hl
                                    497 ;	spillPairReg hl
      000238 60               [ 4]  498 	ld	h, b
                                    499 ;	spillPairReg hl
                                    500 ;	spillPairReg hl
      000239 23               [ 6]  501 	inc	hl
      00023A 23               [ 6]  502 	inc	hl
      00023B 5E               [ 7]  503 	ld	e, (hl)
      00023C 23               [ 6]  504 	inc	hl
      00023D 56               [ 7]  505 	ld	d, (hl)
      00023E 7B               [ 4]  506 	ld	a, e
      00023F DD 96 FE         [19]  507 	sub	a, -2 (ix)
      000242 7A               [ 4]  508 	ld	a, d
      000243 DD 9E FF         [19]  509 	sbc	a, -1 (ix)
      000246 30 0E            [12]  510 	jr	NC, 00106$
                                    511 ;vector.c:97: if (!vector_reallocate(v, size)) return 0;
      000248 C5               [11]  512 	push	bc
      000249 E1               [10]  513 	pop	hl
      00024A D1               [10]  514 	pop	de
      00024B D5               [11]  515 	push	de
      00024C E5               [11]  516 	push	hl
      00024D 69               [ 4]  517 	ld	l, c
                                    518 ;	spillPairReg hl
                                    519 ;	spillPairReg hl
      00024E 60               [ 4]  520 	ld	h, b
                                    521 ;	spillPairReg hl
                                    522 ;	spillPairReg hl
      00024F CDr36r01         [17]  523 	call	_vector_reallocate
      000252 C1               [10]  524 	pop	bc
      000253 B7               [ 4]  525 	or	a,a
      000254 28 0F            [12]  526 	jr	Z, 00107$
      000256                        527 00106$:
                                    528 ;vector.c:99: v->size = size;
      000256 03               [ 6]  529 	inc	bc
      000257 03               [ 6]  530 	inc	bc
      000258 03               [ 6]  531 	inc	bc
      000259 03               [ 6]  532 	inc	bc
      00025A DD 7E FE         [19]  533 	ld	a, -2 (ix)
      00025D 02               [ 7]  534 	ld	(bc), a
      00025E 03               [ 6]  535 	inc	bc
      00025F DD 7E FF         [19]  536 	ld	a, -1 (ix)
      000262 02               [ 7]  537 	ld	(bc), a
                                    538 ;vector.c:100: return 1;
      000263 3E 01            [ 7]  539 	ld	a, #0x01
      000265                        540 00107$:
                                    541 ;vector.c:101: }
      000265 DD F9            [10]  542 	ld	sp, ix
      000267 DD E1            [14]  543 	pop	ix
      000269 C9               [10]  544 	ret
                                    545 ;vector.c:103: byte		vector_reserve(Vector* v, word size)
                                    546 ;	---------------------------------
                                    547 ; Function vector_reserve
                                    548 ; ---------------------------------
      00026A                        549 _vector_reserve::
      00026A 4D               [ 4]  550 	ld	c, l
      00026B 44               [ 4]  551 	ld	b, h
                                    552 ;vector.c:105: if (!v) return 0;
      00026C 78               [ 4]  553 	ld	a, b
      00026D B1               [ 4]  554 	or	a,c
      00026E C8               [11]  555 	ret	Z
                                    556 ;vector.c:106: if (size <= v->capacity) return 1;
      00026F 69               [ 4]  557 	ld	l, c
                                    558 ;	spillPairReg hl
                                    559 ;	spillPairReg hl
      000270 60               [ 4]  560 	ld	h, b
                                    561 ;	spillPairReg hl
                                    562 ;	spillPairReg hl
      000271 23               [ 6]  563 	inc	hl
      000272 23               [ 6]  564 	inc	hl
      000273 7E               [ 7]  565 	ld	a, (hl)
      000274 23               [ 6]  566 	inc	hl
      000275 66               [ 7]  567 	ld	h, (hl)
                                    568 ;	spillPairReg hl
      000276 6F               [ 4]  569 	ld	l, a
                                    570 ;	spillPairReg hl
                                    571 ;	spillPairReg hl
      000277 AF               [ 4]  572 	xor	a, a
      000278 ED 52            [15]  573 	sbc	hl, de
      00027A 38 03            [12]  574 	jr	C, 00104$
      00027C 3E 01            [ 7]  575 	ld	a, #0x01
      00027E C9               [10]  576 	ret
      00027F                        577 00104$:
                                    578 ;vector.c:107: return vector_reallocate(v, size);
      00027F 69               [ 4]  579 	ld	l, c
                                    580 ;	spillPairReg hl
                                    581 ;	spillPairReg hl
      000280 60               [ 4]  582 	ld	h, b
                                    583 ;	spillPairReg hl
                                    584 ;	spillPairReg hl
                                    585 ;vector.c:108: }
      000281 C3r36r01         [10]  586 	jp	_vector_reallocate
                                    587 ;vector.c:110: byte ensure_capacity(Vector* v)
                                    588 ;	---------------------------------
                                    589 ; Function ensure_capacity
                                    590 ; ---------------------------------
      000284                        591 _ensure_capacity::
      000284 DD E5            [15]  592 	push	ix
      000286 DD 21 00 00      [14]  593 	ld	ix,#0
      00028A DD 39            [15]  594 	add	ix,sp
      00028C F5               [11]  595 	push	af
      00028D E3               [19]  596 	ex	(sp), hl
                                    597 ;vector.c:112: if (v->size >= v->capacity)
      00028E C1               [10]  598 	pop	bc
      00028F C5               [11]  599 	push	bc
      000290 21 04 00         [10]  600 	ld	hl, #4
      000293 09               [11]  601 	add	hl, bc
      000294 4E               [ 7]  602 	ld	c, (hl)
      000295 23               [ 6]  603 	inc	hl
      000296 46               [ 7]  604 	ld	b, (hl)
      000297 E1               [10]  605 	pop	hl
      000298 E5               [11]  606 	push	hl
      000299 23               [ 6]  607 	inc	hl
      00029A 23               [ 6]  608 	inc	hl
      00029B 5E               [ 7]  609 	ld	e, (hl)
      00029C 23               [ 6]  610 	inc	hl
      00029D 56               [ 7]  611 	ld	d, (hl)
      00029E 79               [ 4]  612 	ld	a, c
      00029F 93               [ 4]  613 	sub	a, e
      0002A0 78               [ 4]  614 	ld	a, b
      0002A1 9A               [ 4]  615 	sbc	a, d
      0002A2 38 13            [12]  616 	jr	C, 00106$
                                    617 ;vector.c:114: word new_size = 10;
      0002A4 21 0A 00         [10]  618 	ld	hl, #0x000a
                                    619 ;vector.c:115: if (v->size > 0)
      0002A7 78               [ 4]  620 	ld	a, b
      0002A8 B1               [ 4]  621 	or	a, c
      0002A9 28 03            [12]  622 	jr	Z, 00102$
                                    623 ;vector.c:116: new_size = v->size << 1;
      0002AB 69               [ 4]  624 	ld	l, c
      0002AC 60               [ 4]  625 	ld	h, b
      0002AD 29               [11]  626 	add	hl, hl
      0002AE                        627 00102$:
                                    628 ;vector.c:117: if (!vector_reallocate(v, new_size)) return 0;
      0002AE EB               [ 4]  629 	ex	de, hl
      0002AF E1               [10]  630 	pop	hl
      0002B0 E5               [11]  631 	push	hl
      0002B1 CDr36r01         [17]  632 	call	_vector_reallocate
      0002B4 B7               [ 4]  633 	or	a,a
      0002B5 28 02            [12]  634 	jr	Z, 00107$
      0002B7                        635 00106$:
                                    636 ;vector.c:119: return 1;
      0002B7 3E 01            [ 7]  637 	ld	a, #0x01
      0002B9                        638 00107$:
                                    639 ;vector.c:120: }
      0002B9 DD F9            [10]  640 	ld	sp, ix
      0002BB DD E1            [14]  641 	pop	ix
      0002BD C9               [10]  642 	ret
                                    643 ;vector.c:122: byte		vector_insert(Vector* v, word index, void* element)
                                    644 ;	---------------------------------
                                    645 ; Function vector_insert
                                    646 ; ---------------------------------
      0002BE                        647 _vector_insert::
      0002BE DD E5            [15]  648 	push	ix
      0002C0 DD 21 00 00      [14]  649 	ld	ix,#0
      0002C4 DD 39            [15]  650 	add	ix,sp
      0002C6 FD 21 F2 FF      [14]  651 	ld	iy, #-14
      0002CA FD 39            [15]  652 	add	iy, sp
      0002CC FD F9            [10]  653 	ld	sp, iy
      0002CE DD 75 FE         [19]  654 	ld	-2 (ix), l
      0002D1 DD 74 FF         [19]  655 	ld	-1 (ix), h
      0002D4 DD 73 FC         [19]  656 	ld	-4 (ix), e
      0002D7 DD 72 FD         [19]  657 	ld	-3 (ix), d
                                    658 ;vector.c:124: if (!v) return 0;
      0002DA DD 7E FF         [19]  659 	ld	a, -1 (ix)
      0002DD DD B6 FE         [19]  660 	or	a, -2 (ix)
      0002E0 20 04            [12]  661 	jr	NZ, 00102$
      0002E2 AF               [ 4]  662 	xor	a, a
      0002E3 C3r02r04         [10]  663 	jp	00105$
      0002E6                        664 00102$:
                                    665 ;vector.c:125: if (index >= v->size) return vector_push(v, element);
      0002E6 DD 7E FE         [19]  666 	ld	a, -2 (ix)
      0002E9 C6 04            [ 7]  667 	add	a, #0x04
      0002EB DD 77 F4         [19]  668 	ld	-12 (ix), a
      0002EE DD 7E FF         [19]  669 	ld	a, -1 (ix)
      0002F1 CE 00            [ 7]  670 	adc	a, #0x00
      0002F3 DD 77 F5         [19]  671 	ld	-11 (ix), a
      0002F6 DD 6E F4         [19]  672 	ld	l, -12 (ix)
      0002F9 DD 66 F5         [19]  673 	ld	h, -11 (ix)
      0002FC 4E               [ 7]  674 	ld	c, (hl)
      0002FD 23               [ 6]  675 	inc	hl
      0002FE 46               [ 7]  676 	ld	b, (hl)
      0002FF DD 7E FC         [19]  677 	ld	a, -4 (ix)
      000302 91               [ 4]  678 	sub	a, c
      000303 DD 7E FD         [19]  679 	ld	a, -3 (ix)
      000306 98               [ 4]  680 	sbc	a, b
      000307 38 12            [12]  681 	jr	C, 00104$
      000309 DD 5E 04         [19]  682 	ld	e, 4 (ix)
      00030C DD 56 05         [19]  683 	ld	d, 5 (ix)
      00030F DD 6E FE         [19]  684 	ld	l, -2 (ix)
                                    685 ;	spillPairReg hl
                                    686 ;	spillPairReg hl
      000312 DD 66 FF         [19]  687 	ld	h, -1 (ix)
                                    688 ;	spillPairReg hl
                                    689 ;	spillPairReg hl
      000315 CDr09r04         [17]  690 	call	_vector_push
      000318 C3r02r04         [10]  691 	jp	00105$
      00031B                        692 00104$:
                                    693 ;vector.c:126: ensure_capacity(v);
      00031B DD 6E FE         [19]  694 	ld	l, -2 (ix)
                                    695 ;	spillPairReg hl
                                    696 ;	spillPairReg hl
      00031E DD 66 FF         [19]  697 	ld	h, -1 (ix)
                                    698 ;	spillPairReg hl
                                    699 ;	spillPairReg hl
      000321 CDr84r02         [17]  700 	call	_ensure_capacity
                                    701 ;vector.c:127: char* dst = v->data + multiply(index + 1, v->element_size);
      000324 DD 4E FE         [19]  702 	ld	c, -2 (ix)
      000327 DD 46 FF         [19]  703 	ld	b, -1 (ix)
      00032A 21 06 00         [10]  704 	ld	hl, #6
      00032D 09               [11]  705 	add	hl, bc
      00032E 7E               [ 7]  706 	ld	a, (hl)
      00032F DD 77 F6         [19]  707 	ld	-10 (ix), a
      000332 23               [ 6]  708 	inc	hl
      000333 7E               [ 7]  709 	ld	a, (hl)
      000334 DD 77 F7         [19]  710 	ld	-9 (ix), a
      000337 DD 6E FE         [19]  711 	ld	l, -2 (ix)
      00033A DD 66 FF         [19]  712 	ld	h, -1 (ix)
      00033D 7E               [ 7]  713 	ld	a, (hl)
      00033E DD 77 F8         [19]  714 	ld	-8 (ix), a
      000341 23               [ 6]  715 	inc	hl
      000342 7E               [ 7]  716 	ld	a, (hl)
      000343 DD 77 F9         [19]  717 	ld	-7 (ix), a
      000346 DD 7E FC         [19]  718 	ld	a, -4 (ix)
      000349 DD 77 F2         [19]  719 	ld	-14 (ix), a
      00034C DD 7E FD         [19]  720 	ld	a, -3 (ix)
      00034F DD 77 F3         [19]  721 	ld	-13 (ix), a
      000352 DD 7E F2         [19]  722 	ld	a, -14 (ix)
      000355 C6 01            [ 7]  723 	add	a, #0x01
      000357 DD 77 FA         [19]  724 	ld	-6 (ix), a
      00035A DD 7E F3         [19]  725 	ld	a, -13 (ix)
      00035D CE 00            [ 7]  726 	adc	a, #0x00
      00035F DD 77 FB         [19]  727 	ld	-5 (ix), a
      000362 DD 5E F8         [19]  728 	ld	e, -8 (ix)
      000365 DD 56 F9         [19]  729 	ld	d, -7 (ix)
      000368 DD 6E FA         [19]  730 	ld	l, -6 (ix)
                                    731 ;	spillPairReg hl
                                    732 ;	spillPairReg hl
      00036B DD 66 FB         [19]  733 	ld	h, -5 (ix)
                                    734 ;	spillPairReg hl
                                    735 ;	spillPairReg hl
      00036E CDr00r00         [17]  736 	call	_multiply
      000371 DD 73 F8         [19]  737 	ld	-8 (ix), e
      000374 DD 72 F9         [19]  738 	ld	-7 (ix), d
      000377 DD 7E F8         [19]  739 	ld	a, -8 (ix)
      00037A DD 86 F6         [19]  740 	add	a, -10 (ix)
      00037D DD 77 FA         [19]  741 	ld	-6 (ix), a
      000380 DD 7E F9         [19]  742 	ld	a, -7 (ix)
      000383 DD 8E F7         [19]  743 	adc	a, -9 (ix)
      000386 DD 77 FB         [19]  744 	ld	-5 (ix), a
      000389 DD 6E FE         [19]  745 	ld	l, -2 (ix)
      00038C DD 66 FF         [19]  746 	ld	h, -1 (ix)
      00038F 5E               [ 7]  747 	ld	e, (hl)
      000390 23               [ 6]  748 	inc	hl
      000391 56               [ 7]  749 	ld	d, (hl)
                                    750 ;vector.c:128: char* src = dst - v->element_size;
      000392 DD 7E FA         [19]  751 	ld	a, -6 (ix)
      000395 93               [ 4]  752 	sub	a, e
      000396 4F               [ 4]  753 	ld	c, a
      000397 DD 7E FB         [19]  754 	ld	a, -5 (ix)
      00039A 9A               [ 4]  755 	sbc	a, d
      00039B DD 71 F8         [19]  756 	ld	-8 (ix), c
      00039E DD 77 F9         [19]  757 	ld	-7 (ix), a
                                    758 ;vector.c:129: copy(dst, src, multiply(v->size - index, v->element_size));
      0003A1 DD 6E F4         [19]  759 	ld	l, -12 (ix)
      0003A4 DD 66 F5         [19]  760 	ld	h, -11 (ix)
      0003A7 4E               [ 7]  761 	ld	c, (hl)
      0003A8 23               [ 6]  762 	inc	hl
      0003A9 46               [ 7]  763 	ld	b, (hl)
      0003AA 79               [ 4]  764 	ld	a, c
      0003AB DD 96 FC         [19]  765 	sub	a, -4 (ix)
      0003AE 6F               [ 4]  766 	ld	l, a
                                    767 ;	spillPairReg hl
                                    768 ;	spillPairReg hl
      0003AF 78               [ 4]  769 	ld	a, b
      0003B0 DD 9E FD         [19]  770 	sbc	a, -3 (ix)
      0003B3 67               [ 4]  771 	ld	h, a
                                    772 ;	spillPairReg hl
                                    773 ;	spillPairReg hl
      0003B4 CDr00r00         [17]  774 	call	_multiply
                                    775 ;	spillPairReg hl
                                    776 ;	spillPairReg hl
      0003B7 DD 73 F6         [19]  777 	ld	-10 (ix), e
      0003BA DD 72 F7         [19]  778 	ld	-9 (ix), d
                                    779 ;	spillPairReg hl
                                    780 ;	spillPairReg hl
      0003BD D5               [11]  781 	push	de
      0003BE DD 5E F8         [19]  782 	ld	e, -8 (ix)
      0003C1 DD 56 F9         [19]  783 	ld	d, -7 (ix)
      0003C4 DD 6E FA         [19]  784 	ld	l, -6 (ix)
                                    785 ;	spillPairReg hl
                                    786 ;	spillPairReg hl
      0003C7 DD 66 FB         [19]  787 	ld	h, -5 (ix)
                                    788 ;	spillPairReg hl
                                    789 ;	spillPairReg hl
      0003CA CDr00r00         [17]  790 	call	_copy
                                    791 ;vector.c:130: v->size++;
      0003CD DD 6E F4         [19]  792 	ld	l, -12 (ix)
      0003D0 DD 66 F5         [19]  793 	ld	h, -11 (ix)
      0003D3 4E               [ 7]  794 	ld	c, (hl)
      0003D4 23               [ 6]  795 	inc	hl
      0003D5 46               [ 7]  796 	ld	b, (hl)
      0003D6 03               [ 6]  797 	inc	bc
      0003D7 DD 71 FA         [19]  798 	ld	-6 (ix), c
      0003DA DD 70 FB         [19]  799 	ld	-5 (ix), b
      0003DD C1               [10]  800 	pop	bc
      0003DE E1               [10]  801 	pop	hl
      0003DF E5               [11]  802 	push	hl
      0003E0 C5               [11]  803 	push	bc
      0003E1 DD 7E FA         [19]  804 	ld	a, -6 (ix)
      0003E4 77               [ 7]  805 	ld	(hl), a
      0003E5 23               [ 6]  806 	inc	hl
      0003E6 DD 7E FB         [19]  807 	ld	a, -5 (ix)
      0003E9 77               [ 7]  808 	ld	(hl), a
                                    809 ;vector.c:131: vector_set(v, index, element);
      0003EA DD 6E 04         [19]  810 	ld	l, 4 (ix)
                                    811 ;	spillPairReg hl
                                    812 ;	spillPairReg hl
      0003ED DD 66 05         [19]  813 	ld	h, 5 (ix)
                                    814 ;	spillPairReg hl
                                    815 ;	spillPairReg hl
      0003F0 E5               [11]  816 	push	hl
      0003F1 DD 5E FC         [19]  817 	ld	e, -4 (ix)
      0003F4 DD 56 FD         [19]  818 	ld	d, -3 (ix)
      0003F7 DD 6E FE         [19]  819 	ld	l, -2 (ix)
                                    820 ;	spillPairReg hl
                                    821 ;	spillPairReg hl
      0003FA DD 66 FF         [19]  822 	ld	h, -1 (ix)
                                    823 ;	spillPairReg hl
                                    824 ;	spillPairReg hl
      0003FD CDr69r05         [17]  825 	call	_vector_set
                                    826 ;vector.c:132: return 1;
      000400 3E 01            [ 7]  827 	ld	a, #0x01
      000402                        828 00105$:
                                    829 ;vector.c:133: }
      000402 DD F9            [10]  830 	ld	sp, ix
      000404 DD E1            [14]  831 	pop	ix
      000406 E1               [10]  832 	pop	hl
      000407 C1               [10]  833 	pop	bc
      000408 E9               [ 4]  834 	jp	(hl)
                                    835 ;vector.c:135: byte		vector_push(Vector* v, void* element)
                                    836 ;	---------------------------------
                                    837 ; Function vector_push
                                    838 ; ---------------------------------
      000409                        839 _vector_push::
      000409 DD E5            [15]  840 	push	ix
      00040B DD 21 00 00      [14]  841 	ld	ix,#0
      00040F DD 39            [15]  842 	add	ix,sp
      000411 F5               [11]  843 	push	af
      000412 F5               [11]  844 	push	af
      000413 4D               [ 4]  845 	ld	c, l
      000414 44               [ 4]  846 	ld	b, h
      000415 DD 73 FE         [19]  847 	ld	-2 (ix), e
      000418 DD 72 FF         [19]  848 	ld	-1 (ix), d
                                    849 ;vector.c:137: if (!v) return 0;
      00041B 78               [ 4]  850 	ld	a, b
      00041C B1               [ 4]  851 	or	a,c
      00041D 28 50            [12]  852 	jr	Z, 00103$
                                    853 ;vector.c:138: ensure_capacity(v);
      00041F C5               [11]  854 	push	bc
      000420 69               [ 4]  855 	ld	l, c
                                    856 ;	spillPairReg hl
                                    857 ;	spillPairReg hl
      000421 60               [ 4]  858 	ld	h, b
                                    859 ;	spillPairReg hl
                                    860 ;	spillPairReg hl
      000422 CDr84r02         [17]  861 	call	_ensure_capacity
      000425 C1               [10]  862 	pop	bc
                                    863 ;vector.c:139: copy(v->data + multiply(v->size, v->element_size), element, v->element_size);
      000426 69               [ 4]  864 	ld	l, c
      000427 60               [ 4]  865 	ld	h, b
      000428 5E               [ 7]  866 	ld	e, (hl)
      000429 23               [ 6]  867 	inc	hl
      00042A 56               [ 7]  868 	ld	d, (hl)
      00042B D5               [11]  869 	push	de
      00042C FD E1            [14]  870 	pop	iy
      00042E 69               [ 4]  871 	ld	l, c
                                    872 ;	spillPairReg hl
                                    873 ;	spillPairReg hl
      00042F 60               [ 4]  874 	ld	h, b
                                    875 ;	spillPairReg hl
                                    876 ;	spillPairReg hl
      000430 C5               [11]  877 	push	bc
      000431 01 06 00         [10]  878 	ld	bc, #0x0006
      000434 09               [11]  879 	add	hl, bc
      000435 C1               [10]  880 	pop	bc
      000436 7E               [ 7]  881 	ld	a, (hl)
      000437 DD 77 FC         [19]  882 	ld	-4 (ix), a
      00043A 23               [ 6]  883 	inc	hl
      00043B 7E               [ 7]  884 	ld	a, (hl)
      00043C DD 77 FD         [19]  885 	ld	-3 (ix), a
      00043F 03               [ 6]  886 	inc	bc
      000440 03               [ 6]  887 	inc	bc
      000441 03               [ 6]  888 	inc	bc
      000442 03               [ 6]  889 	inc	bc
      000443 69               [ 4]  890 	ld	l, c
      000444 60               [ 4]  891 	ld	h, b
      000445 7E               [ 7]  892 	ld	a, (hl)
      000446 23               [ 6]  893 	inc	hl
      000447 66               [ 7]  894 	ld	h, (hl)
                                    895 ;	spillPairReg hl
      000448 6F               [ 4]  896 	ld	l, a
                                    897 ;	spillPairReg hl
                                    898 ;	spillPairReg hl
      000449 C5               [11]  899 	push	bc
      00044A FD E5            [15]  900 	push	iy
      00044C CDr00r00         [17]  901 	call	_multiply
      00044F FD E1            [14]  902 	pop	iy
      000451 C1               [10]  903 	pop	bc
      000452 E1               [10]  904 	pop	hl
      000453 E5               [11]  905 	push	hl
      000454 19               [11]  906 	add	hl, de
      000455 C5               [11]  907 	push	bc
      000456 FD E5            [15]  908 	push	iy
      000458 DD 5E FE         [19]  909 	ld	e, -2 (ix)
      00045B DD 56 FF         [19]  910 	ld	d, -1 (ix)
      00045E CDr00r00         [17]  911 	call	_copy
      000461 C1               [10]  912 	pop	bc
                                    913 ;vector.c:140: v->size++;
      000462 69               [ 4]  914 	ld	l, c
      000463 60               [ 4]  915 	ld	h, b
      000464 5E               [ 7]  916 	ld	e, (hl)
      000465 23               [ 6]  917 	inc	hl
      000466 56               [ 7]  918 	ld	d, (hl)
      000467 13               [ 6]  919 	inc	de
      000468 7B               [ 4]  920 	ld	a, e
      000469 02               [ 7]  921 	ld	(bc), a
      00046A 03               [ 6]  922 	inc	bc
      00046B 7A               [ 4]  923 	ld	a, d
      00046C 02               [ 7]  924 	ld	(bc), a
                                    925 ;vector.c:141: return 1;
      00046D 3E 01            [ 7]  926 	ld	a, #0x01
      00046F                        927 00103$:
                                    928 ;vector.c:142: }
      00046F DD F9            [10]  929 	ld	sp, ix
      000471 DD E1            [14]  930 	pop	ix
      000473 C9               [10]  931 	ret
                                    932 ;vector.c:144: byte		vector_pop(Vector* v, void* element)
                                    933 ;	---------------------------------
                                    934 ; Function vector_pop
                                    935 ; ---------------------------------
      000474                        936 _vector_pop::
      000474 DD E5            [15]  937 	push	ix
      000476 DD 21 00 00      [14]  938 	ld	ix,#0
      00047A DD 39            [15]  939 	add	ix,sp
      00047C F5               [11]  940 	push	af
      00047D F5               [11]  941 	push	af
      00047E 4D               [ 4]  942 	ld	c, l
      00047F 44               [ 4]  943 	ld	b, h
      000480 DD 73 FE         [19]  944 	ld	-2 (ix), e
      000483 DD 72 FF         [19]  945 	ld	-1 (ix), d
                                    946 ;vector.c:146: if (!v) return 0;
      000486 78               [ 4]  947 	ld	a, b
      000487 B1               [ 4]  948 	or	a,c
      000488 28 4D            [12]  949 	jr	Z, 00107$
                                    950 ;vector.c:147: if (v->size > 0)
      00048A 21 04 00         [10]  951 	ld	hl, #0x0004
      00048D 09               [11]  952 	add	hl, bc
      00048E E3               [19]  953 	ex	(sp), hl
      00048F E1               [10]  954 	pop	hl
      000490 E5               [11]  955 	push	hl
      000491 5E               [ 7]  956 	ld	e, (hl)
      000492 23               [ 6]  957 	inc	hl
      000493 56               [ 7]  958 	ld	d, (hl)
      000494 7A               [ 4]  959 	ld	a, d
      000495 B3               [ 4]  960 	or	a, e
      000496 28 3E            [12]  961 	jr	Z, 00106$
                                    962 ;vector.c:149: v->size--;
      000498 1B               [ 6]  963 	dec	de
      000499 E1               [10]  964 	pop	hl
      00049A E5               [11]  965 	push	hl
      00049B 73               [ 7]  966 	ld	(hl), e
      00049C 23               [ 6]  967 	inc	hl
      00049D 72               [ 7]  968 	ld	(hl), d
                                    969 ;vector.c:150: if (element)
      00049E DD 7E FF         [19]  970 	ld	a, -1 (ix)
      0004A1 DD B6 FE         [19]  971 	or	a, -2 (ix)
      0004A4 28 2C            [12]  972 	jr	Z, 00104$
                                    973 ;vector.c:151: copy(element, v->data + multiply(v->size, v->element_size), v->element_size);
      0004A6 69               [ 4]  974 	ld	l, c
      0004A7 60               [ 4]  975 	ld	h, b
      0004A8 5E               [ 7]  976 	ld	e, (hl)
      0004A9 23               [ 6]  977 	inc	hl
      0004AA 56               [ 7]  978 	ld	d, (hl)
      0004AB D5               [11]  979 	push	de
      0004AC FD E1            [14]  980 	pop	iy
      0004AE 21 06 00         [10]  981 	ld	hl, #6
      0004B1 09               [11]  982 	add	hl, bc
      0004B2 4E               [ 7]  983 	ld	c, (hl)
      0004B3 23               [ 6]  984 	inc	hl
      0004B4 46               [ 7]  985 	ld	b, (hl)
      0004B5 E1               [10]  986 	pop	hl
      0004B6 E5               [11]  987 	push	hl
      0004B7 7E               [ 7]  988 	ld	a, (hl)
      0004B8 23               [ 6]  989 	inc	hl
      0004B9 66               [ 7]  990 	ld	h, (hl)
                                    991 ;	spillPairReg hl
      0004BA 6F               [ 4]  992 	ld	l, a
                                    993 ;	spillPairReg hl
                                    994 ;	spillPairReg hl
      0004BB C5               [11]  995 	push	bc
      0004BC FD E5            [15]  996 	push	iy
      0004BE CDr00r00         [17]  997 	call	_multiply
      0004C1 EB               [ 4]  998 	ex	de, hl
      0004C2 FD E1            [14]  999 	pop	iy
      0004C4 C1               [10] 1000 	pop	bc
      0004C5 09               [11] 1001 	add	hl, bc
      0004C6 FD E5            [15] 1002 	push	iy
      0004C8 EB               [ 4] 1003 	ex	de, hl
      0004C9 DD 6E FE         [19] 1004 	ld	l, -2 (ix)
                                   1005 ;	spillPairReg hl
                                   1006 ;	spillPairReg hl
      0004CC DD 66 FF         [19] 1007 	ld	h, -1 (ix)
                                   1008 ;	spillPairReg hl
                                   1009 ;	spillPairReg hl
      0004CF CDr00r00         [17] 1010 	call	_copy
      0004D2                       1011 00104$:
                                   1012 ;vector.c:152: return 1;
      0004D2 3E 01            [ 7] 1013 	ld	a, #0x01
      0004D4 18 01            [12] 1014 	jr	00107$
      0004D6                       1015 00106$:
                                   1016 ;vector.c:154: return 0;
      0004D6 AF               [ 4] 1017 	xor	a, a
      0004D7                       1018 00107$:
                                   1019 ;vector.c:155: }
      0004D7 DD F9            [10] 1020 	ld	sp, ix
      0004D9 DD E1            [14] 1021 	pop	ix
      0004DB C9               [10] 1022 	ret
                                   1023 ;vector.c:157: void*		vector_access(Vector* v, word index)
                                   1024 ;	---------------------------------
                                   1025 ; Function vector_access
                                   1026 ; ---------------------------------
      0004DC                       1027 _vector_access::
      0004DC DD E5            [15] 1028 	push	ix
      0004DE DD 21 00 00      [14] 1029 	ld	ix,#0
      0004E2 DD 39            [15] 1030 	add	ix,sp
      0004E4 FD 21 F6 FF      [14] 1031 	ld	iy, #-10
      0004E8 FD 39            [15] 1032 	add	iy, sp
      0004EA FD F9            [10] 1033 	ld	sp, iy
      0004EC DD 75 FE         [19] 1034 	ld	-2 (ix), l
      0004EF DD 74 FF         [19] 1035 	ld	-1 (ix), h
      0004F2 DD 73 FC         [19] 1036 	ld	-4 (ix), e
      0004F5 DD 72 FD         [19] 1037 	ld	-3 (ix), d
                                   1038 ;vector.c:159: if (!v) return 0;
      0004F8 DD 7E FF         [19] 1039 	ld	a, -1 (ix)
      0004FB DD B6 FE         [19] 1040 	or	a, -2 (ix)
      0004FE 20 05            [12] 1041 	jr	NZ, 00102$
      000500 11 00 00         [10] 1042 	ld	de, #0x0000
      000503 18 5F            [12] 1043 	jr	00105$
      000505                       1044 00102$:
                                   1045 ;vector.c:160: if (index >= v->size) return 0;
      000505 DD 4E FE         [19] 1046 	ld	c, -2 (ix)
      000508 DD 46 FF         [19] 1047 	ld	b, -1 (ix)
      00050B 21 04 00         [10] 1048 	ld	hl, #4
      00050E 09               [11] 1049 	add	hl, bc
      00050F 4E               [ 7] 1050 	ld	c, (hl)
      000510 23               [ 6] 1051 	inc	hl
      000511 46               [ 7] 1052 	ld	b, (hl)
      000512 DD 7E FC         [19] 1053 	ld	a, -4 (ix)
      000515 91               [ 4] 1054 	sub	a, c
      000516 DD 7E FD         [19] 1055 	ld	a, -3 (ix)
      000519 98               [ 4] 1056 	sbc	a, b
      00051A 38 05            [12] 1057 	jr	C, 00104$
      00051C 11 00 00         [10] 1058 	ld	de, #0x0000
      00051F 18 43            [12] 1059 	jr	00105$
      000521                       1060 00104$:
                                   1061 ;vector.c:161: return v->data + multiply(index, v->element_size);
      000521 DD 4E FE         [19] 1062 	ld	c, -2 (ix)
      000524 DD 46 FF         [19] 1063 	ld	b, -1 (ix)
      000527 21 06 00         [10] 1064 	ld	hl, #6
      00052A 09               [11] 1065 	add	hl, bc
      00052B 7E               [ 7] 1066 	ld	a, (hl)
      00052C DD 77 F6         [19] 1067 	ld	-10 (ix), a
      00052F 23               [ 6] 1068 	inc	hl
      000530 7E               [ 7] 1069 	ld	a, (hl)
      000531 DD 77 F7         [19] 1070 	ld	-9 (ix), a
      000534 DD 6E FE         [19] 1071 	ld	l, -2 (ix)
      000537 DD 66 FF         [19] 1072 	ld	h, -1 (ix)
      00053A 5E               [ 7] 1073 	ld	e, (hl)
      00053B 23               [ 6] 1074 	inc	hl
      00053C 56               [ 7] 1075 	ld	d, (hl)
      00053D DD 6E FC         [19] 1076 	ld	l, -4 (ix)
                                   1077 ;	spillPairReg hl
                                   1078 ;	spillPairReg hl
      000540 DD 66 FD         [19] 1079 	ld	h, -3 (ix)
                                   1080 ;	spillPairReg hl
                                   1081 ;	spillPairReg hl
      000543 CDr00r00         [17] 1082 	call	_multiply
      000546 DD 73 F8         [19] 1083 	ld	-8 (ix), e
      000549 DD 72 F9         [19] 1084 	ld	-7 (ix), d
      00054C DD 7E F8         [19] 1085 	ld	a, -8 (ix)
      00054F DD 86 F6         [19] 1086 	add	a, -10 (ix)
      000552 DD 77 FA         [19] 1087 	ld	-6 (ix), a
      000555 DD 7E F9         [19] 1088 	ld	a, -7 (ix)
      000558 DD 8E F7         [19] 1089 	adc	a, -9 (ix)
      00055B DD 77 FB         [19] 1090 	ld	-5 (ix), a
      00055E DD 5E FA         [19] 1091 	ld	e, -6 (ix)
      000561 DD 56 FB         [19] 1092 	ld	d, -5 (ix)
      000564                       1093 00105$:
                                   1094 ;vector.c:162: }
      000564 DD F9            [10] 1095 	ld	sp, ix
      000566 DD E1            [14] 1096 	pop	ix
      000568 C9               [10] 1097 	ret
                                   1098 ;vector.c:164: byte		vector_set(Vector* v, word index, void* element)
                                   1099 ;	---------------------------------
                                   1100 ; Function vector_set
                                   1101 ; ---------------------------------
      000569                       1102 _vector_set::
      000569 DD E5            [15] 1103 	push	ix
      00056B DD 21 00 00      [14] 1104 	ld	ix,#0
      00056F DD 39            [15] 1105 	add	ix,sp
                                   1106 ;vector.c:166: if (v)
      000571 7C               [ 4] 1107 	ld	a, h
      000572 B5               [ 4] 1108 	or	a, l
      000573 28 26            [12] 1109 	jr	Z, 00105$
                                   1110 ;vector.c:168: void* dst = vector_access(v, index);
      000575 E5               [11] 1111 	push	hl
      000576 CDrDCr04         [17] 1112 	call	_vector_access
      000579 4B               [ 4] 1113 	ld	c, e
      00057A 42               [ 4] 1114 	ld	b, d
      00057B E1               [10] 1115 	pop	hl
                                   1116 ;vector.c:169: if (element && dst)
      00057C DD 7E 05         [19] 1117 	ld	a, 5 (ix)
      00057F DD B6 04         [19] 1118 	or	a, 4 (ix)
      000582 28 17            [12] 1119 	jr	Z, 00105$
      000584 78               [ 4] 1120 	ld	a, b
      000585 B1               [ 4] 1121 	or	a, c
      000586 28 13            [12] 1122 	jr	Z, 00105$
                                   1123 ;vector.c:171: copy(dst, element, v->element_size);
      000588 5E               [ 7] 1124 	ld	e, (hl)
      000589 23               [ 6] 1125 	inc	hl
      00058A 56               [ 7] 1126 	ld	d, (hl)
      00058B D5               [11] 1127 	push	de
      00058C DD 5E 04         [19] 1128 	ld	e, 4 (ix)
      00058F DD 56 05         [19] 1129 	ld	d, 5 (ix)
      000592 69               [ 4] 1130 	ld	l, c
                                   1131 ;	spillPairReg hl
                                   1132 ;	spillPairReg hl
      000593 60               [ 4] 1133 	ld	h, b
                                   1134 ;	spillPairReg hl
                                   1135 ;	spillPairReg hl
      000594 CDr00r00         [17] 1136 	call	_copy
                                   1137 ;vector.c:172: return 1;
      000597 3E 01            [ 7] 1138 	ld	a, #0x01
      000599 18 01            [12] 1139 	jr	00106$
      00059B                       1140 00105$:
                                   1141 ;vector.c:175: return 0;
      00059B AF               [ 4] 1142 	xor	a, a
      00059C                       1143 00106$:
                                   1144 ;vector.c:176: }
      00059C DD E1            [14] 1145 	pop	ix
      00059E E1               [10] 1146 	pop	hl
      00059F C1               [10] 1147 	pop	bc
      0005A0 E9               [ 4] 1148 	jp	(hl)
                                   1149 ;vector.c:178: byte		vector_get(Vector* v, word index, void* element)
                                   1150 ;	---------------------------------
                                   1151 ; Function vector_get
                                   1152 ; ---------------------------------
      0005A1                       1153 _vector_get::
      0005A1 DD E5            [15] 1154 	push	ix
      0005A3 DD 21 00 00      [14] 1155 	ld	ix,#0
      0005A7 DD 39            [15] 1156 	add	ix,sp
                                   1157 ;vector.c:180: if (!v) return 0;
      0005A9 7C               [ 4] 1158 	ld	a, h
      0005AA B5               [ 4] 1159 	or	a, l
      0005AB 20 03            [12] 1160 	jr	NZ, 00102$
      0005AD AF               [ 4] 1161 	xor	a, a
      0005AE 18 23            [12] 1162 	jr	00106$
      0005B0                       1163 00102$:
                                   1164 ;vector.c:181: void* src = vector_access(v, index);
      0005B0 E5               [11] 1165 	push	hl
      0005B1 CDrDCr04         [17] 1166 	call	_vector_access
      0005B4 E1               [10] 1167 	pop	hl
                                   1168 ;vector.c:182: if (element && src)
      0005B5 DD 7E 05         [19] 1169 	ld	a, 5 (ix)
      0005B8 DD B6 04         [19] 1170 	or	a, 4 (ix)
      0005BB 28 15            [12] 1171 	jr	Z, 00104$
      0005BD 7A               [ 4] 1172 	ld	a, d
      0005BE B3               [ 4] 1173 	or	a, e
      0005BF 28 11            [12] 1174 	jr	Z, 00104$
                                   1175 ;vector.c:184: copy(element, src, v->element_size);
      0005C1 4E               [ 7] 1176 	ld	c, (hl)
      0005C2 23               [ 6] 1177 	inc	hl
      0005C3 46               [ 7] 1178 	ld	b, (hl)
      0005C4 C5               [11] 1179 	push	bc
      0005C5 DD 6E 04         [19] 1180 	ld	l, 4 (ix)
                                   1181 ;	spillPairReg hl
                                   1182 ;	spillPairReg hl
      0005C8 DD 66 05         [19] 1183 	ld	h, 5 (ix)
                                   1184 ;	spillPairReg hl
                                   1185 ;	spillPairReg hl
      0005CB CDr00r00         [17] 1186 	call	_copy
                                   1187 ;vector.c:185: return 1;
      0005CE 3E 01            [ 7] 1188 	ld	a, #0x01
      0005D0 18 01            [12] 1189 	jr	00106$
      0005D2                       1190 00104$:
                                   1191 ;vector.c:187: return 0;
      0005D2 AF               [ 4] 1192 	xor	a, a
      0005D3                       1193 00106$:
                                   1194 ;vector.c:188: }
      0005D3 DD E1            [14] 1195 	pop	ix
      0005D5 E1               [10] 1196 	pop	hl
      0005D6 C1               [10] 1197 	pop	bc
      0005D7 E9               [ 4] 1198 	jp	(hl)
                                   1199 ;vector.c:190: byte		vector_erase(Vector* v, word index)
                                   1200 ;	---------------------------------
                                   1201 ; Function vector_erase
                                   1202 ; ---------------------------------
      0005D8                       1203 _vector_erase::
      0005D8 DD E5            [15] 1204 	push	ix
      0005DA DD 21 00 00      [14] 1205 	ld	ix,#0
      0005DE DD 39            [15] 1206 	add	ix,sp
      0005E0 FD 21 F8 FF      [14] 1207 	ld	iy, #-8
      0005E4 FD 39            [15] 1208 	add	iy, sp
      0005E6 FD F9            [10] 1209 	ld	sp, iy
      0005E8 4D               [ 4] 1210 	ld	c, l
      0005E9 44               [ 4] 1211 	ld	b, h
      0005EA DD 73 FE         [19] 1212 	ld	-2 (ix), e
      0005ED DD 72 FF         [19] 1213 	ld	-1 (ix), d
                                   1214 ;vector.c:192: if (!v) return 0;
      0005F0 78               [ 4] 1215 	ld	a, b
      0005F1 B1               [ 4] 1216 	or	a,c
      0005F2 CAr7Dr06         [10] 1217 	jp	Z,00107$
                                   1218 ;vector.c:193: if (index >= v->size) return 0;
      0005F5 21 04 00         [10] 1219 	ld	hl, #0x0004
      0005F8 09               [11] 1220 	add	hl, bc
      0005F9 E3               [19] 1221 	ex	(sp), hl
      0005FA E1               [10] 1222 	pop	hl
      0005FB E5               [11] 1223 	push	hl
      0005FC 5E               [ 7] 1224 	ld	e, (hl)
      0005FD 23               [ 6] 1225 	inc	hl
      0005FE 56               [ 7] 1226 	ld	d, (hl)
      0005FF DD 7E FE         [19] 1227 	ld	a, -2 (ix)
      000602 93               [ 4] 1228 	sub	a, e
      000603 DD 7E FF         [19] 1229 	ld	a, -1 (ix)
      000606 9A               [ 4] 1230 	sbc	a, d
      000607 38 03            [12] 1231 	jr	C, 00104$
      000609 AF               [ 4] 1232 	xor	a, a
      00060A 18 71            [12] 1233 	jr	00107$
      00060C                       1234 00104$:
                                   1235 ;vector.c:194: if (index < (v->size - 1))
      00060C 6B               [ 4] 1236 	ld	l, e
                                   1237 ;	spillPairReg hl
                                   1238 ;	spillPairReg hl
      00060D 62               [ 4] 1239 	ld	h, d
                                   1240 ;	spillPairReg hl
                                   1241 ;	spillPairReg hl
      00060E 2B               [ 6] 1242 	dec	hl
      00060F DD 7E FE         [19] 1243 	ld	a, -2 (ix)
      000612 DD 77 FA         [19] 1244 	ld	-6 (ix), a
      000615 DD 7E FF         [19] 1245 	ld	a, -1 (ix)
      000618 DD 77 FB         [19] 1246 	ld	-5 (ix), a
      00061B DD 7E FA         [19] 1247 	ld	a, -6 (ix)
      00061E 95               [ 4] 1248 	sub	a, l
      00061F DD 7E FB         [19] 1249 	ld	a, -5 (ix)
      000622 9C               [ 4] 1250 	sbc	a, h
      000623 30 4B            [12] 1251 	jr	NC, 00106$
                                   1252 ;vector.c:198: multiply(v->element_size, (v->size - index - 1)));
      000625 7B               [ 4] 1253 	ld	a, e
      000626 DD 96 FE         [19] 1254 	sub	a, -2 (ix)
      000629 5F               [ 4] 1255 	ld	e, a
      00062A 7A               [ 4] 1256 	ld	a, d
      00062B DD 9E FF         [19] 1257 	sbc	a, -1 (ix)
      00062E 57               [ 4] 1258 	ld	d, a
      00062F 1B               [ 6] 1259 	dec	de
      000630 69               [ 4] 1260 	ld	l, c
      000631 60               [ 4] 1261 	ld	h, b
      000632 7E               [ 7] 1262 	ld	a, (hl)
      000633 23               [ 6] 1263 	inc	hl
      000634 66               [ 7] 1264 	ld	h, (hl)
                                   1265 ;	spillPairReg hl
      000635 6F               [ 4] 1266 	ld	l, a
                                   1267 ;	spillPairReg hl
                                   1268 ;	spillPairReg hl
      000636 C5               [11] 1269 	push	bc
      000637 CDr00r00         [17] 1270 	call	_multiply
      00063A C1               [10] 1271 	pop	bc
      00063B DD 73 FC         [19] 1272 	ld	-4 (ix), e
      00063E DD 72 FD         [19] 1273 	ld	-3 (ix), d
                                   1274 ;vector.c:197: vector_access(v, index + 1),
      000641 E1               [10] 1275 	pop	hl
      000642 D1               [10] 1276 	pop	de
      000643 D5               [11] 1277 	push	de
      000644 E5               [11] 1278 	push	hl
      000645 13               [ 6] 1279 	inc	de
      000646 C5               [11] 1280 	push	bc
      000647 69               [ 4] 1281 	ld	l, c
                                   1282 ;	spillPairReg hl
                                   1283 ;	spillPairReg hl
      000648 60               [ 4] 1284 	ld	h, b
                                   1285 ;	spillPairReg hl
                                   1286 ;	spillPairReg hl
      000649 CDrDCr04         [17] 1287 	call	_vector_access
      00064C EB               [ 4] 1288 	ex	de, hl
      00064D C1               [10] 1289 	pop	bc
                                   1290 ;vector.c:196: copy(vector_access(v, index),
      00064E E5               [11] 1291 	push	hl
      00064F C5               [11] 1292 	push	bc
      000650 DD 5E FE         [19] 1293 	ld	e, -2 (ix)
      000653 DD 56 FF         [19] 1294 	ld	d, -1 (ix)
      000656 69               [ 4] 1295 	ld	l, c
                                   1296 ;	spillPairReg hl
                                   1297 ;	spillPairReg hl
      000657 60               [ 4] 1298 	ld	h, b
                                   1299 ;	spillPairReg hl
                                   1300 ;	spillPairReg hl
      000658 CDrDCr04         [17] 1301 	call	_vector_access
      00065B D5               [11] 1302 	push	de
      00065C FD E1            [14] 1303 	pop	iy
      00065E C1               [10] 1304 	pop	bc
      00065F E1               [10] 1305 	pop	hl
      000660 C5               [11] 1306 	push	bc
      000661 DD 5E FC         [19] 1307 	ld	e, -4 (ix)
      000664 DD 56 FD         [19] 1308 	ld	d, -3 (ix)
      000667 EB               [ 4] 1309 	ex	de, hl
      000668 E5               [11] 1310 	push	hl
      000669 FD E5            [15] 1311 	push	iy
      00066B E1               [10] 1312 	pop	hl
      00066C CDr00r00         [17] 1313 	call	_copy
      00066F C1               [10] 1314 	pop	bc
      000670                       1315 00106$:
                                   1316 ;vector.c:200: vector_resize(v, v->size - 1);
      000670 E1               [10] 1317 	pop	hl
      000671 E5               [11] 1318 	push	hl
      000672 5E               [ 7] 1319 	ld	e, (hl)
      000673 23               [ 6] 1320 	inc	hl
      000674 56               [ 7] 1321 	ld	d, (hl)
      000675 1B               [ 6] 1322 	dec	de
      000676 69               [ 4] 1323 	ld	l, c
                                   1324 ;	spillPairReg hl
                                   1325 ;	spillPairReg hl
      000677 60               [ 4] 1326 	ld	h, b
                                   1327 ;	spillPairReg hl
                                   1328 ;	spillPairReg hl
      000678 CDr25r02         [17] 1329 	call	_vector_resize
                                   1330 ;vector.c:201: return 1;
      00067B 3E 01            [ 7] 1331 	ld	a, #0x01
      00067D                       1332 00107$:
                                   1333 ;vector.c:202: }
      00067D DD F9            [10] 1334 	ld	sp, ix
      00067F DD E1            [14] 1335 	pop	ix
      000681 C9               [10] 1336 	ret
                                   1337 ;vector.c:204: byte		vector_erase_range(Vector* v, word begin, word end)
                                   1338 ;	---------------------------------
                                   1339 ; Function vector_erase_range
                                   1340 ; ---------------------------------
      000682                       1341 _vector_erase_range::
      000682 DD E5            [15] 1342 	push	ix
      000684 DD 21 00 00      [14] 1343 	ld	ix,#0
      000688 DD 39            [15] 1344 	add	ix,sp
      00068A FD 21 F6 FF      [14] 1345 	ld	iy, #-10
      00068E FD 39            [15] 1346 	add	iy, sp
      000690 FD F9            [10] 1347 	ld	sp, iy
      000692 DD 75 FE         [19] 1348 	ld	-2 (ix), l
      000695 DD 74 FF         [19] 1349 	ld	-1 (ix), h
      000698 DD 73 FC         [19] 1350 	ld	-4 (ix), e
      00069B DD 72 FD         [19] 1351 	ld	-3 (ix), d
                                   1352 ;vector.c:206: if (!v) return 0;
      00069E DD 7E FF         [19] 1353 	ld	a, -1 (ix)
      0006A1 DD B6 FE         [19] 1354 	or	a, -2 (ix)
      0006A4 20 04            [12] 1355 	jr	NZ, 00102$
      0006A6 AF               [ 4] 1356 	xor	a, a
      0006A7 C3r7Fr07         [10] 1357 	jp	00109$
      0006AA                       1358 00102$:
                                   1359 ;vector.c:207: if (begin >= v->size || end>v->size || begin>=end) return 0;
      0006AA DD 7E FE         [19] 1360 	ld	a, -2 (ix)
      0006AD C6 04            [ 7] 1361 	add	a, #0x04
      0006AF DD 77 FA         [19] 1362 	ld	-6 (ix), a
      0006B2 DD 7E FF         [19] 1363 	ld	a, -1 (ix)
      0006B5 CE 00            [ 7] 1364 	adc	a, #0x00
      0006B7 DD 77 FB         [19] 1365 	ld	-5 (ix), a
      0006BA DD 6E FA         [19] 1366 	ld	l, -6 (ix)
      0006BD DD 66 FB         [19] 1367 	ld	h, -5 (ix)
      0006C0 4E               [ 7] 1368 	ld	c, (hl)
      0006C1 23               [ 6] 1369 	inc	hl
      0006C2 46               [ 7] 1370 	ld	b, (hl)
      0006C3 DD 7E FC         [19] 1371 	ld	a, -4 (ix)
      0006C6 91               [ 4] 1372 	sub	a, c
      0006C7 DD 7E FD         [19] 1373 	ld	a, -3 (ix)
      0006CA 98               [ 4] 1374 	sbc	a, b
      0006CB 30 18            [12] 1375 	jr	NC, 00103$
      0006CD 79               [ 4] 1376 	ld	a, c
      0006CE DD 96 04         [19] 1377 	sub	a, 4 (ix)
      0006D1 78               [ 4] 1378 	ld	a, b
      0006D2 DD 9E 05         [19] 1379 	sbc	a, 5 (ix)
      0006D5 38 0E            [12] 1380 	jr	C, 00103$
      0006D7 DD 7E FC         [19] 1381 	ld	a, -4 (ix)
      0006DA DD 96 04         [19] 1382 	sub	a, 4 (ix)
      0006DD DD 7E FD         [19] 1383 	ld	a, -3 (ix)
      0006E0 DD 9E 05         [19] 1384 	sbc	a, 5 (ix)
      0006E3 38 04            [12] 1385 	jr	C, 00104$
      0006E5                       1386 00103$:
      0006E5 AF               [ 4] 1387 	xor	a, a
      0006E6 C3r7Fr07         [10] 1388 	jp	00109$
      0006E9                       1389 00104$:
                                   1390 ;vector.c:208: word n=end-begin;
      0006E9 DD 7E 04         [19] 1391 	ld	a, 4 (ix)
      0006EC DD 96 FC         [19] 1392 	sub	a, -4 (ix)
      0006EF 5F               [ 4] 1393 	ld	e, a
      0006F0 DD 7E 05         [19] 1394 	ld	a, 5 (ix)
      0006F3 DD 9E FD         [19] 1395 	sbc	a, -3 (ix)
      0006F6 DD 73 F6         [19] 1396 	ld	-10 (ix), e
      0006F9 DD 77 F7         [19] 1397 	ld	-9 (ix), a
                                   1398 ;vector.c:209: if (end < v->size)
      0006FC DD 7E 04         [19] 1399 	ld	a, 4 (ix)
      0006FF 91               [ 4] 1400 	sub	a, c
      000700 DD 7E 05         [19] 1401 	ld	a, 5 (ix)
      000703 98               [ 4] 1402 	sbc	a, b
      000704 30 47            [12] 1403 	jr	NC, 00108$
                                   1404 ;vector.c:213: multiply(v->element_size, (v->size - end)));
      000706 79               [ 4] 1405 	ld	a, c
      000707 DD 96 04         [19] 1406 	sub	a, 4 (ix)
      00070A 5F               [ 4] 1407 	ld	e, a
      00070B 78               [ 4] 1408 	ld	a, b
      00070C DD 9E 05         [19] 1409 	sbc	a, 5 (ix)
      00070F 57               [ 4] 1410 	ld	d, a
      000710 DD 6E FE         [19] 1411 	ld	l, -2 (ix)
      000713 DD 66 FF         [19] 1412 	ld	h, -1 (ix)
      000716 7E               [ 7] 1413 	ld	a, (hl)
      000717 23               [ 6] 1414 	inc	hl
      000718 66               [ 7] 1415 	ld	h, (hl)
                                   1416 ;	spillPairReg hl
      000719 6F               [ 4] 1417 	ld	l, a
                                   1418 ;	spillPairReg hl
                                   1419 ;	spillPairReg hl
      00071A CDr00r00         [17] 1420 	call	_multiply
                                   1421 ;vector.c:212: vector_access(v, end), 
      00071D D5               [11] 1422 	push	de
      00071E DD 5E 04         [19] 1423 	ld	e, 4 (ix)
      000721 DD 56 05         [19] 1424 	ld	d, 5 (ix)
      000724 DD 6E FE         [19] 1425 	ld	l, -2 (ix)
                                   1426 ;	spillPairReg hl
                                   1427 ;	spillPairReg hl
      000727 DD 66 FF         [19] 1428 	ld	h, -1 (ix)
                                   1429 ;	spillPairReg hl
                                   1430 ;	spillPairReg hl
      00072A CDrDCr04         [17] 1431 	call	_vector_access
      00072D EB               [ 4] 1432 	ex	de, hl
      00072E C1               [10] 1433 	pop	bc
                                   1434 ;vector.c:211: copy(vector_access(v, begin), 
      00072F E5               [11] 1435 	push	hl
      000730 C5               [11] 1436 	push	bc
      000731 DD 5E FC         [19] 1437 	ld	e, -4 (ix)
      000734 DD 56 FD         [19] 1438 	ld	d, -3 (ix)
      000737 DD 6E FE         [19] 1439 	ld	l, -2 (ix)
                                   1440 ;	spillPairReg hl
                                   1441 ;	spillPairReg hl
      00073A DD 66 FF         [19] 1442 	ld	h, -1 (ix)
                                   1443 ;	spillPairReg hl
                                   1444 ;	spillPairReg hl
      00073D CDrDCr04         [17] 1445 	call	_vector_access
      000740 D5               [11] 1446 	push	de
      000741 FD E1            [14] 1447 	pop	iy
      000743 C1               [10] 1448 	pop	bc
      000744 E1               [10] 1449 	pop	hl
      000745 C5               [11] 1450 	push	bc
      000746 FD E5            [15] 1451 	push	iy
      000748 EB               [ 4] 1452 	ex	de, hl
      000749 E1               [10] 1453 	pop	hl
      00074A CDr00r00         [17] 1454 	call	_copy
      00074D                       1455 00108$:
                                   1456 ;vector.c:215: vector_resize(v, v->size-n);
      00074D DD 6E FA         [19] 1457 	ld	l, -6 (ix)
      000750 DD 66 FB         [19] 1458 	ld	h, -5 (ix)
      000753 7E               [ 7] 1459 	ld	a, (hl)
      000754 DD 77 F8         [19] 1460 	ld	-8 (ix), a
      000757 23               [ 6] 1461 	inc	hl
      000758 7E               [ 7] 1462 	ld	a, (hl)
      000759 DD 77 F9         [19] 1463 	ld	-7 (ix), a
      00075C DD 7E F8         [19] 1464 	ld	a, -8 (ix)
      00075F DD 96 F6         [19] 1465 	sub	a, -10 (ix)
      000762 DD 77 FA         [19] 1466 	ld	-6 (ix), a
      000765 DD 7E F9         [19] 1467 	ld	a, -7 (ix)
      000768 DD 9E F7         [19] 1468 	sbc	a, -9 (ix)
      00076B DD 77 FB         [19] 1469 	ld	-5 (ix), a
      00076E DD 5E FA         [19] 1470 	ld	e, -6 (ix)
      000771 DD 56 FB         [19] 1471 	ld	d, -5 (ix)
      000774 DD 6E FE         [19] 1472 	ld	l, -2 (ix)
                                   1473 ;	spillPairReg hl
                                   1474 ;	spillPairReg hl
      000777 DD 66 FF         [19] 1475 	ld	h, -1 (ix)
                                   1476 ;	spillPairReg hl
                                   1477 ;	spillPairReg hl
      00077A CDr25r02         [17] 1478 	call	_vector_resize
                                   1479 ;vector.c:216: return 1;
      00077D 3E 01            [ 7] 1480 	ld	a, #0x01
      00077F                       1481 00109$:
                                   1482 ;vector.c:217: }
      00077F DD F9            [10] 1483 	ld	sp, ix
      000781 DD E1            [14] 1484 	pop	ix
      000783 E1               [10] 1485 	pop	hl
      000784 C1               [10] 1486 	pop	bc
      000785 E9               [ 4] 1487 	jp	(hl)
                                   1488 ;vector.c:219: word		vector_capacity(Vector* v)
                                   1489 ;	---------------------------------
                                   1490 ; Function vector_capacity
                                   1491 ; ---------------------------------
      000786                       1492 _vector_capacity::
                                   1493 ;vector.c:221: if (!v) return 0;
      000786 7C               [ 4] 1494 	ld	a, h
      000787 B5               [ 4] 1495 	or	a, l
      000788 20 04            [12] 1496 	jr	NZ, 00102$
      00078A 11 00 00         [10] 1497 	ld	de, #0x0000
      00078D C9               [10] 1498 	ret
      00078E                       1499 00102$:
                                   1500 ;vector.c:222: return v->capacity;
      00078E 23               [ 6] 1501 	inc	hl
      00078F 23               [ 6] 1502 	inc	hl
      000790 5E               [ 7] 1503 	ld	e, (hl)
      000791 23               [ 6] 1504 	inc	hl
      000792 56               [ 7] 1505 	ld	d, (hl)
                                   1506 ;vector.c:223: }
      000793 C9               [10] 1507 	ret
                                   1508 ;vector.c:225: word		vector_element_size(Vector* v)
                                   1509 ;	---------------------------------
                                   1510 ; Function vector_element_size
                                   1511 ; ---------------------------------
      000794                       1512 _vector_element_size::
                                   1513 ;vector.c:227: if (!v) return 0;
      000794 7C               [ 4] 1514 	ld	a, h
      000795 B5               [ 4] 1515 	or	a, l
      000796 20 04            [12] 1516 	jr	NZ, 00102$
      000798 11 00 00         [10] 1517 	ld	de, #0x0000
      00079B C9               [10] 1518 	ret
      00079C                       1519 00102$:
                                   1520 ;vector.c:228: return v->element_size;
      00079C 5E               [ 7] 1521 	ld	e, (hl)
      00079D 23               [ 6] 1522 	inc	hl
      00079E 56               [ 7] 1523 	ld	d, (hl)
                                   1524 ;vector.c:229: }
      00079F C9               [10] 1525 	ret
                                   1526 	.area _CODE
                                   1527 	.area _INITIALIZER
                                   1528 	.area _CABS (ABS)
