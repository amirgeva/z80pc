                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module tslmain
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _event_loop
                                     13 	.globl _clipboard_paste
                                     14 	.globl _clipboard_cut
                                     15 	.globl _clipboard_copy
                                     16 	.globl _move_y
                                     17 	.globl _getkey
                                     18 	.globl _add_char
                                     19 	.globl _add_enter
                                     20 	.globl _backspace
                                     21 	.globl _do_delete
                                     22 	.globl _delete_selection
                                     23 	.globl _delete_single_line_selection
                                     24 	.globl _join_prev_line
                                     25 	.globl _is_move_key
                                     26 	.globl _move_x_cursor
                                     27 	.globl _visual_to_logical
                                     28 	.globl _draw_screen
                                     29 	.globl _draw_cursor_position
                                     30 	.globl _draw_number
                                     31 	.globl _decimal_string
                                     32 	.globl _place_cursor
                                     33 	.globl _calculate_new_offset
                                     34 	.globl _redraw_all
                                     35 	.globl _eod_cursor
                                     36 	.globl _cursor_in_view
                                     37 	.globl _visual_cursor
                                     38 	.globl _draw_line
                                     39 	.globl _draw_frame
                                     40 	.globl _draw_brackets
                                     41 	.globl _draw_status
                                     42 	.globl _draw_menu
                                     43 	.globl _draw_status_item
                                     44 	.globl _draw_menu_item
                                     45 	.globl _draw_str
                                     46 	.globl _load_file
                                     47 	.globl _append_line
                                     48 	.globl _get_line
                                     49 	.globl _round_up
                                     50 	.globl _clear
                                     51 	.globl _extend_select
                                     52 	.globl _start_select
                                     53 	.globl _clear_select
                                     54 	.globl _redraw_range
                                     55 	.globl _redraw_from
                                     56 	.globl _redraw_line
                                     57 	.globl _valid_select
                                     58 	.globl _cursor_lt
                                     59 	.globl _logical_to_visual
                                     60 	.globl _visual_mapping
                                     61 	.globl _in_selection
                                     62 	.globl _init_state
                                     63 	.globl _alloc_init
                                     64 	.globl _div_mod
                                     65 	.globl _close_file
                                     66 	.globl _read_file
                                     67 	.globl _open_file
                                     68 	.globl _max
                                     69 	.globl _min
                                     70 	.globl _vector_erase_range
                                     71 	.globl _vector_erase
                                     72 	.globl _vector_access
                                     73 	.globl _vector_get
                                     74 	.globl _vector_set
                                     75 	.globl _vector_insert
                                     76 	.globl _vector_push
                                     77 	.globl _vector_reserve
                                     78 	.globl _vector_resize
                                     79 	.globl _vector_clear
                                     80 	.globl _vector_size
                                     81 	.globl _vector_shut
                                     82 	.globl _vector_new
                                     83 	.globl _hal_getkey
                                     84 	.globl _hal_blink
                                     85 	.globl _hal_color
                                     86 	.globl _hal_rept_char
                                     87 	.globl _hal_draw_char
                                     88 	.globl _hal_move
                                     89 	.globl _hal_shutdown
                                     90 	.globl _hal_init
                                     91 	.globl _insert
                                     92 	.globl _bg
                                     93 	.globl _fg
                                     94 	.globl _redraw_stop
                                     95 	.globl _redraw_start
                                     96 	.globl _select_stop
                                     97 	.globl _select_start
                                     98 	.globl _offset
                                     99 	.globl _cursor
                                    100 	.globl _line_mapping
                                    101 	.globl _clipboard
                                    102 	.globl _document
                                    103 	.globl _VERT
                                    104 	.globl _HORZ
                                    105 	.globl _BR
                                    106 	.globl _BL
                                    107 	.globl _TR
                                    108 	.globl _TL
                                    109 ;--------------------------------------------------------
                                    110 ; special function registers
                                    111 ;--------------------------------------------------------
                                    112 ;--------------------------------------------------------
                                    113 ; ram data
                                    114 ;--------------------------------------------------------
                                    115 	.area _DATA
      000000                        116 _document::
      000000                        117 	.ds 2
      000002                        118 _clipboard::
      000002                        119 	.ds 2
      000004                        120 _line_mapping::
      000004                        121 	.ds 320
      000144                        122 _cursor::
      000144                        123 	.ds 4
      000148                        124 _offset::
      000148                        125 	.ds 4
      00014C                        126 _select_start::
      00014C                        127 	.ds 4
      000150                        128 _select_stop::
      000150                        129 	.ds 4
      000154                        130 _redraw_start::
      000154                        131 	.ds 2
      000156                        132 _redraw_stop::
      000156                        133 	.ds 2
                                    134 ;--------------------------------------------------------
                                    135 ; ram data
                                    136 ;--------------------------------------------------------
                                    137 	.area _INITIALIZED
      000000                        138 _fg::
      000000                        139 	.ds 1
      000001                        140 _bg::
      000001                        141 	.ds 1
      000002                        142 _insert::
      000002                        143 	.ds 1
                                    144 ;--------------------------------------------------------
                                    145 ; absolute external ram data
                                    146 ;--------------------------------------------------------
                                    147 	.area _DABS (ABS)
                                    148 ;--------------------------------------------------------
                                    149 ; global & static initialisations
                                    150 ;--------------------------------------------------------
                                    151 	.area _HOME
                                    152 	.area _GSINIT
                                    153 	.area _GSFINAL
                                    154 	.area _GSINIT
                                    155 ;--------------------------------------------------------
                                    156 ; Home
                                    157 ;--------------------------------------------------------
                                    158 	.area _HOME
                                    159 	.area _HOME
                                    160 ;--------------------------------------------------------
                                    161 ; code
                                    162 ;--------------------------------------------------------
                                    163 	.area _CODE
                                    164 ;tslmain.c:44: void init_state()
                                    165 ;	---------------------------------
                                    166 ; Function init_state
                                    167 ; ---------------------------------
      000000                        168 _init_state::
                                    169 ;tslmain.c:46: fg = 0xFF;
      000000 21r00r00         [10]  170 	ld	hl, #_fg
      000003 36 FF            [10]  171 	ld	(hl), #0xff
                                    172 ;tslmain.c:47: bg = 0;
      000005 21r01r00         [10]  173 	ld	hl, #_bg
      000008 36 00            [10]  174 	ld	(hl), #0x00
                                    175 ;tslmain.c:48: redraw_start = 0;
      00000A 21 00 00         [10]  176 	ld	hl, #0x0000
      00000D 22r54r01         [16]  177 	ld	(_redraw_start), hl
                                    178 ;tslmain.c:49: redraw_stop = 0x7000;
      000010 26 70            [ 7]  179 	ld	h, #0x70
      000012 22r56r01         [16]  180 	ld	(_redraw_stop), hl
                                    181 ;tslmain.c:50: insert = 1;
      000015 FD 21r02r00      [14]  182 	ld	iy, #_insert
      000019 FD 36 00 01      [19]  183 	ld	0 (iy), #0x01
                                    184 ;tslmain.c:51: document = 0;
      00001D 65               [ 4]  185 	ld	h, l
      00001E 22r00r00         [16]  186 	ld	(_document), hl
                                    187 ;tslmain.c:52: cursor.x = 0;
      000021 22r44r01         [16]  188 	ld	(_cursor), hl
                                    189 ;tslmain.c:53: cursor.y = 0;
      000024 22r46r01         [16]  190 	ld	((_cursor + 2)), hl
                                    191 ;tslmain.c:54: offset.x = 0;
      000027 22r48r01         [16]  192 	ld	(_offset), hl
                                    193 ;tslmain.c:55: offset.y = 0;
      00002A 22r4Ar01         [16]  194 	ld	((_offset + 2)), hl
                                    195 ;tslmain.c:56: select_start.x = 0;
      00002D 22r4Cr01         [16]  196 	ld	(_select_start), hl
                                    197 ;tslmain.c:57: select_start.y = 0;
      000030 22r4Er01         [16]  198 	ld	((_select_start + 2)), hl
                                    199 ;tslmain.c:58: select_stop.x = 0;
      000033 22r50r01         [16]  200 	ld	(_select_stop), hl
                                    201 ;tslmain.c:59: select_stop.y = 0;
      000036 22r52r01         [16]  202 	ld	((_select_stop + 2)), hl
                                    203 ;tslmain.c:60: }
      000039 C9               [10]  204 	ret
      00003A                        205 _TL:
      00003A C9                     206 	.db #0xc9	; 201
      00003B                        207 _TR:
      00003B BB                     208 	.db #0xbb	; 187
      00003C                        209 _BL:
      00003C C8                     210 	.db #0xc8	; 200
      00003D                        211 _BR:
      00003D BC                     212 	.db #0xbc	; 188
      00003E                        213 _HORZ:
      00003E CD                     214 	.db #0xcd	; 205
      00003F                        215 _VERT:
      00003F BA                     216 	.db #0xba	; 186
                                    217 ;tslmain.c:62: byte in_selection(short x, short y)
                                    218 ;	---------------------------------
                                    219 ; Function in_selection
                                    220 ; ---------------------------------
      000040                        221 _in_selection::
      000040 4D               [ 4]  222 	ld	c, l
      000041 44               [ 4]  223 	ld	b, h
                                    224 ;tslmain.c:64: if (y > select_start.y || (y == select_start.y && x >= select_start.x))
      000042 2Ar4Er01         [16]  225 	ld	hl, (#_select_start + 2)
      000045 7D               [ 4]  226 	ld	a, l
      000046 93               [ 4]  227 	sub	a, e
      000047 7C               [ 4]  228 	ld	a, h
      000048 9A               [ 4]  229 	sbc	a, d
      000049 E2r4Er00         [10]  230 	jp	PO, 00131$
      00004C EE 80            [ 7]  231 	xor	a, #0x80
      00004E                        232 00131$:
      00004E FAr65r00         [10]  233 	jp	M, 00105$
      000051 BF               [ 4]  234 	cp	a, a
      000052 ED 52            [15]  235 	sbc	hl, de
      000054 20 35            [12]  236 	jr	NZ, 00106$
      000056 2Ar4Cr01         [16]  237 	ld	hl, (#_select_start + 0)
      000059 79               [ 4]  238 	ld	a, c
      00005A 95               [ 4]  239 	sub	a, l
      00005B 78               [ 4]  240 	ld	a, b
      00005C 9C               [ 4]  241 	sbc	a, h
      00005D E2r62r00         [10]  242 	jp	PO, 00134$
      000060 EE 80            [ 7]  243 	xor	a, #0x80
      000062                        244 00134$:
      000062 FAr8Br00         [10]  245 	jp	M, 00106$
      000065                        246 00105$:
                                    247 ;tslmain.c:66: if (y < select_stop.y || (y == select_stop.y && x < select_stop.x))
      000065 2Ar52r01         [16]  248 	ld	hl, (#_select_stop + 2)
      000068 7B               [ 4]  249 	ld	a, e
      000069 95               [ 4]  250 	sub	a, l
      00006A 7A               [ 4]  251 	ld	a, d
      00006B 9C               [ 4]  252 	sbc	a, h
      00006C E2r71r00         [10]  253 	jp	PO, 00135$
      00006F EE 80            [ 7]  254 	xor	a, #0x80
      000071                        255 00135$:
      000071 FAr88r00         [10]  256 	jp	M, 00101$
      000074 BF               [ 4]  257 	cp	a, a
      000075 ED 52            [15]  258 	sbc	hl, de
      000077 20 12            [12]  259 	jr	NZ, 00106$
      000079 2Ar50r01         [16]  260 	ld	hl, (#_select_stop + 0)
      00007C 79               [ 4]  261 	ld	a, c
      00007D 95               [ 4]  262 	sub	a, l
      00007E 78               [ 4]  263 	ld	a, b
      00007F 9C               [ 4]  264 	sbc	a, h
      000080 E2r85r00         [10]  265 	jp	PO, 00138$
      000083 EE 80            [ 7]  266 	xor	a, #0x80
      000085                        267 00138$:
      000085 F2r8Br00         [10]  268 	jp	P, 00106$
      000088                        269 00101$:
                                    270 ;tslmain.c:68: return 1;
      000088 3E 01            [ 7]  271 	ld	a, #0x01
      00008A C9               [10]  272 	ret
      00008B                        273 00106$:
                                    274 ;tslmain.c:71: return 0;
      00008B AF               [ 4]  275 	xor	a, a
                                    276 ;tslmain.c:72: }
      00008C C9               [10]  277 	ret
                                    278 ;tslmain.c:74: byte visual_mapping(Vector* line, Mapping* mapping, short start, short stop)
                                    279 ;	---------------------------------
                                    280 ; Function visual_mapping
                                    281 ; ---------------------------------
      00008D                        282 _visual_mapping::
      00008D DD E5            [15]  283 	push	ix
      00008F DD 21 00 00      [14]  284 	ld	ix,#0
      000093 DD 39            [15]  285 	add	ix,sp
      000095 FD 21 F3 FF      [14]  286 	ld	iy, #-13
      000099 FD 39            [15]  287 	add	iy, sp
      00009B FD F9            [10]  288 	ld	sp, iy
      00009D DD 73 F7         [19]  289 	ld	-9 (ix), e
      0000A0 DD 72 F8         [19]  290 	ld	-8 (ix), d
                                    291 ;tslmain.c:76: short n = vector_size(line);
      0000A3 E5               [11]  292 	push	hl
      0000A4 CDr00r00         [17]  293 	call	_vector_size
      0000A7 E1               [10]  294 	pop	hl
      0000A8 33               [ 6]  295 	inc	sp
      0000A9 33               [ 6]  296 	inc	sp
      0000AA D5               [11]  297 	push	de
                                    298 ;tslmain.c:77: const byte* data = vector_access(line, 0);
      0000AB 11 00 00         [10]  299 	ld	de, #0x0000
      0000AE CDr00r00         [17]  300 	call	_vector_access
      0000B1 DD 73 F5         [19]  301 	ld	-11 (ix), e
      0000B4 DD 72 F6         [19]  302 	ld	-10 (ix), d
                                    303 ;tslmain.c:78: short visual = -offset.x;
      0000B7 2Ar48r01         [16]  304 	ld	hl, (#_offset + 0)
      0000BA AF               [ 4]  305 	xor	a, a
      0000BB 95               [ 4]  306 	sub	a, l
      0000BC 4F               [ 4]  307 	ld	c, a
      0000BD 9F               [ 4]  308 	sbc	a, a
      0000BE 94               [ 4]  309 	sub	a, h
      0000BF DD 71 F9         [19]  310 	ld	-7 (ix), c
      0000C2 DD 77 FA         [19]  311 	ld	-6 (ix), a
                                    312 ;tslmain.c:79: short x = 0;
      0000C5 AF               [ 4]  313 	xor	a, a
      0000C6 DD 77 FB         [19]  314 	ld	-5 (ix), a
      0000C9 DD 77 FC         [19]  315 	ld	-4 (ix), a
                                    316 ;tslmain.c:82: for (short logical = 0; logical < n; ++logical)
      0000CC DD 36 FD 00      [19]  317 	ld	-3 (ix), #0x00
      0000D0 AF               [ 4]  318 	xor	a, a
      0000D1 DD 77 FE         [19]  319 	ld	-2 (ix), a
      0000D4 DD 77 FF         [19]  320 	ld	-1 (ix), a
      0000D7                        321 00113$:
      0000D7 DD 7E FE         [19]  322 	ld	a, -2 (ix)
      0000DA DD 96 F3         [19]  323 	sub	a, -13 (ix)
      0000DD DD 7E FF         [19]  324 	ld	a, -1 (ix)
      0000E0 DD 9E F4         [19]  325 	sbc	a, -12 (ix)
      0000E3 E2rE8r00         [10]  326 	jp	PO, 00163$
      0000E6 EE 80            [ 7]  327 	xor	a, #0x80
      0000E8                        328 00163$:
      0000E8 F2r9Dr01         [10]  329 	jp	P, 00111$
                                    330 ;tslmain.c:84: if (visual >= 0 && visual < (W - 2) && logical >= start && logical < stop)
      0000EB DD 46 FA         [19]  331 	ld	b, -6 (ix)
      0000EE CB 78            [ 8]  332 	bit	7, b
      0000F0 20 5B            [12]  333 	jr	NZ, 00102$
      0000F2 DD 7E F9         [19]  334 	ld	a, -7 (ix)
      0000F5 D6 4E            [ 7]  335 	sub	a, #0x4e
      0000F7 DD 7E FA         [19]  336 	ld	a, -6 (ix)
      0000FA 17               [ 4]  337 	rla
      0000FB 3F               [ 4]  338 	ccf
      0000FC 1F               [ 4]  339 	rra
      0000FD DE 80            [ 7]  340 	sbc	a, #0x80
      0000FF 30 4C            [12]  341 	jr	NC, 00102$
      000101 DD 7E FE         [19]  342 	ld	a, -2 (ix)
      000104 DD 96 04         [19]  343 	sub	a, 4 (ix)
      000107 DD 7E FF         [19]  344 	ld	a, -1 (ix)
      00010A DD 9E 05         [19]  345 	sbc	a, 5 (ix)
      00010D E2r12r01         [10]  346 	jp	PO, 00164$
      000110 EE 80            [ 7]  347 	xor	a, #0x80
      000112                        348 00164$:
      000112 FAr4Dr01         [10]  349 	jp	M, 00102$
      000115 DD 7E FE         [19]  350 	ld	a, -2 (ix)
      000118 DD 96 06         [19]  351 	sub	a, 6 (ix)
      00011B DD 7E FF         [19]  352 	ld	a, -1 (ix)
      00011E DD 9E 07         [19]  353 	sbc	a, 7 (ix)
      000121 E2r26r01         [10]  354 	jp	PO, 00165$
      000124 EE 80            [ 7]  355 	xor	a, #0x80
      000126                        356 00165$:
      000126 F2r4Dr01         [10]  357 	jp	P, 00102$
                                    358 ;tslmain.c:86: mapping[index].logical = logical;
      000129 DD 6E FD         [19]  359 	ld	l, -3 (ix)
                                    360 ;	spillPairReg hl
                                    361 ;	spillPairReg hl
      00012C 26 00            [ 7]  362 	ld	h, #0x00
                                    363 ;	spillPairReg hl
                                    364 ;	spillPairReg hl
      00012E 29               [11]  365 	add	hl, hl
      00012F 29               [11]  366 	add	hl, hl
      000130 DD 5E F7         [19]  367 	ld	e, -9 (ix)
      000133 DD 56 F8         [19]  368 	ld	d, -8 (ix)
      000136 19               [11]  369 	add	hl, de
      000137 DD 7E FE         [19]  370 	ld	a, -2 (ix)
      00013A 77               [ 7]  371 	ld	(hl), a
      00013B 23               [ 6]  372 	inc	hl
      00013C DD 7E FF         [19]  373 	ld	a, -1 (ix)
      00013F 77               [ 7]  374 	ld	(hl), a
                                    375 ;tslmain.c:87: mapping[index].visual = visual;
      000140 23               [ 6]  376 	inc	hl
      000141 DD 7E F9         [19]  377 	ld	a, -7 (ix)
      000144 77               [ 7]  378 	ld	(hl), a
      000145 23               [ 6]  379 	inc	hl
      000146 DD 7E FA         [19]  380 	ld	a, -6 (ix)
      000149 77               [ 7]  381 	ld	(hl), a
                                    382 ;tslmain.c:88: index++;
      00014A DD 34 FD         [23]  383 	inc	-3 (ix)
      00014D                        384 00102$:
                                    385 ;tslmain.c:90: ++visual;
      00014D DD 34 F9         [23]  386 	inc	-7 (ix)
      000150 20 03            [12]  387 	jr	NZ, 00166$
      000152 DD 34 FA         [23]  388 	inc	-6 (ix)
      000155                        389 00166$:
                                    390 ;tslmain.c:91: ++x;
      000155 DD 34 FB         [23]  391 	inc	-5 (ix)
      000158 20 03            [12]  392 	jr	NZ, 00167$
      00015A DD 34 FC         [23]  393 	inc	-4 (ix)
      00015D                        394 00167$:
                                    395 ;tslmain.c:92: if (data[logical] == 9)
      00015D DD 7E F5         [19]  396 	ld	a, -11 (ix)
      000160 DD 86 FE         [19]  397 	add	a, -2 (ix)
      000163 4F               [ 4]  398 	ld	c, a
      000164 DD 7E F6         [19]  399 	ld	a, -10 (ix)
      000167 DD 8E FF         [19]  400 	adc	a, -1 (ix)
      00016A 47               [ 4]  401 	ld	b, a
      00016B 0A               [ 7]  402 	ld	a, (bc)
      00016C D6 09            [ 7]  403 	sub	a, #0x09
      00016E 20 21            [12]  404 	jr	NZ, 00114$
                                    405 ;tslmain.c:94: while ((x & 3) != 0)
      000170 DD 4E F9         [19]  406 	ld	c, -7 (ix)
      000173 DD 46 FA         [19]  407 	ld	b, -6 (ix)
      000176 DD 5E FB         [19]  408 	ld	e, -5 (ix)
      000179 DD 56 FC         [19]  409 	ld	d, -4 (ix)
      00017C                        410 00106$:
      00017C 7B               [ 4]  411 	ld	a, e
      00017D E6 03            [ 7]  412 	and	a, #0x03
      00017F 28 04            [12]  413 	jr	Z, 00125$
                                    414 ;tslmain.c:96: ++visual;
      000181 03               [ 6]  415 	inc	bc
                                    416 ;tslmain.c:97: ++x;
      000182 13               [ 6]  417 	inc	de
      000183 18 F7            [12]  418 	jr	00106$
      000185                        419 00125$:
      000185 DD 71 F9         [19]  420 	ld	-7 (ix), c
      000188 DD 70 FA         [19]  421 	ld	-6 (ix), b
      00018B DD 73 FB         [19]  422 	ld	-5 (ix), e
      00018E DD 72 FC         [19]  423 	ld	-4 (ix), d
      000191                        424 00114$:
                                    425 ;tslmain.c:82: for (short logical = 0; logical < n; ++logical)
      000191 DD 34 FE         [23]  426 	inc	-2 (ix)
      000194 C2rD7r00         [10]  427 	jp	NZ,00113$
      000197 DD 34 FF         [23]  428 	inc	-1 (ix)
      00019A C3rD7r00         [10]  429 	jp	00113$
      00019D                        430 00111$:
                                    431 ;tslmain.c:101: return index;
      00019D DD 7E FD         [19]  432 	ld	a, -3 (ix)
                                    433 ;tslmain.c:102: }
      0001A0 DD F9            [10]  434 	ld	sp, ix
      0001A2 DD E1            [14]  435 	pop	ix
      0001A4 E1               [10]  436 	pop	hl
      0001A5 C1               [10]  437 	pop	bc
      0001A6 C1               [10]  438 	pop	bc
      0001A7 E9               [ 4]  439 	jp	(hl)
                                    440 ;tslmain.c:104: short logical_to_visual(Vector* line, word logical)
                                    441 ;	---------------------------------
                                    442 ; Function logical_to_visual
                                    443 ; ---------------------------------
      0001A8                        444 _logical_to_visual::
      0001A8 DD E5            [15]  445 	push	ix
      0001AA DD 21 00 00      [14]  446 	ld	ix,#0
      0001AE DD 39            [15]  447 	add	ix,sp
      0001B0 FD 21 F8 FF      [14]  448 	ld	iy, #-8
      0001B4 FD 39            [15]  449 	add	iy, sp
      0001B6 FD F9            [10]  450 	ld	sp, iy
      0001B8 4B               [ 4]  451 	ld	c, e
      0001B9 42               [ 4]  452 	ld	b, d
                                    453 ;tslmain.c:106: word n = min(logical, vector_size(line));
      0001BA E5               [11]  454 	push	hl
      0001BB C5               [11]  455 	push	bc
      0001BC CDr00r00         [17]  456 	call	_vector_size
                                    457 ;	spillPairReg hl
                                    458 ;	spillPairReg hl
      0001BF E1               [10]  459 	pop	hl
                                    460 ;	spillPairReg hl
                                    461 ;	spillPairReg hl
      0001C0 CDr00r00         [17]  462 	call	_min
      0001C3 E1               [10]  463 	pop	hl
      0001C4 33               [ 6]  464 	inc	sp
      0001C5 33               [ 6]  465 	inc	sp
      0001C6 D5               [11]  466 	push	de
                                    467 ;tslmain.c:107: const byte* data = vector_access(line, 0);
      0001C7 11 00 00         [10]  468 	ld	de, #0x0000
      0001CA CDr00r00         [17]  469 	call	_vector_access
      0001CD DD 73 FA         [19]  470 	ld	-6 (ix), e
      0001D0 DD 72 FB         [19]  471 	ld	-5 (ix), d
                                    472 ;tslmain.c:108: short x = 0;
      0001D3 01 00 00         [10]  473 	ld	bc, #0x0000
                                    474 ;tslmain.c:109: for (word i = 0; i < n; ++i)
      0001D6 AF               [ 4]  475 	xor	a, a
      0001D7 DD 77 FC         [19]  476 	ld	-4 (ix), a
      0001DA DD 77 FD         [19]  477 	ld	-3 (ix), a
      0001DD                        478 00108$:
      0001DD DD 7E FC         [19]  479 	ld	a, -4 (ix)
      0001E0 DD 96 F8         [19]  480 	sub	a, -8 (ix)
      0001E3 DD 7E FD         [19]  481 	ld	a, -3 (ix)
      0001E6 DD 9E F9         [19]  482 	sbc	a, -7 (ix)
      0001E9 30 3B            [12]  483 	jr	NC, 00106$
                                    484 ;tslmain.c:111: ++x;
      0001EB 03               [ 6]  485 	inc	bc
                                    486 ;tslmain.c:112: if (data[i] == 9)
      0001EC DD 7E FA         [19]  487 	ld	a, -6 (ix)
      0001EF DD 86 FC         [19]  488 	add	a, -4 (ix)
      0001F2 5F               [ 4]  489 	ld	e, a
      0001F3 DD 7E FB         [19]  490 	ld	a, -5 (ix)
      0001F6 DD 8E FD         [19]  491 	adc	a, -3 (ix)
      0001F9 57               [ 4]  492 	ld	d, a
      0001FA 1A               [ 7]  493 	ld	a, (de)
      0001FB D6 09            [ 7]  494 	sub	a, #0x09
      0001FD 20 1D            [12]  495 	jr	NZ, 00109$
                                    496 ;tslmain.c:114: while ((x & 3) != 0) ++x;
      0001FF DD 71 FE         [19]  497 	ld	-2 (ix), c
      000202 DD 70 FF         [19]  498 	ld	-1 (ix), b
      000205                        499 00101$:
      000205 DD 7E FE         [19]  500 	ld	a, -2 (ix)
      000208 E6 03            [ 7]  501 	and	a, #0x03
      00020A 28 0A            [12]  502 	jr	Z, 00116$
      00020C DD 34 FE         [23]  503 	inc	-2 (ix)
      00020F 20 F4            [12]  504 	jr	NZ, 00101$
      000211 DD 34 FF         [23]  505 	inc	-1 (ix)
      000214 18 EF            [12]  506 	jr	00101$
      000216                        507 00116$:
      000216 DD 4E FE         [19]  508 	ld	c, -2 (ix)
      000219 DD 46 FF         [19]  509 	ld	b, -1 (ix)
      00021C                        510 00109$:
                                    511 ;tslmain.c:109: for (word i = 0; i < n; ++i)
      00021C DD 34 FC         [23]  512 	inc	-4 (ix)
      00021F 20 BC            [12]  513 	jr	NZ, 00108$
      000221 DD 34 FD         [23]  514 	inc	-3 (ix)
      000224 18 B7            [12]  515 	jr	00108$
      000226                        516 00106$:
                                    517 ;tslmain.c:117: return x - offset.x;
      000226 2Ar48r01         [16]  518 	ld	hl, (#_offset + 0)
      000229 79               [ 4]  519 	ld	a, c
      00022A 95               [ 4]  520 	sub	a, l
      00022B 5F               [ 4]  521 	ld	e, a
      00022C 78               [ 4]  522 	ld	a, b
      00022D 9C               [ 4]  523 	sbc	a, h
      00022E 57               [ 4]  524 	ld	d, a
                                    525 ;tslmain.c:118: }
      00022F DD F9            [10]  526 	ld	sp, ix
      000231 DD E1            [14]  527 	pop	ix
      000233 C9               [10]  528 	ret
                                    529 ;tslmain.c:120: byte cursor_lt(Cursor* a, Cursor* b)
                                    530 ;	---------------------------------
                                    531 ; Function cursor_lt
                                    532 ; ---------------------------------
      000234                        533 _cursor_lt::
      000234 DD E5            [15]  534 	push	ix
      000236 DD 21 00 00      [14]  535 	ld	ix,#0
      00023A DD 39            [15]  536 	add	ix,sp
      00023C F5               [11]  537 	push	af
      00023D F5               [11]  538 	push	af
      00023E DD 75 FE         [19]  539 	ld	-2 (ix), l
      000241 DD 74 FF         [19]  540 	ld	-1 (ix), h
      000244 33               [ 6]  541 	inc	sp
      000245 33               [ 6]  542 	inc	sp
      000246 E1               [10]  543 	pop	hl
      000247 E5               [11]  544 	push	hl
      000248 23               [ 6]  545 	inc	hl
      000249 23               [ 6]  546 	inc	hl
      00024A D5               [11]  547 	push	de
      00024B 4E               [ 7]  548 	ld	c, (hl)
      00024C 23               [ 6]  549 	inc	hl
      00024D 46               [ 7]  550 	ld	b, (hl)
      00024E E1               [10]  551 	pop	hl
      00024F E5               [11]  552 	push	hl
      000250 23               [ 6]  553 	inc	hl
      000251 23               [ 6]  554 	inc	hl
      000252 5E               [ 7]  555 	ld	e, (hl)
      000253 23               [ 6]  556 	inc	hl
      000254 56               [ 7]  557 	ld	d, (hl)
      000255 6B               [ 4]  558 	ld	l, e
      000256 62               [ 4]  559 	ld	h, d
      000257 BF               [ 4]  560 	cp	a, a
      000258 ED 42            [15]  561 	sbc	hl, bc
      00025A 20 1C            [12]  562 	jr	NZ, 00102$
      00025C DD 6E FE         [19]  563 	ld	l, -2 (ix)
      00025F DD 66 FF         [19]  564 	ld	h, -1 (ix)
      000262 4E               [ 7]  565 	ld	c, (hl)
      000263 23               [ 6]  566 	inc	hl
      000264 46               [ 7]  567 	ld	b, (hl)
      000265 E1               [10]  568 	pop	hl
      000266 E5               [11]  569 	push	hl
      000267 5E               [ 7]  570 	ld	e, (hl)
      000268 23               [ 6]  571 	inc	hl
      000269 56               [ 7]  572 	ld	d, (hl)
      00026A 79               [ 4]  573 	ld	a, c
      00026B 93               [ 4]  574 	sub	a, e
      00026C 78               [ 4]  575 	ld	a, b
      00026D 9A               [ 4]  576 	sbc	a, d
      00026E E2r73r02         [10]  577 	jp	PO, 00112$
      000271 EE 80            [ 7]  578 	xor	a, #0x80
      000273                        579 00112$:
      000273 07               [ 4]  580 	rlca
      000274 E6 01            [ 7]  581 	and	a,#0x01
      000276 18 0C            [12]  582 	jr	00103$
      000278                        583 00102$:
                                    584 ;tslmain.c:123: return a->y < b->y;
      000278 79               [ 4]  585 	ld	a, c
      000279 93               [ 4]  586 	sub	a, e
      00027A 78               [ 4]  587 	ld	a, b
      00027B 9A               [ 4]  588 	sbc	a, d
      00027C E2r81r02         [10]  589 	jp	PO, 00113$
      00027F EE 80            [ 7]  590 	xor	a, #0x80
      000281                        591 00113$:
      000281 07               [ 4]  592 	rlca
      000282 E6 01            [ 7]  593 	and	a,#0x01
      000284                        594 00103$:
                                    595 ;tslmain.c:124: }
      000284 DD F9            [10]  596 	ld	sp, ix
      000286 DD E1            [14]  597 	pop	ix
      000288 C9               [10]  598 	ret
                                    599 ;tslmain.c:126: byte valid_select()
                                    600 ;	---------------------------------
                                    601 ; Function valid_select
                                    602 ; ---------------------------------
      000289                        603 _valid_select::
                                    604 ;tslmain.c:128: if (select_start.y == select_stop.y) return select_start.x < select_stop.x;
      000289 ED 4Br4Er01      [20]  605 	ld	bc, (#_select_start + 2)
      00028D ED 5Br52r01      [20]  606 	ld	de, (#_select_stop + 2)
      000291 6B               [ 4]  607 	ld	l, e
      000292 62               [ 4]  608 	ld	h, d
      000293 BF               [ 4]  609 	cp	a, a
      000294 ED 42            [15]  610 	sbc	hl, bc
      000296 20 14            [12]  611 	jr	NZ, 00102$
      000298 ED 4Br4Cr01      [20]  612 	ld	bc, (#_select_start + 0)
      00029C 2Ar50r01         [16]  613 	ld	hl, (#_select_stop + 0)
      00029F 79               [ 4]  614 	ld	a, c
      0002A0 95               [ 4]  615 	sub	a, l
      0002A1 78               [ 4]  616 	ld	a, b
      0002A2 9C               [ 4]  617 	sbc	a, h
      0002A3 E2rA8r02         [10]  618 	jp	PO, 00112$
      0002A6 EE 80            [ 7]  619 	xor	a, #0x80
      0002A8                        620 00112$:
      0002A8 07               [ 4]  621 	rlca
      0002A9 E6 01            [ 7]  622 	and	a,#0x01
      0002AB C9               [10]  623 	ret
      0002AC                        624 00102$:
                                    625 ;tslmain.c:129: return select_start.y < select_stop.y;
      0002AC 79               [ 4]  626 	ld	a, c
      0002AD 93               [ 4]  627 	sub	a, e
      0002AE 78               [ 4]  628 	ld	a, b
      0002AF 9A               [ 4]  629 	sbc	a, d
      0002B0 E2rB5r02         [10]  630 	jp	PO, 00113$
      0002B3 EE 80            [ 7]  631 	xor	a, #0x80
      0002B5                        632 00113$:
      0002B5 07               [ 4]  633 	rlca
      0002B6 E6 01            [ 7]  634 	and	a,#0x01
                                    635 ;tslmain.c:130: }
      0002B8 C9               [10]  636 	ret
                                    637 ;tslmain.c:132: void redraw_line(short y)
                                    638 ;	---------------------------------
                                    639 ; Function redraw_line
                                    640 ; ---------------------------------
      0002B9                        641 _redraw_line::
                                    642 ;tslmain.c:134: redraw_start = y;
      0002B9 22r54r01         [16]  643 	ld	(_redraw_start), hl
                                    644 ;tslmain.c:135: redraw_stop = y + 1;
      0002BC 23               [ 6]  645 	inc	hl
      0002BD 22r56r01         [16]  646 	ld	(_redraw_stop), hl
                                    647 ;tslmain.c:136: }
      0002C0 C9               [10]  648 	ret
                                    649 ;tslmain.c:138: void redraw_from(short y)
                                    650 ;	---------------------------------
                                    651 ; Function redraw_from
                                    652 ; ---------------------------------
      0002C1                        653 _redraw_from::
      0002C1 22r54r01         [16]  654 	ld	(_redraw_start), hl
                                    655 ;tslmain.c:141: redraw_stop = 0x7000;
      0002C4 21 00 70         [10]  656 	ld	hl, #0x7000
      0002C7 22r56r01         [16]  657 	ld	(_redraw_stop), hl
                                    658 ;tslmain.c:142: }
      0002CA C9               [10]  659 	ret
                                    660 ;tslmain.c:144: void redraw_range(short y1, short y2)
                                    661 ;	---------------------------------
                                    662 ; Function redraw_range
                                    663 ; ---------------------------------
      0002CB                        664 _redraw_range::
      0002CB 4B               [ 4]  665 	ld	c, e
      0002CC 42               [ 4]  666 	ld	b, d
                                    667 ;tslmain.c:146: redraw_start = min(y1, y2);
      0002CD E5               [11]  668 	push	hl
      0002CE C5               [11]  669 	push	bc
      0002CF 59               [ 4]  670 	ld	e, c
      0002D0 50               [ 4]  671 	ld	d, b
      0002D1 CDr00r00         [17]  672 	call	_min
      0002D4 C1               [10]  673 	pop	bc
      0002D5 E1               [10]  674 	pop	hl
      0002D6 ED 53r54r01      [20]  675 	ld	(_redraw_start), de
                                    676 ;tslmain.c:147: redraw_stop = max(y1, y2) + 1;
      0002DA 59               [ 4]  677 	ld	e, c
      0002DB 50               [ 4]  678 	ld	d, b
      0002DC CDr00r00         [17]  679 	call	_max
      0002DF 13               [ 6]  680 	inc	de
      0002E0 ED 53r56r01      [20]  681 	ld	(_redraw_stop), de
                                    682 ;tslmain.c:148: }
      0002E4 C9               [10]  683 	ret
                                    684 ;tslmain.c:150: void clear_select()
                                    685 ;	---------------------------------
                                    686 ; Function clear_select
                                    687 ; ---------------------------------
      0002E5                        688 _clear_select::
                                    689 ;tslmain.c:152: redraw_start = select_start.y;
      0002E5 21r4Er01         [10]  690 	ld	hl, #(_select_start + 2)
      0002E8 7E               [ 7]  691 	ld	a, (hl)
      0002E9 23               [ 6]  692 	inc	hl
      0002EA 32r54r01         [13]  693 	ld	(_redraw_start+0), a
      0002ED 7E               [ 7]  694 	ld	a, (hl)
      0002EE 32r55r01         [13]  695 	ld	(_redraw_start+1), a
                                    696 ;tslmain.c:153: redraw_stop = select_stop.y+1;
      0002F1 2Ar52r01         [16]  697 	ld	hl, (#(_select_stop + 2) + 0)
      0002F4 23               [ 6]  698 	inc	hl
      0002F5 22r56r01         [16]  699 	ld	(_redraw_stop), hl
                                    700 ;tslmain.c:154: select_start.x = 0;
      0002F8 21 00 00         [10]  701 	ld	hl, #0x0000
      0002FB 22r4Cr01         [16]  702 	ld	(_select_start), hl
                                    703 ;tslmain.c:155: select_start.y = 0;
      0002FE 22r4Er01         [16]  704 	ld	((_select_start + 2)), hl
                                    705 ;tslmain.c:156: select_stop.x = 0;
      000301 22r50r01         [16]  706 	ld	(_select_stop), hl
                                    707 ;tslmain.c:157: select_stop.y = 0;
      000304 22r52r01         [16]  708 	ld	((_select_stop + 2)), hl
                                    709 ;tslmain.c:158: }
      000307 C9               [10]  710 	ret
                                    711 ;tslmain.c:160: void start_select()
                                    712 ;	---------------------------------
                                    713 ; Function start_select
                                    714 ; ---------------------------------
      000308                        715 _start_select::
                                    716 ;tslmain.c:162: select_stop = select_start = cursor;
      000308 11r4Cr01         [10]  717 	ld	de, #_select_start
      00030B 21r44r01         [10]  718 	ld	hl, #_cursor
      00030E 01 04 00         [10]  719 	ld	bc, #0x0004
      000311 ED B0            [21]  720 	ldir
      000313 11r50r01         [10]  721 	ld	de, #_select_stop
      000316 21r4Cr01         [10]  722 	ld	hl, #_select_start
      000319 01 04 00         [10]  723 	ld	bc, #0x0004
      00031C ED B0            [21]  724 	ldir
                                    725 ;tslmain.c:163: }
      00031E C9               [10]  726 	ret
                                    727 ;tslmain.c:165: void extend_select()
                                    728 ;	---------------------------------
                                    729 ; Function extend_select
                                    730 ; ---------------------------------
      00031F                        731 _extend_select::
      00031F DD E5            [15]  732 	push	ix
      000321 DD 21 00 00      [14]  733 	ld	ix,#0
      000325 DD 39            [15]  734 	add	ix,sp
      000327 3B               [ 6]  735 	dec	sp
                                    736 ;tslmain.c:167: if (cursor_lt(&cursor, &select_start))
      000328 11r4Cr01         [10]  737 	ld	de, #_select_start
      00032B 21r44r01         [10]  738 	ld	hl, #_cursor
      00032E CDr34r02         [17]  739 	call	_cursor_lt
      000331 DD 77 FF         [19]  740 	ld	-1 (ix), a
      000334 B7               [ 4]  741 	or	a, a
      000335 28 0D            [12]  742 	jr	Z, 00102$
                                    743 ;tslmain.c:168: select_start = cursor;
      000337 11r4Cr01         [10]  744 	ld	de, #_select_start
      00033A 21r44r01         [10]  745 	ld	hl, #_cursor
      00033D 01 04 00         [10]  746 	ld	bc, #0x0004
      000340 ED B0            [21]  747 	ldir
      000342 18 0B            [12]  748 	jr	00104$
      000344                        749 00102$:
                                    750 ;tslmain.c:170: select_stop = cursor;
      000344 11r50r01         [10]  751 	ld	de, #_select_stop
      000347 21r44r01         [10]  752 	ld	hl, #_cursor
      00034A 01 04 00         [10]  753 	ld	bc, #0x0004
      00034D ED B0            [21]  754 	ldir
      00034F                        755 00104$:
                                    756 ;tslmain.c:171: }
      00034F 33               [ 6]  757 	inc	sp
      000350 DD E1            [14]  758 	pop	ix
      000352 C9               [10]  759 	ret
                                    760 ;tslmain.c:173: void clear()
                                    761 ;	---------------------------------
                                    762 ; Function clear
                                    763 ; ---------------------------------
      000353                        764 _clear::
      000353 DD E5            [15]  765 	push	ix
      000355 DD 21 00 00      [14]  766 	ld	ix,#0
      000359 DD 39            [15]  767 	add	ix,sp
      00035B F5               [11]  768 	push	af
      00035C F5               [11]  769 	push	af
                                    770 ;tslmain.c:175: word n = vector_size(document);
      00035D 2Ar00r00         [16]  771 	ld	hl, (_document)
      000360 CDr00r00         [17]  772 	call	_vector_size
      000363 DD 73 FE         [19]  773 	ld	-2 (ix), e
      000366 DD 72 FF         [19]  774 	ld	-1 (ix), d
                                    775 ;tslmain.c:177: for (word i = 0; i < n; ++i)
      000369 01 00 00         [10]  776 	ld	bc, #0x0000
      00036C                        777 00103$:
      00036C 79               [ 4]  778 	ld	a, c
      00036D DD 96 FE         [19]  779 	sub	a, -2 (ix)
      000370 78               [ 4]  780 	ld	a, b
      000371 DD 9E FF         [19]  781 	sbc	a, -1 (ix)
      000374 30 19            [12]  782 	jr	NC, 00101$
                                    783 ;tslmain.c:179: vector_get(document, i, &line);
      000376 C5               [11]  784 	push	bc
      000377 21 02 00         [10]  785 	ld	hl, #2
      00037A 39               [11]  786 	add	hl, sp
      00037B E5               [11]  787 	push	hl
      00037C 59               [ 4]  788 	ld	e, c
      00037D 50               [ 4]  789 	ld	d, b
      00037E 2Ar00r00         [16]  790 	ld	hl, (_document)
      000381 CDr00r00         [17]  791 	call	_vector_get
      000384 D1               [10]  792 	pop	de
      000385 E1               [10]  793 	pop	hl
      000386 E5               [11]  794 	push	hl
      000387 D5               [11]  795 	push	de
      000388 CDr00r00         [17]  796 	call	_vector_shut
      00038B C1               [10]  797 	pop	bc
                                    798 ;tslmain.c:177: for (word i = 0; i < n; ++i)
      00038C 03               [ 6]  799 	inc	bc
      00038D 18 DD            [12]  800 	jr	00103$
      00038F                        801 00101$:
                                    802 ;tslmain.c:182: vector_clear(document);
      00038F 2Ar00r00         [16]  803 	ld	hl, (_document)
      000392 CDr00r00         [17]  804 	call	_vector_clear
                                    805 ;tslmain.c:183: }
      000395 DD F9            [10]  806 	ld	sp, ix
      000397 DD E1            [14]  807 	pop	ix
      000399 C9               [10]  808 	ret
                                    809 ;tslmain.c:185: word round_up(word value, word margin)
                                    810 ;	---------------------------------
                                    811 ; Function round_up
                                    812 ; ---------------------------------
      00039A                        813 _round_up::
                                    814 ;tslmain.c:187: return (value + margin) & ~(margin-1);
      00039A 19               [11]  815 	add	hl, de
      00039B 1B               [ 6]  816 	dec	de
      00039C 7B               [ 4]  817 	ld	a, e
      00039D 2F               [ 4]  818 	cpl
      00039E 4F               [ 4]  819 	ld	c, a
      00039F 7A               [ 4]  820 	ld	a, d
      0003A0 2F               [ 4]  821 	cpl
      0003A1 47               [ 4]  822 	ld	b, a
      0003A2 7D               [ 4]  823 	ld	a, l
      0003A3 A1               [ 4]  824 	and	a, c
      0003A4 5F               [ 4]  825 	ld	e, a
      0003A5 7C               [ 4]  826 	ld	a, h
      0003A6 A0               [ 4]  827 	and	a, b
      0003A7 57               [ 4]  828 	ld	d, a
                                    829 ;tslmain.c:188: }
      0003A8 C9               [10]  830 	ret
                                    831 ;tslmain.c:190: Vector* get_line(word line_index)
                                    832 ;	---------------------------------
                                    833 ; Function get_line
                                    834 ; ---------------------------------
      0003A9                        835 _get_line::
      0003A9 DD E5            [15]  836 	push	ix
      0003AB DD 21 00 00      [14]  837 	ld	ix,#0
      0003AF DD 39            [15]  838 	add	ix,sp
      0003B1 FD 21 F6 FF      [14]  839 	ld	iy, #-10
      0003B5 FD 39            [15]  840 	add	iy, sp
      0003B7 FD F9            [10]  841 	ld	sp, iy
      0003B9 DD 75 FC         [19]  842 	ld	-4 (ix), l
      0003BC DD 74 FD         [19]  843 	ld	-3 (ix), h
                                    844 ;tslmain.c:192: word size = vector_size(document);
      0003BF 2Ar00r00         [16]  845 	ld	hl, (_document)
      0003C2 CDr00r00         [17]  846 	call	_vector_size
      0003C5 DD 73 FE         [19]  847 	ld	-2 (ix), e
      0003C8 DD 72 FF         [19]  848 	ld	-1 (ix), d
                                    849 ;tslmain.c:193: if (line_index < size)
      0003CB DD 7E FC         [19]  850 	ld	a, -4 (ix)
      0003CE DD 96 FE         [19]  851 	sub	a, -2 (ix)
      0003D1 DD 7E FD         [19]  852 	ld	a, -3 (ix)
      0003D4 DD 9E FF         [19]  853 	sbc	a, -1 (ix)
      0003D7 30 18            [12]  854 	jr	NC, 00102$
                                    855 ;tslmain.c:196: vector_get(document, line_index, &line);
      0003D9 21 02 00         [10]  856 	ld	hl, #2
      0003DC 39               [11]  857 	add	hl, sp
      0003DD E5               [11]  858 	push	hl
      0003DE DD 5E FC         [19]  859 	ld	e, -4 (ix)
      0003E1 DD 56 FD         [19]  860 	ld	d, -3 (ix)
      0003E4 2Ar00r00         [16]  861 	ld	hl, (_document)
      0003E7 CDr00r00         [17]  862 	call	_vector_get
                                    863 ;tslmain.c:197: return line;
      0003EA E1               [10]  864 	pop	hl
      0003EB D1               [10]  865 	pop	de
      0003EC D5               [11]  866 	push	de
      0003ED E5               [11]  867 	push	hl
      0003EE C3r81r04         [10]  868 	jp	00106$
      0003F1                        869 00102$:
                                    870 ;tslmain.c:199: vector_reserve(document, round_up(line_index + 1, 16));
      0003F1 DD 7E FC         [19]  871 	ld	a, -4 (ix)
      0003F4 DD 77 F6         [19]  872 	ld	-10 (ix), a
      0003F7 DD 7E FD         [19]  873 	ld	a, -3 (ix)
      0003FA DD 77 F7         [19]  874 	ld	-9 (ix), a
      0003FD DD 7E F6         [19]  875 	ld	a, -10 (ix)
      000400 C6 01            [ 7]  876 	add	a, #0x01
      000402 DD 77 FA         [19]  877 	ld	-6 (ix), a
      000405 DD 7E F7         [19]  878 	ld	a, -9 (ix)
      000408 CE 00            [ 7]  879 	adc	a, #0x00
      00040A DD 77 FB         [19]  880 	ld	-5 (ix), a
      00040D 11 10 00         [10]  881 	ld	de, #0x0010
      000410 DD 6E FA         [19]  882 	ld	l, -6 (ix)
                                    883 ;	spillPairReg hl
                                    884 ;	spillPairReg hl
      000413 DD 66 FB         [19]  885 	ld	h, -5 (ix)
                                    886 ;	spillPairReg hl
                                    887 ;	spillPairReg hl
      000416 CDr9Ar03         [17]  888 	call	_round_up
      000419 2Ar00r00         [16]  889 	ld	hl, (_document)
      00041C CDr00r00         [17]  890 	call	_vector_reserve
                                    891 ;tslmain.c:200: vector_resize(document, line_index + 1);
      00041F DD 5E FA         [19]  892 	ld	e, -6 (ix)
      000422 DD 56 FB         [19]  893 	ld	d, -5 (ix)
      000425 2Ar00r00         [16]  894 	ld	hl, (_document)
      000428 CDr00r00         [17]  895 	call	_vector_resize
                                    896 ;tslmain.c:201: word new_size = vector_size(document);
      00042B 2Ar00r00         [16]  897 	ld	hl, (_document)
      00042E CDr00r00         [17]  898 	call	_vector_size
      000431 DD 73 FA         [19]  899 	ld	-6 (ix), e
      000434 DD 72 FB         [19]  900 	ld	-5 (ix), d
                                    901 ;tslmain.c:202: while (size < new_size)
      000437                        902 00103$:
      000437 DD 7E FE         [19]  903 	ld	a, -2 (ix)
      00043A DD 96 FA         [19]  904 	sub	a, -6 (ix)
      00043D DD 7E FF         [19]  905 	ld	a, -1 (ix)
      000440 DD 9E FB         [19]  906 	sbc	a, -5 (ix)
      000443 30 27            [12]  907 	jr	NC, 00105$
                                    908 ;tslmain.c:204: Vector* new_line = vector_new(1);
      000445 21 01 00         [10]  909 	ld	hl, #0x0001
      000448 CDr00r00         [17]  910 	call	_vector_new
      00044B DD 73 F8         [19]  911 	ld	-8 (ix), e
      00044E DD 72 F9         [19]  912 	ld	-7 (ix), d
                                    913 ;tslmain.c:205: vector_set(document, size++, &new_line);
      000451 DD 5E FE         [19]  914 	ld	e, -2 (ix)
      000454 DD 56 FF         [19]  915 	ld	d, -1 (ix)
      000457 DD 34 FE         [23]  916 	inc	-2 (ix)
      00045A 20 03            [12]  917 	jr	NZ, 00124$
      00045C DD 34 FF         [23]  918 	inc	-1 (ix)
      00045F                        919 00124$:
      00045F 21 02 00         [10]  920 	ld	hl, #2
      000462 39               [11]  921 	add	hl, sp
      000463 E5               [11]  922 	push	hl
      000464 2Ar00r00         [16]  923 	ld	hl, (_document)
      000467 CDr00r00         [17]  924 	call	_vector_set
      00046A 18 CB            [12]  925 	jr	00103$
      00046C                        926 00105$:
                                    927 ;tslmain.c:208: vector_get(document, line_index, &line);
      00046C 21 02 00         [10]  928 	ld	hl, #2
      00046F 39               [11]  929 	add	hl, sp
      000470 E5               [11]  930 	push	hl
      000471 DD 5E FC         [19]  931 	ld	e, -4 (ix)
      000474 DD 56 FD         [19]  932 	ld	d, -3 (ix)
      000477 2Ar00r00         [16]  933 	ld	hl, (_document)
      00047A CDr00r00         [17]  934 	call	_vector_get
                                    935 ;tslmain.c:209: return line;
      00047D E1               [10]  936 	pop	hl
      00047E D1               [10]  937 	pop	de
      00047F D5               [11]  938 	push	de
      000480 E5               [11]  939 	push	hl
      000481                        940 00106$:
                                    941 ;tslmain.c:210: }
      000481 DD F9            [10]  942 	ld	sp, ix
      000483 DD E1            [14]  943 	pop	ix
      000485 C9               [10]  944 	ret
                                    945 ;tslmain.c:212: void append_line(Vector* line, byte b)
                                    946 ;	---------------------------------
                                    947 ; Function append_line
                                    948 ; ---------------------------------
      000486                        949 _append_line::
      000486 DD E5            [15]  950 	push	ix
      000488 DD 21 00 00      [14]  951 	ld	ix,#0
      00048C DD 39            [15]  952 	add	ix,sp
      00048E 4D               [ 4]  953 	ld	c, l
      00048F 44               [ 4]  954 	ld	b, h
                                    955 ;tslmain.c:214: vector_push(line, &b);
      000490 21 04 00         [10]  956 	ld	hl, #4
      000493 39               [11]  957 	add	hl, sp
      000494 EB               [ 4]  958 	ex	de, hl
      000495 69               [ 4]  959 	ld	l, c
                                    960 ;	spillPairReg hl
                                    961 ;	spillPairReg hl
      000496 60               [ 4]  962 	ld	h, b
                                    963 ;	spillPairReg hl
                                    964 ;	spillPairReg hl
      000497 CDr00r00         [17]  965 	call	_vector_push
                                    966 ;tslmain.c:215: }
      00049A DD E1            [14]  967 	pop	ix
      00049C E1               [10]  968 	pop	hl
      00049D 33               [ 6]  969 	inc	sp
      00049E E9               [ 4]  970 	jp	(hl)
                                    971 ;tslmain.c:217: void load_file(const char* filename)
                                    972 ;	---------------------------------
                                    973 ; Function load_file
                                    974 ; ---------------------------------
      00049F                        975 _load_file::
      00049F DD E5            [15]  976 	push	ix
      0004A1 DD 21 00 00      [14]  977 	ld	ix,#0
      0004A5 DD 39            [15]  978 	add	ix,sp
      0004A7 FD 21 F8 FE      [14]  979 	ld	iy, #-264
      0004AB FD 39            [15]  980 	add	iy, sp
      0004AD FD F9            [10]  981 	ld	sp, iy
                                    982 ;tslmain.c:220: clear();
      0004AF E5               [11]  983 	push	hl
      0004B0 CDr53r03         [17]  984 	call	_clear
      0004B3 E1               [10]  985 	pop	hl
                                    986 ;tslmain.c:221: byte handle = open_file(filename, 0);
      0004B4 AF               [ 4]  987 	xor	a, a
      0004B5 F5               [11]  988 	push	af
      0004B6 33               [ 6]  989 	inc	sp
      0004B7 CDr00r00         [17]  990 	call	_open_file
                                    991 ;tslmain.c:222: if (handle == 0xFF) return;
      0004BA 4F               [ 4]  992 	ld	c, a
      0004BB 3C               [ 4]  993 	inc	a
      0004BC CAr61r05         [10]  994 	jp	Z,00118$
      0004BF 18 00            [12]  995 	jr	00102$
      0004C1                        996 00102$:
                                    997 ;tslmain.c:224: word line_index = 0;
      0004C1 AF               [ 4]  998 	xor	a, a
      0004C2 DD 77 FE         [19]  999 	ld	-2 (ix), a
      0004C5 DD 77 FF         [19] 1000 	ld	-1 (ix), a
                                   1001 ;tslmain.c:225: do
      0004C8                       1002 00112$:
                                   1003 ;tslmain.c:227: act = read_file(handle, buffer, 256);
      0004C8 C5               [11] 1004 	push	bc
      0004C9 21 00 01         [10] 1005 	ld	hl, #0x0100
      0004CC E5               [11] 1006 	push	hl
      0004CD 21 04 00         [10] 1007 	ld	hl, #4
      0004D0 39               [11] 1008 	add	hl, sp
      0004D1 EB               [ 4] 1009 	ex	de, hl
      0004D2 79               [ 4] 1010 	ld	a, c
      0004D3 CDr00r00         [17] 1011 	call	_read_file
      0004D6 C1               [10] 1012 	pop	bc
      0004D7 DD 73 F8         [19] 1013 	ld	-8 (ix), e
      0004DA DD 72 F9         [19] 1014 	ld	-7 (ix), d
                                   1015 ;tslmain.c:228: for (word i = 0; i < act; ++i)
      0004DD DD 5E FE         [19] 1016 	ld	e, -2 (ix)
      0004E0 DD 56 FF         [19] 1017 	ld	d, -1 (ix)
      0004E3 AF               [ 4] 1018 	xor	a, a
      0004E4 DD 77 FE         [19] 1019 	ld	-2 (ix), a
      0004E7 DD 77 FF         [19] 1020 	ld	-1 (ix), a
      0004EA                       1021 00116$:
      0004EA DD 7E FE         [19] 1022 	ld	a, -2 (ix)
      0004ED DD 96 F8         [19] 1023 	sub	a, -8 (ix)
      0004F0 DD 7E FF         [19] 1024 	ld	a, -1 (ix)
      0004F3 DD 9E F9         [19] 1025 	sbc	a, -7 (ix)
      0004F6 30 56            [12] 1026 	jr	NC, 00128$
                                   1027 ;tslmain.c:230: if (buffer[i] == 10)
      0004F8 D5               [11] 1028 	push	de
      0004F9 DD 5E FE         [19] 1029 	ld	e, -2 (ix)
      0004FC DD 56 FF         [19] 1030 	ld	d, -1 (ix)
      0004FF 21 02 00         [10] 1031 	ld	hl, #2
      000502 39               [11] 1032 	add	hl, sp
      000503 19               [11] 1033 	add	hl, de
      000504 D1               [10] 1034 	pop	de
      000505 DD 75 FA         [19] 1035 	ld	-6 (ix), l
      000508 DD 74 FB         [19] 1036 	ld	-5 (ix), h
      00050B 7E               [ 7] 1037 	ld	a, (hl)
      00050C FE 0A            [ 7] 1038 	cp	a, #0x0a
      00050E 20 03            [12] 1039 	jr	NZ, 00109$
                                   1040 ;tslmain.c:231: ++line_index;
      000510 13               [ 6] 1041 	inc	de
      000511 18 31            [12] 1042 	jr	00117$
      000513                       1043 00109$:
                                   1044 ;tslmain.c:233: if (buffer[i] >= 32 || buffer[i]==9)
      000513 FE 20            [ 7] 1045 	cp	a, #0x20
      000515 30 04            [12] 1046 	jr	NC, 00105$
      000517 D6 09            [ 7] 1047 	sub	a, #0x09
      000519 20 29            [12] 1048 	jr	NZ, 00117$
      00051B                       1049 00105$:
                                   1050 ;tslmain.c:235: Vector* line = get_line(line_index);
      00051B C5               [11] 1051 	push	bc
                                   1052 ;	spillPairReg hl
                                   1053 ;	spillPairReg hl
      00051C EB               [ 4] 1054 	ex	de, hl
      00051D E5               [11] 1055 	push	hl
                                   1056 ;	spillPairReg hl
                                   1057 ;	spillPairReg hl
      00051E CDrA9r03         [17] 1058 	call	_get_line
      000521 EB               [ 4] 1059 	ex	de, hl
      000522 D1               [10] 1060 	pop	de
      000523 C1               [10] 1061 	pop	bc
      000524 DD 75 FC         [19] 1062 	ld	-4 (ix), l
      000527 DD 74 FD         [19] 1063 	ld	-3 (ix), h
                                   1064 ;tslmain.c:236: if (line)
      00052A 7C               [ 4] 1065 	ld	a, h
      00052B B5               [ 4] 1066 	or	a, l
      00052C 28 16            [12] 1067 	jr	Z, 00117$
                                   1068 ;tslmain.c:237: append_line(line, buffer[i]);
      00052E DD 6E FA         [19] 1069 	ld	l, -6 (ix)
      000531 DD 66 FB         [19] 1070 	ld	h, -5 (ix)
      000534 7E               [ 7] 1071 	ld	a, (hl)
      000535 C5               [11] 1072 	push	bc
      000536 D5               [11] 1073 	push	de
      000537 F5               [11] 1074 	push	af
      000538 33               [ 6] 1075 	inc	sp
      000539 DD 6E FC         [19] 1076 	ld	l, -4 (ix)
                                   1077 ;	spillPairReg hl
                                   1078 ;	spillPairReg hl
      00053C DD 66 FD         [19] 1079 	ld	h, -3 (ix)
                                   1080 ;	spillPairReg hl
                                   1081 ;	spillPairReg hl
      00053F CDr86r04         [17] 1082 	call	_append_line
      000542 D1               [10] 1083 	pop	de
      000543 C1               [10] 1084 	pop	bc
      000544                       1085 00117$:
                                   1086 ;tslmain.c:228: for (word i = 0; i < act; ++i)
      000544 DD 34 FE         [23] 1087 	inc	-2 (ix)
      000547 20 A1            [12] 1088 	jr	NZ, 00116$
      000549 DD 34 FF         [23] 1089 	inc	-1 (ix)
      00054C 18 9C            [12] 1090 	jr	00116$
      00054E                       1091 00128$:
      00054E DD 73 FE         [19] 1092 	ld	-2 (ix), e
      000551 DD 72 FF         [19] 1093 	ld	-1 (ix), d
                                   1094 ;tslmain.c:240: } while (act > 0);
      000554 DD 7E F9         [19] 1095 	ld	a, -7 (ix)
      000557 DD B6 F8         [19] 1096 	or	a, -8 (ix)
      00055A C2rC8r04         [10] 1097 	jp	NZ, 00112$
                                   1098 ;tslmain.c:241: close_file(handle);
      00055D 79               [ 4] 1099 	ld	a, c
      00055E CDr00r00         [17] 1100 	call	_close_file
      000561                       1101 00118$:
                                   1102 ;tslmain.c:242: }
      000561 DD F9            [10] 1103 	ld	sp, ix
      000563 DD E1            [14] 1104 	pop	ix
      000565 C9               [10] 1105 	ret
                                   1106 ;tslmain.c:254: void draw_str(const char* s)
                                   1107 ;	---------------------------------
                                   1108 ; Function draw_str
                                   1109 ; ---------------------------------
      000566                       1110 _draw_str::
      000566                       1111 00103$:
                                   1112 ;tslmain.c:256: for (; *s; ++s)
      000566 4E               [ 7] 1113 	ld	c, (hl)
      000567 79               [ 4] 1114 	ld	a, c
      000568 B7               [ 4] 1115 	or	a, a
      000569 C8               [11] 1116 	ret	Z
                                   1117 ;tslmain.c:257: hal_draw_char(*s);
      00056A E5               [11] 1118 	push	hl
      00056B 79               [ 4] 1119 	ld	a, c
      00056C CDr00r00         [17] 1120 	call	_hal_draw_char
      00056F E1               [10] 1121 	pop	hl
                                   1122 ;tslmain.c:256: for (; *s; ++s)
      000570 23               [ 6] 1123 	inc	hl
                                   1124 ;tslmain.c:258: }
      000571 18 F3            [12] 1125 	jr	00103$
                                   1126 ;tslmain.c:260: void  draw_menu_item(const char* s)
                                   1127 ;	---------------------------------
                                   1128 ; Function draw_menu_item
                                   1129 ; ---------------------------------
      000573                       1130 _draw_menu_item::
                                   1131 ;tslmain.c:262: hal_color(5, 173);
      000573 E5               [11] 1132 	push	hl
      000574 2E AD            [ 7] 1133 	ld	l, #0xad
                                   1134 ;	spillPairReg hl
                                   1135 ;	spillPairReg hl
      000576 3E 05            [ 7] 1136 	ld	a, #0x05
      000578 CDr00r00         [17] 1137 	call	_hal_color
      00057B 3E 20            [ 7] 1138 	ld	a, #0x20
      00057D CDr00r00         [17] 1139 	call	_hal_draw_char
      000580 3E 20            [ 7] 1140 	ld	a, #0x20
      000582 CDr00r00         [17] 1141 	call	_hal_draw_char
      000585 D1               [10] 1142 	pop	de
                                   1143 ;tslmain.c:265: hal_draw_char(*s);
      000586 1A               [ 7] 1144 	ld	a, (de)
      000587 4F               [ 4] 1145 	ld	c, a
      000588 D5               [11] 1146 	push	de
      000589 79               [ 4] 1147 	ld	a, c
      00058A CDr00r00         [17] 1148 	call	_hal_draw_char
      00058D D1               [10] 1149 	pop	de
                                   1150 ;tslmain.c:266: ++s;
      00058E 13               [ 6] 1151 	inc	de
                                   1152 ;tslmain.c:267: if (*s)
      00058F 1A               [ 7] 1153 	ld	a, (de)
      000590 B7               [ 4] 1154 	or	a, a
      000591 C8               [11] 1155 	ret	Z
                                   1156 ;tslmain.c:269: hal_color(0, 173);
      000592 D5               [11] 1157 	push	de
      000593 2E AD            [ 7] 1158 	ld	l, #0xad
                                   1159 ;	spillPairReg hl
                                   1160 ;	spillPairReg hl
      000595 AF               [ 4] 1161 	xor	a, a
      000596 CDr00r00         [17] 1162 	call	_hal_color
      000599 D1               [10] 1163 	pop	de
                                   1164 ;tslmain.c:270: draw_str(s);
      00059A EB               [ 4] 1165 	ex	de, hl
                                   1166 ;tslmain.c:272: }
      00059B C3r66r05         [10] 1167 	jp	_draw_str
                                   1168 ;tslmain.c:274: void draw_status_item(const char* key, const char* name)
                                   1169 ;	---------------------------------
                                   1170 ; Function draw_status_item
                                   1171 ; ---------------------------------
      00059E                       1172 _draw_status_item::
                                   1173 ;tslmain.c:276: hal_color(5, 173);
      00059E E5               [11] 1174 	push	hl
      00059F D5               [11] 1175 	push	de
      0005A0 2E AD            [ 7] 1176 	ld	l, #0xad
                                   1177 ;	spillPairReg hl
                                   1178 ;	spillPairReg hl
      0005A2 3E 05            [ 7] 1179 	ld	a, #0x05
      0005A4 CDr00r00         [17] 1180 	call	_hal_color
      0005A7 3E 20            [ 7] 1181 	ld	a, #0x20
      0005A9 CDr00r00         [17] 1182 	call	_hal_draw_char
      0005AC D1               [10] 1183 	pop	de
      0005AD E1               [10] 1184 	pop	hl
                                   1185 ;tslmain.c:278: draw_str(key);
      0005AE D5               [11] 1186 	push	de
      0005AF CDr66r05         [17] 1187 	call	_draw_str
      0005B2 3E 20            [ 7] 1188 	ld	a, #0x20
      0005B4 CDr00r00         [17] 1189 	call	_hal_draw_char
      0005B7 2E AD            [ 7] 1190 	ld	l, #0xad
                                   1191 ;	spillPairReg hl
                                   1192 ;	spillPairReg hl
      0005B9 AF               [ 4] 1193 	xor	a, a
      0005BA CDr00r00         [17] 1194 	call	_hal_color
      0005BD D1               [10] 1195 	pop	de
                                   1196 ;tslmain.c:281: draw_str(name);
      0005BE EB               [ 4] 1197 	ex	de, hl
      0005BF CDr66r05         [17] 1198 	call	_draw_str
                                   1199 ;tslmain.c:282: hal_draw_char(' ');
      0005C2 3E 20            [ 7] 1200 	ld	a, #0x20
                                   1201 ;tslmain.c:283: }
      0005C4 C3r00r00         [10] 1202 	jp	_hal_draw_char
                                   1203 ;tslmain.c:285: void  draw_menu()
                                   1204 ;	---------------------------------
                                   1205 ; Function draw_menu
                                   1206 ; ---------------------------------
      0005C7                       1207 _draw_menu::
                                   1208 ;tslmain.c:287: hal_move(0, 0);
      0005C7 11 00 00         [10] 1209 	ld	de, #0x0000
      0005CA 21 00 00         [10] 1210 	ld	hl, #0x0000
      0005CD CDr00r00         [17] 1211 	call	_hal_move
                                   1212 ;tslmain.c:288: hal_color(0, 173);
      0005D0 2E AD            [ 7] 1213 	ld	l, #0xad
                                   1214 ;	spillPairReg hl
                                   1215 ;	spillPairReg hl
      0005D2 AF               [ 4] 1216 	xor	a, a
      0005D3 CDr00r00         [17] 1217 	call	_hal_color
                                   1218 ;tslmain.c:289: hal_rept_char(' ', W);
      0005D6 2E 50            [ 7] 1219 	ld	l, #0x50
                                   1220 ;	spillPairReg hl
                                   1221 ;	spillPairReg hl
      0005D8 3E 20            [ 7] 1222 	ld	a, #0x20
      0005DA CDr00r00         [17] 1223 	call	_hal_rept_char
                                   1224 ;tslmain.c:290: hal_move(0, 0);
      0005DD 11 00 00         [10] 1225 	ld	de, #0x0000
      0005E0 21 00 00         [10] 1226 	ld	hl, #0x0000
      0005E3 CDr00r00         [17] 1227 	call	_hal_move
                                   1228 ;tslmain.c:291: draw_menu_item("\xF0");
      0005E6 21r0Ar06         [10] 1229 	ld	hl, #___str_0
      0005E9 CDr73r05         [17] 1230 	call	_draw_menu_item
                                   1231 ;tslmain.c:292: draw_menu_item("File");
      0005EC 21r0Cr06         [10] 1232 	ld	hl, #___str_1
      0005EF CDr73r05         [17] 1233 	call	_draw_menu_item
                                   1234 ;tslmain.c:293: draw_menu_item("Edit");
      0005F2 21r11r06         [10] 1235 	ld	hl, #___str_2
      0005F5 CDr73r05         [17] 1236 	call	_draw_menu_item
                                   1237 ;tslmain.c:294: draw_menu_item("Search");
      0005F8 21r16r06         [10] 1238 	ld	hl, #___str_3
      0005FB CDr73r05         [17] 1239 	call	_draw_menu_item
                                   1240 ;tslmain.c:295: draw_menu_item("Run");
      0005FE 21r1Dr06         [10] 1241 	ld	hl, #___str_4
      000601 CDr73r05         [17] 1242 	call	_draw_menu_item
                                   1243 ;tslmain.c:296: draw_menu_item("Compile");
      000604 21r21r06         [10] 1244 	ld	hl, #___str_5
                                   1245 ;tslmain.c:297: }
      000607 C3r73r05         [10] 1246 	jp	_draw_menu_item
      00060A                       1247 ___str_0:
      00060A F0                    1248 	.db 0xf0
      00060B 00                    1249 	.db 0x00
      00060C                       1250 ___str_1:
      00060C 46 69 6C 65           1251 	.ascii "File"
      000610 00                    1252 	.db 0x00
      000611                       1253 ___str_2:
      000611 45 64 69 74           1254 	.ascii "Edit"
      000615 00                    1255 	.db 0x00
      000616                       1256 ___str_3:
      000616 53 65 61 72 63 68     1257 	.ascii "Search"
      00061C 00                    1258 	.db 0x00
      00061D                       1259 ___str_4:
      00061D 52 75 6E              1260 	.ascii "Run"
      000620 00                    1261 	.db 0x00
      000621                       1262 ___str_5:
      000621 43 6F 6D 70 69 6C 65  1263 	.ascii "Compile"
      000628 00                    1264 	.db 0x00
                                   1265 ;tslmain.c:299: void draw_status()
                                   1266 ;	---------------------------------
                                   1267 ; Function draw_status
                                   1268 ; ---------------------------------
      000629                       1269 _draw_status::
                                   1270 ;tslmain.c:301: hal_move(0, H - 1);
      000629 11 1D 00         [10] 1271 	ld	de, #0x001d
      00062C 21 00 00         [10] 1272 	ld	hl, #0x0000
      00062F CDr00r00         [17] 1273 	call	_hal_move
                                   1274 ;tslmain.c:302: hal_color(0, 173);
      000632 2E AD            [ 7] 1275 	ld	l, #0xad
                                   1276 ;	spillPairReg hl
                                   1277 ;	spillPairReg hl
      000634 AF               [ 4] 1278 	xor	a, a
      000635 CDr00r00         [17] 1279 	call	_hal_color
                                   1280 ;tslmain.c:303: hal_rept_char(' ', W);
      000638 2E 50            [ 7] 1281 	ld	l, #0x50
                                   1282 ;	spillPairReg hl
                                   1283 ;	spillPairReg hl
      00063A 3E 20            [ 7] 1284 	ld	a, #0x20
      00063C CDr00r00         [17] 1285 	call	_hal_rept_char
                                   1286 ;tslmain.c:304: hal_move(0, H - 1);
      00063F 11 1D 00         [10] 1287 	ld	de, #0x001d
      000642 21 00 00         [10] 1288 	ld	hl, #0x0000
      000645 CDr00r00         [17] 1289 	call	_hal_move
                                   1290 ;tslmain.c:305: draw_status_item("F1", "Help");
      000648 11r6Fr06         [10] 1291 	ld	de, #___str_7
      00064B 21r6Cr06         [10] 1292 	ld	hl, #___str_6
      00064E CDr9Er05         [17] 1293 	call	_draw_status_item
                                   1294 ;tslmain.c:306: draw_status_item("F2", "Save");
      000651 11r77r06         [10] 1295 	ld	de, #___str_9
      000654 21r74r06         [10] 1296 	ld	hl, #___str_8
      000657 CDr9Er05         [17] 1297 	call	_draw_status_item
                                   1298 ;tslmain.c:307: draw_status_item("F3", "Open");
      00065A 11r7Fr06         [10] 1299 	ld	de, #___str_11
      00065D 21r7Cr06         [10] 1300 	ld	hl, #___str_10
      000660 CDr9Er05         [17] 1301 	call	_draw_status_item
                                   1302 ;tslmain.c:308: draw_status_item("F9", "Compile");
      000663 11r87r06         [10] 1303 	ld	de, #___str_13
      000666 21r84r06         [10] 1304 	ld	hl, #___str_12
                                   1305 ;tslmain.c:309: }
      000669 C3r9Er05         [10] 1306 	jp	_draw_status_item
      00066C                       1307 ___str_6:
      00066C 46 31                 1308 	.ascii "F1"
      00066E 00                    1309 	.db 0x00
      00066F                       1310 ___str_7:
      00066F 48 65 6C 70           1311 	.ascii "Help"
      000673 00                    1312 	.db 0x00
      000674                       1313 ___str_8:
      000674 46 32                 1314 	.ascii "F2"
      000676 00                    1315 	.db 0x00
      000677                       1316 ___str_9:
      000677 53 61 76 65           1317 	.ascii "Save"
      00067B 00                    1318 	.db 0x00
      00067C                       1319 ___str_10:
      00067C 46 33                 1320 	.ascii "F3"
      00067E 00                    1321 	.db 0x00
      00067F                       1322 ___str_11:
      00067F 4F 70 65 6E           1323 	.ascii "Open"
      000683 00                    1324 	.db 0x00
      000684                       1325 ___str_12:
      000684 46 39                 1326 	.ascii "F9"
      000686 00                    1327 	.db 0x00
      000687                       1328 ___str_13:
      000687 43 6F 6D 70 69 6C 65  1329 	.ascii "Compile"
      00068E 00                    1330 	.db 0x00
                                   1331 ;tslmain.c:311: void draw_brackets(byte b)
                                   1332 ;	---------------------------------
                                   1333 ; Function draw_brackets
                                   1334 ; ---------------------------------
      00068F                       1335 _draw_brackets::
      00068F 4F               [ 4] 1336 	ld	c, a
                                   1337 ;tslmain.c:313: hal_draw_char('[');
      000690 C5               [11] 1338 	push	bc
      000691 3E 5B            [ 7] 1339 	ld	a, #0x5b
      000693 CDr00r00         [17] 1340 	call	_hal_draw_char
      000696 2E 80            [ 7] 1341 	ld	l, #0x80
                                   1342 ;	spillPairReg hl
                                   1343 ;	spillPairReg hl
      000698 3E 7A            [ 7] 1344 	ld	a, #0x7a
      00069A CDr00r00         [17] 1345 	call	_hal_color
      00069D C1               [10] 1346 	pop	bc
                                   1347 ;tslmain.c:315: hal_draw_char(b);
      00069E 79               [ 4] 1348 	ld	a, c
      00069F CDr00r00         [17] 1349 	call	_hal_draw_char
                                   1350 ;tslmain.c:316: hal_color(255, 128);
      0006A2 2E 80            [ 7] 1351 	ld	l, #0x80
                                   1352 ;	spillPairReg hl
                                   1353 ;	spillPairReg hl
      0006A4 3E FF            [ 7] 1354 	ld	a, #0xff
      0006A6 CDr00r00         [17] 1355 	call	_hal_color
                                   1356 ;tslmain.c:317: hal_draw_char(']');
      0006A9 3E 5D            [ 7] 1357 	ld	a, #0x5d
                                   1358 ;tslmain.c:318: }
      0006AB C3r00r00         [10] 1359 	jp	_hal_draw_char
                                   1360 ;tslmain.c:320: void draw_frame()
                                   1361 ;	---------------------------------
                                   1362 ; Function draw_frame
                                   1363 ; ---------------------------------
      0006AE                       1364 _draw_frame::
                                   1365 ;tslmain.c:322: draw_menu();
      0006AE CDrC7r05         [17] 1366 	call	_draw_menu
                                   1367 ;tslmain.c:323: fg = 255;
      0006B1 21r00r00         [10] 1368 	ld	hl, #_fg
      0006B4 36 FF            [10] 1369 	ld	(hl), #0xff
                                   1370 ;tslmain.c:324: bg = 128;
      0006B6 21r01r00         [10] 1371 	ld	hl, #_bg
                                   1372 ;tslmain.c:326: hal_color(255, 128);
      0006B9 36 80            [10] 1373 	ld	(hl), #0x80
      0006BB 6E               [ 7] 1374 	ld	l, (hl)
                                   1375 ;	spillPairReg hl
                                   1376 ;	spillPairReg hl
      0006BC 3E FF            [ 7] 1377 	ld	a, #0xff
      0006BE CDr00r00         [17] 1378 	call	_hal_color
                                   1379 ;tslmain.c:327: hal_move(0, 1);
      0006C1 11 01 00         [10] 1380 	ld	de, #0x0001
      0006C4 21 00 00         [10] 1381 	ld	hl, #0x0000
      0006C7 CDr00r00         [17] 1382 	call	_hal_move
                                   1383 ;tslmain.c:328: hal_draw_char(TL);
      0006CA 3Ar3Ar00         [13] 1384 	ld	a, (_TL+0)
      0006CD CDr00r00         [17] 1385 	call	_hal_draw_char
                                   1386 ;tslmain.c:329: hal_draw_char(HORZ);
      0006D0 3Ar3Er00         [13] 1387 	ld	a, (_HORZ+0)
      0006D3 CDr00r00         [17] 1388 	call	_hal_draw_char
                                   1389 ;tslmain.c:330: draw_brackets(254);
      0006D6 3E FE            [ 7] 1390 	ld	a, #0xfe
      0006D8 CDr8Fr06         [17] 1391 	call	_draw_brackets
                                   1392 ;tslmain.c:331: hal_rept_char(HORZ, W - 10);
      0006DB 3Ar3Er00         [13] 1393 	ld	a, (_HORZ+0)
                                   1394 ;	spillPairReg hl
                                   1395 ;	spillPairReg hl
      0006DE 2E 46            [ 7] 1396 	ld	l, #0x46
      0006E0 CDr00r00         [17] 1397 	call	_hal_rept_char
                                   1398 ;tslmain.c:332: draw_brackets(0x12);
      0006E3 3E 12            [ 7] 1399 	ld	a, #0x12
      0006E5 CDr8Fr06         [17] 1400 	call	_draw_brackets
                                   1401 ;tslmain.c:333: hal_draw_char(HORZ);
      0006E8 3Ar3Er00         [13] 1402 	ld	a, (_HORZ+0)
      0006EB CDr00r00         [17] 1403 	call	_hal_draw_char
                                   1404 ;tslmain.c:334: hal_draw_char(TR);
      0006EE 3Ar3Br00         [13] 1405 	ld	a, (_TR+0)
      0006F1 CDr00r00         [17] 1406 	call	_hal_draw_char
                                   1407 ;tslmain.c:339: for (i = 2; i < (H - 2); ++i)
      0006F4 0E 02            [ 7] 1408 	ld	c, #0x02
      0006F6                       1409 00111$:
                                   1410 ;tslmain.c:341: hal_color(255, 128);
      0006F6 C5               [11] 1411 	push	bc
      0006F7 2E 80            [ 7] 1412 	ld	l, #0x80
                                   1413 ;	spillPairReg hl
                                   1414 ;	spillPairReg hl
      0006F9 3E FF            [ 7] 1415 	ld	a, #0xff
      0006FB CDr00r00         [17] 1416 	call	_hal_color
      0006FE C1               [10] 1417 	pop	bc
                                   1418 ;tslmain.c:342: hal_move(0, i);
      0006FF 59               [ 4] 1419 	ld	e, c
      000700 16 00            [ 7] 1420 	ld	d, #0x00
      000702 C5               [11] 1421 	push	bc
      000703 21 00 00         [10] 1422 	ld	hl, #0x0000
      000706 CDr00r00         [17] 1423 	call	_hal_move
      000709 C1               [10] 1424 	pop	bc
                                   1425 ;tslmain.c:343: hal_draw_char(VERT);
      00070A 3Ar3Fr00         [13] 1426 	ld	a, (_VERT+0)
      00070D 47               [ 4] 1427 	ld	b, a
      00070E C5               [11] 1428 	push	bc
      00070F 78               [ 4] 1429 	ld	a, b
      000710 CDr00r00         [17] 1430 	call	_hal_draw_char
      000713 2E 4E            [ 7] 1431 	ld	l, #0x4e
                                   1432 ;	spillPairReg hl
                                   1433 ;	spillPairReg hl
      000715 3E 20            [ 7] 1434 	ld	a, #0x20
      000717 CDr00r00         [17] 1435 	call	_hal_rept_char
      00071A 2E A8            [ 7] 1436 	ld	l, #0xa8
                                   1437 ;	spillPairReg hl
                                   1438 ;	spillPairReg hl
      00071C 3E 80            [ 7] 1439 	ld	a, #0x80
      00071E CDr00r00         [17] 1440 	call	_hal_color
      000721 C1               [10] 1441 	pop	bc
                                   1442 ;tslmain.c:346: if (i == 2) hal_draw_char(0x1E);
      000722 79               [ 4] 1443 	ld	a, c
      000723 D6 02            [ 7] 1444 	sub	a, #0x02
      000725 20 09            [12] 1445 	jr	NZ, 00108$
      000727 C5               [11] 1446 	push	bc
      000728 3E 1E            [ 7] 1447 	ld	a, #0x1e
      00072A CDr00r00         [17] 1448 	call	_hal_draw_char
      00072D C1               [10] 1449 	pop	bc
      00072E 18 23            [12] 1450 	jr	00112$
      000730                       1451 00108$:
                                   1452 ;tslmain.c:347: else if (i == 3) hal_draw_char(0xFE);
      000730 79               [ 4] 1453 	ld	a, c
      000731 D6 03            [ 7] 1454 	sub	a, #0x03
      000733 20 09            [12] 1455 	jr	NZ, 00105$
      000735 C5               [11] 1456 	push	bc
      000736 3E FE            [ 7] 1457 	ld	a, #0xfe
      000738 CDr00r00         [17] 1458 	call	_hal_draw_char
      00073B C1               [10] 1459 	pop	bc
      00073C 18 15            [12] 1460 	jr	00112$
      00073E                       1461 00105$:
                                   1462 ;tslmain.c:348: else if (i == (H - 3)) hal_draw_char(0x1F);
      00073E 79               [ 4] 1463 	ld	a, c
      00073F D6 1B            [ 7] 1464 	sub	a, #0x1b
      000741 20 09            [12] 1465 	jr	NZ, 00102$
      000743 C5               [11] 1466 	push	bc
      000744 3E 1F            [ 7] 1467 	ld	a, #0x1f
      000746 CDr00r00         [17] 1468 	call	_hal_draw_char
      000749 C1               [10] 1469 	pop	bc
      00074A 18 07            [12] 1470 	jr	00112$
      00074C                       1471 00102$:
                                   1472 ;tslmain.c:349: else   hal_draw_char(0xB1);
      00074C C5               [11] 1473 	push	bc
      00074D 3E B1            [ 7] 1474 	ld	a, #0xb1
      00074F CDr00r00         [17] 1475 	call	_hal_draw_char
      000752 C1               [10] 1476 	pop	bc
      000753                       1477 00112$:
                                   1478 ;tslmain.c:339: for (i = 2; i < (H - 2); ++i)
      000753 0C               [ 4] 1479 	inc	c
      000754 79               [ 4] 1480 	ld	a, c
      000755 D6 1C            [ 7] 1481 	sub	a, #0x1c
      000757 38 9D            [12] 1482 	jr	C, 00111$
                                   1483 ;tslmain.c:352: hal_color(255, 128);
      000759 2E 80            [ 7] 1484 	ld	l, #0x80
                                   1485 ;	spillPairReg hl
                                   1486 ;	spillPairReg hl
      00075B 3E FF            [ 7] 1487 	ld	a, #0xff
      00075D CDr00r00         [17] 1488 	call	_hal_color
                                   1489 ;tslmain.c:353: hal_move(0, H-2);
      000760 11 1C 00         [10] 1490 	ld	de, #0x001c
      000763 21 00 00         [10] 1491 	ld	hl, #0x0000
      000766 CDr00r00         [17] 1492 	call	_hal_move
                                   1493 ;tslmain.c:354: hal_draw_char(BL);
      000769 3Ar3Cr00         [13] 1494 	ld	a, (_BL+0)
      00076C CDr00r00         [17] 1495 	call	_hal_draw_char
                                   1496 ;tslmain.c:355: hal_rept_char(HORZ,20);
      00076F 3Ar3Er00         [13] 1497 	ld	a, (_HORZ+0)
                                   1498 ;	spillPairReg hl
                                   1499 ;	spillPairReg hl
      000772 2E 14            [ 7] 1500 	ld	l, #0x14
      000774 CDr00r00         [17] 1501 	call	_hal_rept_char
                                   1502 ;tslmain.c:356: hal_color(128, 168);
      000777 2E A8            [ 7] 1503 	ld	l, #0xa8
                                   1504 ;	spillPairReg hl
                                   1505 ;	spillPairReg hl
      000779 3E 80            [ 7] 1506 	ld	a, #0x80
      00077B CDr00r00         [17] 1507 	call	_hal_color
                                   1508 ;tslmain.c:357: hal_draw_char(0x11);
      00077E 3E 11            [ 7] 1509 	ld	a, #0x11
      000780 CDr00r00         [17] 1510 	call	_hal_draw_char
                                   1511 ;tslmain.c:358: hal_draw_char(0xFE);
      000783 3E FE            [ 7] 1512 	ld	a, #0xfe
      000785 CDr00r00         [17] 1513 	call	_hal_draw_char
                                   1514 ;tslmain.c:359: hal_rept_char(0xB1,W-26);
      000788 2E 36            [ 7] 1515 	ld	l, #0x36
                                   1516 ;	spillPairReg hl
                                   1517 ;	spillPairReg hl
      00078A 3E B1            [ 7] 1518 	ld	a, #0xb1
      00078C CDr00r00         [17] 1519 	call	_hal_rept_char
                                   1520 ;tslmain.c:360: hal_draw_char(0x10);
      00078F 3E 10            [ 7] 1521 	ld	a, #0x10
      000791 CDr00r00         [17] 1522 	call	_hal_draw_char
                                   1523 ;tslmain.c:361: hal_color(168, 128);
      000794 2E 80            [ 7] 1524 	ld	l, #0x80
                                   1525 ;	spillPairReg hl
                                   1526 ;	spillPairReg hl
      000796 3E A8            [ 7] 1527 	ld	a, #0xa8
      000798 CDr00r00         [17] 1528 	call	_hal_color
                                   1529 ;tslmain.c:362: hal_draw_char(0xC4);
      00079B 3E C4            [ 7] 1530 	ld	a, #0xc4
      00079D CDr00r00         [17] 1531 	call	_hal_draw_char
                                   1532 ;tslmain.c:363: hal_draw_char(0xD9);
      0007A0 3E D9            [ 7] 1533 	ld	a, #0xd9
      0007A2 CDr00r00         [17] 1534 	call	_hal_draw_char
                                   1535 ;tslmain.c:365: draw_status();
      0007A5 CDr29r06         [17] 1536 	call	_draw_status
                                   1537 ;tslmain.c:366: hal_color(fg, bg);
      0007A8 3Ar01r00         [13] 1538 	ld	a, (_bg+0)
      0007AB 6F               [ 4] 1539 	ld	l, a
                                   1540 ;	spillPairReg hl
                                   1541 ;	spillPairReg hl
      0007AC 3Ar00r00         [13] 1542 	ld	a, (_fg+0)
                                   1543 ;tslmain.c:367: }
      0007AF C3r00r00         [10] 1544 	jp	_hal_color
                                   1545 ;tslmain.c:373: byte draw_line(short logical_y)
                                   1546 ;	---------------------------------
                                   1547 ; Function draw_line
                                   1548 ; ---------------------------------
      0007B2                       1549 _draw_line::
      0007B2 DD E5            [15] 1550 	push	ix
      0007B4 DD 21 00 00      [14] 1551 	ld	ix,#0
      0007B8 DD 39            [15] 1552 	add	ix,sp
      0007BA FD 21 F5 FF      [14] 1553 	ld	iy, #-11
      0007BE FD 39            [15] 1554 	add	iy, sp
      0007C0 FD F9            [10] 1555 	ld	sp, iy
      0007C2 DD 75 FA         [19] 1556 	ld	-6 (ix), l
                                   1557 ;tslmain.c:375: if (logical_y < 0 || logical_y >= vector_size(document)) return 0;
      0007C5 DD 74 FB         [19] 1558 	ld	-5 (ix), h
      0007C8 44               [ 4] 1559 	ld	b, h
      0007C9 CB 78            [ 8] 1560 	bit	7, b
      0007CB 20 11            [12] 1561 	jr	NZ, 00101$
      0007CD 2Ar00r00         [16] 1562 	ld	hl, (_document)
      0007D0 CDr00r00         [17] 1563 	call	_vector_size
      0007D3 DD 6E FA         [19] 1564 	ld	l, -6 (ix)
                                   1565 ;	spillPairReg hl
                                   1566 ;	spillPairReg hl
      0007D6 DD 66 FB         [19] 1567 	ld	h, -5 (ix)
                                   1568 ;	spillPairReg hl
                                   1569 ;	spillPairReg hl
      0007D9 AF               [ 4] 1570 	xor	a, a
      0007DA ED 52            [15] 1571 	sbc	hl, de
      0007DC 38 04            [12] 1572 	jr	C, 00102$
      0007DE                       1573 00101$:
      0007DE AF               [ 4] 1574 	xor	a, a
      0007DF C3r9Er09         [10] 1575 	jp	00128$
      0007E2                       1576 00102$:
                                   1577 ;tslmain.c:376: short visual_y = logical_y - offset.y;
      0007E2 2Ar4Ar01         [16] 1578 	ld	hl, (#(_offset + 2) + 0)
      0007E5 DD 7E FA         [19] 1579 	ld	a, -6 (ix)
      0007E8 95               [ 4] 1580 	sub	a, l
      0007E9 4F               [ 4] 1581 	ld	c, a
      0007EA DD 7E FB         [19] 1582 	ld	a, -5 (ix)
      0007ED 9C               [ 4] 1583 	sbc	a, h
      0007EE 47               [ 4] 1584 	ld	b, a
                                   1585 ;tslmain.c:377: if (visual_y < 0 || visual_y >= (H - 4)) return 0;
      0007EF DD 71 FE         [19] 1586 	ld	-2 (ix), c
      0007F2 DD 70 FF         [19] 1587 	ld	-1 (ix), b
      0007F5 DD CB FF 7E      [20] 1588 	bit	7, -1 (ix)
      0007F9 20 0B            [12] 1589 	jr	NZ, 00104$
      0007FB 79               [ 4] 1590 	ld	a, c
      0007FC D6 1A            [ 7] 1591 	sub	a, #0x1a
      0007FE 78               [ 4] 1592 	ld	a, b
      0007FF 17               [ 4] 1593 	rla
      000800 3F               [ 4] 1594 	ccf
      000801 1F               [ 4] 1595 	rra
      000802 DE 80            [ 7] 1596 	sbc	a, #0x80
      000804 38 04            [12] 1597 	jr	C, 00105$
      000806                       1598 00104$:
      000806 AF               [ 4] 1599 	xor	a, a
      000807 C3r9Er09         [10] 1600 	jp	00128$
      00080A                       1601 00105$:
                                   1602 ;tslmain.c:379: if (in_selection(0, logical_y))
      00080A DD 5E FA         [19] 1603 	ld	e, -6 (ix)
      00080D DD 56 FB         [19] 1604 	ld	d, -5 (ix)
      000810 21 00 00         [10] 1605 	ld	hl, #0x0000
      000813 CDr40r00         [17] 1606 	call	_in_selection
      000816 B7               [ 4] 1607 	or	a, a
      000817 28 0A            [12] 1608 	jr	Z, 00108$
                                   1609 ;tslmain.c:380: hal_color(bg, fg);
      000819 3Ar00r00         [13] 1610 	ld	a, (_fg+0)
      00081C 6F               [ 4] 1611 	ld	l, a
                                   1612 ;	spillPairReg hl
                                   1613 ;	spillPairReg hl
      00081D 3Ar01r00         [13] 1614 	ld	a, (_bg+0)
      000820 CDr00r00         [17] 1615 	call	_hal_color
      000823                       1616 00108$:
                                   1617 ;tslmain.c:381: Vector* line = get_line(logical_y);
      000823 DD 6E FA         [19] 1618 	ld	l, -6 (ix)
                                   1619 ;	spillPairReg hl
                                   1620 ;	spillPairReg hl
      000826 DD 66 FB         [19] 1621 	ld	h, -5 (ix)
                                   1622 ;	spillPairReg hl
                                   1623 ;	spillPairReg hl
      000829 CDrA9r03         [17] 1624 	call	_get_line
      00082C 4B               [ 4] 1625 	ld	c, e
      00082D 42               [ 4] 1626 	ld	b, d
                                   1627 ;tslmain.c:382: byte* data = vector_access(line, 0);
      00082E C5               [11] 1628 	push	bc
      00082F 11 00 00         [10] 1629 	ld	de, #0x0000
      000832 69               [ 4] 1630 	ld	l, c
                                   1631 ;	spillPairReg hl
                                   1632 ;	spillPairReg hl
      000833 60               [ 4] 1633 	ld	h, b
                                   1634 ;	spillPairReg hl
                                   1635 ;	spillPairReg hl
      000834 CDr00r00         [17] 1636 	call	_vector_access
      000837 C1               [10] 1637 	pop	bc
      000838 33               [ 6] 1638 	inc	sp
      000839 33               [ 6] 1639 	inc	sp
      00083A D5               [11] 1640 	push	de
                                   1641 ;tslmain.c:384: hal_move(1, visual_y + 2);
      00083B DD 5E FE         [19] 1642 	ld	e, -2 (ix)
      00083E DD 56 FF         [19] 1643 	ld	d, -1 (ix)
      000841 13               [ 6] 1644 	inc	de
      000842 13               [ 6] 1645 	inc	de
      000843 C5               [11] 1646 	push	bc
      000844 21 01 00         [10] 1647 	ld	hl, #0x0001
      000847 CDr00r00         [17] 1648 	call	_hal_move
      00084A C1               [10] 1649 	pop	bc
                                   1650 ;tslmain.c:385: if (data)
      00084B DD 7E F6         [19] 1651 	ld	a, -10 (ix)
      00084E DD B6 F5         [19] 1652 	or	a, -11 (ix)
      000851 28 13            [12] 1653 	jr	Z, 00110$
                                   1654 ;tslmain.c:387: n = visual_mapping(line, line_mapping, 0, 0x7000);
      000853 21 00 70         [10] 1655 	ld	hl, #0x7000
      000856 E5               [11] 1656 	push	hl
      000857 65               [ 4] 1657 	ld	h, l
      000858 E5               [11] 1658 	push	hl
      000859 11r04r00         [10] 1659 	ld	de, #_line_mapping
      00085C 69               [ 4] 1660 	ld	l, c
                                   1661 ;	spillPairReg hl
                                   1662 ;	spillPairReg hl
      00085D 60               [ 4] 1663 	ld	h, b
                                   1664 ;	spillPairReg hl
                                   1665 ;	spillPairReg hl
      00085E CDr8Dr00         [17] 1666 	call	_visual_mapping
      000861 DD 77 F7         [19] 1667 	ld	-9 (ix), a
      000864 18 0C            [12] 1668 	jr	00111$
      000866                       1669 00110$:
                                   1670 ;tslmain.c:391: hal_rept_char(' ', W - 2);
      000866 2E 4E            [ 7] 1671 	ld	l, #0x4e
                                   1672 ;	spillPairReg hl
                                   1673 ;	spillPairReg hl
      000868 3E 20            [ 7] 1674 	ld	a, #0x20
      00086A CDr00r00         [17] 1675 	call	_hal_rept_char
                                   1676 ;tslmain.c:392: return 1;
      00086D 3E 01            [ 7] 1677 	ld	a, #0x01
      00086F C3r9Er09         [10] 1678 	jp	00128$
      000872                       1679 00111$:
                                   1680 ;tslmain.c:395: short x = 0, i = 0;
      000872 AF               [ 4] 1681 	xor	a, a
      000873 DD 77 FC         [19] 1682 	ld	-4 (ix), a
      000876 DD 77 FD         [19] 1683 	ld	-3 (ix), a
                                   1684 ;tslmain.c:396: while (x<(W-2))
      000879 AF               [ 4] 1685 	xor	a, a
      00087A DD 77 FE         [19] 1686 	ld	-2 (ix), a
      00087D DD 77 FF         [19] 1687 	ld	-1 (ix), a
      000880                       1688 00125$:
      000880 DD 7E FC         [19] 1689 	ld	a, -4 (ix)
      000883 D6 4E            [ 7] 1690 	sub	a, #0x4e
      000885 DD 7E FD         [19] 1691 	ld	a, -3 (ix)
      000888 17               [ 4] 1692 	rla
      000889 3F               [ 4] 1693 	ccf
      00088A 1F               [ 4] 1694 	rra
      00088B DE 80            [ 7] 1695 	sbc	a, #0x80
      00088D D2r9Cr09         [10] 1696 	jp	NC, 00127$
                                   1697 ;tslmain.c:398: if (i < n)
      000890 DD 4E F7         [19] 1698 	ld	c, -9 (ix)
      000893 06 00            [ 7] 1699 	ld	b, #0x00
                                   1700 ;tslmain.c:402: byte m = (byte)(line_mapping[i].visual - x);
      000895 DD 5E FC         [19] 1701 	ld	e, -4 (ix)
                                   1702 ;tslmain.c:398: if (i < n)
      000898 DD 7E FE         [19] 1703 	ld	a, -2 (ix)
      00089B 91               [ 4] 1704 	sub	a, c
      00089C DD 7E FF         [19] 1705 	ld	a, -1 (ix)
      00089F 98               [ 4] 1706 	sbc	a, b
      0008A0 E2rA5r08         [10] 1707 	jp	PO, 00202$
      0008A3 EE 80            [ 7] 1708 	xor	a, #0x80
      0008A5                       1709 00202$:
      0008A5 F2r79r09         [10] 1710 	jp	P, 00123$
                                   1711 ;tslmain.c:400: if (x < line_mapping[i].visual)
      0008A8 DD 6E FE         [19] 1712 	ld	l, -2 (ix)
      0008AB DD 66 FF         [19] 1713 	ld	h, -1 (ix)
      0008AE 29               [11] 1714 	add	hl, hl
      0008AF 29               [11] 1715 	add	hl, hl
      0008B0 7D               [ 4] 1716 	ld	a, l
      0008B1 C6r04            [ 7] 1717 	add	a, #<(_line_mapping)
      0008B3 4F               [ 4] 1718 	ld	c, a
      0008B4 7C               [ 4] 1719 	ld	a, h
      0008B5 CEs00            [ 7] 1720 	adc	a, #>(_line_mapping)
      0008B7 47               [ 4] 1721 	ld	b, a
      0008B8 C5               [11] 1722 	push	bc
      0008B9 FD E1            [14] 1723 	pop	iy
      0008BB FD 56 02         [19] 1724 	ld	d, 2 (iy)
      0008BE FD 6E 03         [19] 1725 	ld	l, 3 (iy)
      0008C1 FD 23            [10] 1726 	inc	iy
      0008C3 FD 23            [10] 1727 	inc	iy
                                   1728 ;	spillPairReg hl
      0008C5 DD 7E FC         [19] 1729 	ld	a, -4 (ix)
      0008C8 92               [ 4] 1730 	sub	a, d
      0008C9 DD 7E FD         [19] 1731 	ld	a, -3 (ix)
      0008CC 9D               [ 4] 1732 	sbc	a, l
      0008CD E2rD2r08         [10] 1733 	jp	PO, 00203$
      0008D0 EE 80            [ 7] 1734 	xor	a, #0x80
      0008D2                       1735 00203$:
      0008D2 F2rEFr08         [10] 1736 	jp	P, 00113$
                                   1737 ;tslmain.c:402: byte m = (byte)(line_mapping[i].visual - x);
      0008D5 7A               [ 4] 1738 	ld	a, d
      0008D6 93               [ 4] 1739 	sub	a, e
      0008D7 6F               [ 4] 1740 	ld	l, a
                                   1741 ;	spillPairReg hl
                                   1742 ;	spillPairReg hl
                                   1743 ;tslmain.c:403: hal_rept_char(' ', m);
      0008D8 C5               [11] 1744 	push	bc
      0008D9 FD E5            [15] 1745 	push	iy
      0008DB 3E 20            [ 7] 1746 	ld	a, #0x20
      0008DD CDr00r00         [17] 1747 	call	_hal_rept_char
      0008E0 FD E1            [14] 1748 	pop	iy
      0008E2 C1               [10] 1749 	pop	bc
                                   1750 ;tslmain.c:404: x = line_mapping[i].visual;
      0008E3 FD 7E 00         [19] 1751 	ld	a, 0 (iy)
      0008E6 DD 77 FC         [19] 1752 	ld	-4 (ix), a
      0008E9 FD 7E 01         [19] 1753 	ld	a, 1 (iy)
      0008EC DD 77 FD         [19] 1754 	ld	-3 (ix), a
      0008EF                       1755 00113$:
                                   1756 ;tslmain.c:406: if (select_start.x == line_mapping[i].logical && select_start.y == logical_y)
      0008EF ED 5Br4Cr01      [20] 1757 	ld	de, (#_select_start + 0)
      0008F3 69               [ 4] 1758 	ld	l, c
      0008F4 60               [ 4] 1759 	ld	h, b
      0008F5 7E               [ 7] 1760 	ld	a, (hl)
      0008F6 23               [ 6] 1761 	inc	hl
      0008F7 66               [ 7] 1762 	ld	h, (hl)
                                   1763 ;	spillPairReg hl
      0008F8 6F               [ 4] 1764 	ld	l, a
                                   1765 ;	spillPairReg hl
                                   1766 ;	spillPairReg hl
      0008F9 BF               [ 4] 1767 	cp	a, a
      0008FA ED 52            [15] 1768 	sbc	hl, de
      0008FC 20 1A            [12] 1769 	jr	NZ, 00115$
      0008FE 2Ar4Er01         [16] 1770 	ld	hl, (#(_select_start + 2) + 0)
      000901 DD 5E FA         [19] 1771 	ld	e, -6 (ix)
      000904 DD 56 FB         [19] 1772 	ld	d, -5 (ix)
      000907 BF               [ 4] 1773 	cp	a, a
      000908 ED 52            [15] 1774 	sbc	hl, de
      00090A 20 0C            [12] 1775 	jr	NZ, 00115$
                                   1776 ;tslmain.c:407: hal_color(bg, fg);
      00090C C5               [11] 1777 	push	bc
      00090D 3Ar00r00         [13] 1778 	ld	a, (_fg+0)
      000910 6F               [ 4] 1779 	ld	l, a
                                   1780 ;	spillPairReg hl
                                   1781 ;	spillPairReg hl
      000911 3Ar01r00         [13] 1782 	ld	a, (_bg+0)
      000914 CDr00r00         [17] 1783 	call	_hal_color
      000917 C1               [10] 1784 	pop	bc
      000918                       1785 00115$:
                                   1786 ;tslmain.c:408: if (select_stop.x == line_mapping[i].logical && select_stop.y == logical_y)
      000918 ED 5Br50r01      [20] 1787 	ld	de, (#_select_stop + 0)
      00091C 69               [ 4] 1788 	ld	l, c
      00091D 60               [ 4] 1789 	ld	h, b
      00091E 7E               [ 7] 1790 	ld	a, (hl)
      00091F 23               [ 6] 1791 	inc	hl
      000920 66               [ 7] 1792 	ld	h, (hl)
                                   1793 ;	spillPairReg hl
      000921 6F               [ 4] 1794 	ld	l, a
                                   1795 ;	spillPairReg hl
                                   1796 ;	spillPairReg hl
      000922 BF               [ 4] 1797 	cp	a, a
      000923 ED 52            [15] 1798 	sbc	hl, de
      000925 20 1A            [12] 1799 	jr	NZ, 00118$
      000927 2Ar52r01         [16] 1800 	ld	hl, (#(_select_stop + 2) + 0)
      00092A DD 5E FA         [19] 1801 	ld	e, -6 (ix)
      00092D DD 56 FB         [19] 1802 	ld	d, -5 (ix)
      000930 BF               [ 4] 1803 	cp	a, a
      000931 ED 52            [15] 1804 	sbc	hl, de
      000933 20 0C            [12] 1805 	jr	NZ, 00118$
                                   1806 ;tslmain.c:409: hal_color(fg, bg);
      000935 C5               [11] 1807 	push	bc
      000936 3Ar01r00         [13] 1808 	ld	a, (_bg+0)
      000939 6F               [ 4] 1809 	ld	l, a
                                   1810 ;	spillPairReg hl
                                   1811 ;	spillPairReg hl
      00093A 3Ar00r00         [13] 1812 	ld	a, (_fg+0)
      00093D CDr00r00         [17] 1813 	call	_hal_color
      000940 C1               [10] 1814 	pop	bc
      000941                       1815 00118$:
                                   1816 ;tslmain.c:410: byte c = data[line_mapping[i].logical];
      000941 69               [ 4] 1817 	ld	l, c
      000942 60               [ 4] 1818 	ld	h, b
      000943 4E               [ 7] 1819 	ld	c, (hl)
      000944 23               [ 6] 1820 	inc	hl
      000945 46               [ 7] 1821 	ld	b, (hl)
      000946 E1               [10] 1822 	pop	hl
      000947 E5               [11] 1823 	push	hl
      000948 09               [11] 1824 	add	hl, bc
      000949 7E               [ 7] 1825 	ld	a, (hl)
                                   1826 ;tslmain.c:411: hal_draw_char(c>=32?c:' ');
      00094A FE 20            [ 7] 1827 	cp	a, #0x20
      00094C 38 09            [12] 1828 	jr	C, 00130$
      00094E DD 77 F8         [19] 1829 	ld	-8 (ix), a
      000951 DD 36 F9 00      [19] 1830 	ld	-7 (ix), #0x00
      000955 18 08            [12] 1831 	jr	00131$
      000957                       1832 00130$:
      000957 DD 36 F8 20      [19] 1833 	ld	-8 (ix), #0x20
      00095B DD 36 F9 00      [19] 1834 	ld	-7 (ix), #0
      00095F                       1835 00131$:
      00095F DD 7E F8         [19] 1836 	ld	a, -8 (ix)
      000962 CDr00r00         [17] 1837 	call	_hal_draw_char
                                   1838 ;tslmain.c:412: ++x;
      000965 DD 34 FC         [23] 1839 	inc	-4 (ix)
      000968 20 03            [12] 1840 	jr	NZ, 00212$
      00096A DD 34 FD         [23] 1841 	inc	-3 (ix)
      00096D                       1842 00212$:
                                   1843 ;tslmain.c:413: ++i;
      00096D DD 34 FE         [23] 1844 	inc	-2 (ix)
      000970 C2r80r08         [10] 1845 	jp	NZ,00125$
      000973 DD 34 FF         [23] 1846 	inc	-1 (ix)
      000976 C3r80r08         [10] 1847 	jp	00125$
      000979                       1848 00123$:
                                   1849 ;tslmain.c:417: if (select_stop.y == logical_y)
      000979 2Ar52r01         [16] 1850 	ld	hl, (#(_select_stop + 2) + 0)
      00097C DD 4E FA         [19] 1851 	ld	c, -6 (ix)
      00097F DD 46 FB         [19] 1852 	ld	b, -5 (ix)
      000982 BF               [ 4] 1853 	cp	a, a
      000983 ED 42            [15] 1854 	sbc	hl, bc
      000985 20 0C            [12] 1855 	jr	NZ, 00121$
                                   1856 ;tslmain.c:418: hal_color(fg, bg);
      000987 D5               [11] 1857 	push	de
      000988 3Ar01r00         [13] 1858 	ld	a, (_bg+0)
      00098B 6F               [ 4] 1859 	ld	l, a
                                   1860 ;	spillPairReg hl
                                   1861 ;	spillPairReg hl
      00098C 3Ar00r00         [13] 1862 	ld	a, (_fg+0)
      00098F CDr00r00         [17] 1863 	call	_hal_color
      000992 D1               [10] 1864 	pop	de
      000993                       1865 00121$:
                                   1866 ;tslmain.c:419: hal_rept_char(' ', (byte)(W - 2 - x));
      000993 3E 4E            [ 7] 1867 	ld	a, #0x4e
      000995 93               [ 4] 1868 	sub	a, e
      000996 6F               [ 4] 1869 	ld	l, a
                                   1870 ;	spillPairReg hl
                                   1871 ;	spillPairReg hl
      000997 3E 20            [ 7] 1872 	ld	a, #0x20
      000999 CDr00r00         [17] 1873 	call	_hal_rept_char
                                   1874 ;tslmain.c:420: break;
      00099C                       1875 00127$:
                                   1876 ;tslmain.c:423: return 1;
      00099C 3E 01            [ 7] 1877 	ld	a, #0x01
      00099E                       1878 00128$:
                                   1879 ;tslmain.c:424: }
      00099E DD F9            [10] 1880 	ld	sp, ix
      0009A0 DD E1            [14] 1881 	pop	ix
      0009A2 C9               [10] 1882 	ret
                                   1883 ;tslmain.c:426: void visual_cursor(byte with_offset, Cursor* vc)
                                   1884 ;	---------------------------------
                                   1885 ; Function visual_cursor
                                   1886 ; ---------------------------------
      0009A3                       1887 _visual_cursor::
      0009A3 DD E5            [15] 1888 	push	ix
      0009A5 DD 21 00 00      [14] 1889 	ld	ix,#0
      0009A9 DD 39            [15] 1890 	add	ix,sp
      0009AB F5               [11] 1891 	push	af
      0009AC 3B               [ 6] 1892 	dec	sp
      0009AD DD 77 FF         [19] 1893 	ld	-1 (ix), a
      0009B0 33               [ 6] 1894 	inc	sp
      0009B1 33               [ 6] 1895 	inc	sp
      0009B2 D5               [11] 1896 	push	de
                                   1897 ;tslmain.c:428: Vector* line = get_line(cursor.y);
      0009B3 2Ar46r01         [16] 1898 	ld	hl, (#(_cursor + 2) + 0)
      0009B6 CDrA9r03         [17] 1899 	call	_get_line
      0009B9 4B               [ 4] 1900 	ld	c, e
      0009BA 42               [ 4] 1901 	ld	b, d
                                   1902 ;tslmain.c:429: short visual_x = logical_to_visual(line, cursor.x);
      0009BB ED 5Br44r01      [20] 1903 	ld	de, (#_cursor + 0)
      0009BF 69               [ 4] 1904 	ld	l, c
                                   1905 ;	spillPairReg hl
                                   1906 ;	spillPairReg hl
      0009C0 60               [ 4] 1907 	ld	h, b
                                   1908 ;	spillPairReg hl
                                   1909 ;	spillPairReg hl
      0009C1 CDrA8r01         [17] 1910 	call	_logical_to_visual
                                   1911 ;tslmain.c:430: vc->x = visual_x;
      0009C4 E1               [10] 1912 	pop	hl
      0009C5 E5               [11] 1913 	push	hl
      0009C6 73               [ 7] 1914 	ld	(hl), e
      0009C7 23               [ 6] 1915 	inc	hl
      0009C8 72               [ 7] 1916 	ld	(hl), d
                                   1917 ;tslmain.c:431: vc->y = cursor.y;
      0009C9 C1               [10] 1918 	pop	bc
      0009CA C5               [11] 1919 	push	bc
      0009CB 03               [ 6] 1920 	inc	bc
      0009CC 03               [ 6] 1921 	inc	bc
      0009CD ED 5Br46r01      [20] 1922 	ld	de, (#(_cursor + 2) + 0)
      0009D1 69               [ 4] 1923 	ld	l, c
      0009D2 60               [ 4] 1924 	ld	h, b
      0009D3 73               [ 7] 1925 	ld	(hl), e
      0009D4 23               [ 6] 1926 	inc	hl
      0009D5 72               [ 7] 1927 	ld	(hl), d
                                   1928 ;tslmain.c:432: if (with_offset)
      0009D6 DD 7E FF         [19] 1929 	ld	a, -1 (ix)
      0009D9 B7               [ 4] 1930 	or	a, a
      0009DA 28 26            [12] 1931 	jr	Z, 00103$
                                   1932 ;tslmain.c:434: vc->x -= offset.x;
      0009DC E1               [10] 1933 	pop	hl
      0009DD E5               [11] 1934 	push	hl
      0009DE 5E               [ 7] 1935 	ld	e, (hl)
      0009DF 23               [ 6] 1936 	inc	hl
      0009E0 56               [ 7] 1937 	ld	d, (hl)
      0009E1 2Ar48r01         [16] 1938 	ld	hl, (#_offset + 0)
      0009E4 7B               [ 4] 1939 	ld	a, e
      0009E5 95               [ 4] 1940 	sub	a, l
      0009E6 5F               [ 4] 1941 	ld	e, a
      0009E7 7A               [ 4] 1942 	ld	a, d
      0009E8 9C               [ 4] 1943 	sbc	a, h
      0009E9 57               [ 4] 1944 	ld	d, a
      0009EA E1               [10] 1945 	pop	hl
      0009EB E5               [11] 1946 	push	hl
      0009EC 73               [ 7] 1947 	ld	(hl), e
      0009ED 23               [ 6] 1948 	inc	hl
      0009EE 72               [ 7] 1949 	ld	(hl), d
                                   1950 ;tslmain.c:435: vc->y -= offset.y;
      0009EF 69               [ 4] 1951 	ld	l, c
      0009F0 60               [ 4] 1952 	ld	h, b
      0009F1 5E               [ 7] 1953 	ld	e, (hl)
      0009F2 23               [ 6] 1954 	inc	hl
      0009F3 56               [ 7] 1955 	ld	d, (hl)
      0009F4 2Ar4Ar01         [16] 1956 	ld	hl, (#(_offset + 2) + 0)
      0009F7 7B               [ 4] 1957 	ld	a, e
      0009F8 95               [ 4] 1958 	sub	a, l
      0009F9 5F               [ 4] 1959 	ld	e, a
      0009FA 7A               [ 4] 1960 	ld	a, d
      0009FB 9C               [ 4] 1961 	sbc	a, h
      0009FC 57               [ 4] 1962 	ld	d, a
      0009FD 7B               [ 4] 1963 	ld	a, e
      0009FE 02               [ 7] 1964 	ld	(bc), a
      0009FF 03               [ 6] 1965 	inc	bc
      000A00 7A               [ 4] 1966 	ld	a, d
      000A01 02               [ 7] 1967 	ld	(bc), a
      000A02                       1968 00103$:
                                   1969 ;tslmain.c:437: }
      000A02 DD F9            [10] 1970 	ld	sp, ix
      000A04 DD E1            [14] 1971 	pop	ix
      000A06 C9               [10] 1972 	ret
                                   1973 ;tslmain.c:439: byte cursor_in_view()
                                   1974 ;	---------------------------------
                                   1975 ; Function cursor_in_view
                                   1976 ; ---------------------------------
      000A07                       1977 _cursor_in_view::
      000A07 DD E5            [15] 1978 	push	ix
      000A09 DD 21 00 00      [14] 1979 	ld	ix,#0
      000A0D DD 39            [15] 1980 	add	ix,sp
      000A0F F5               [11] 1981 	push	af
      000A10 F5               [11] 1982 	push	af
                                   1983 ;tslmain.c:442: visual_cursor(1, &v);
      000A11 21 00 00         [10] 1984 	ld	hl, #0
      000A14 39               [11] 1985 	add	hl, sp
      000A15 5D               [ 4] 1986 	ld	e, l
      000A16 54               [ 4] 1987 	ld	d, h
      000A17 E5               [11] 1988 	push	hl
      000A18 3E 01            [ 7] 1989 	ld	a, #0x01
      000A1A CDrA3r09         [17] 1990 	call	_visual_cursor
      000A1D E1               [10] 1991 	pop	hl
                                   1992 ;tslmain.c:443: if (v.x >= 0 && v.y >= 0 && v.x < (W - 2) && v.y < (H - 4))
      000A1E 4E               [ 7] 1993 	ld	c, (hl)
      000A1F 23               [ 6] 1994 	inc	hl
      000A20 46               [ 7] 1995 	ld	b, (hl)
      000A21 2B               [ 6] 1996 	dec	hl
      000A22 50               [ 4] 1997 	ld	d, b
      000A23 CB 7A            [ 8] 1998 	bit	7, d
      000A25 20 24            [12] 1999 	jr	NZ, 00102$
      000A27 23               [ 6] 2000 	inc	hl
      000A28 23               [ 6] 2001 	inc	hl
      000A29 5E               [ 7] 2002 	ld	e, (hl)
      000A2A 23               [ 6] 2003 	inc	hl
      000A2B 56               [ 7] 2004 	ld	d, (hl)
                                   2005 ;	spillPairReg hl
                                   2006 ;	spillPairReg hl
      000A2C 62               [ 4] 2007 	ld	h, d
                                   2008 ;	spillPairReg hl
                                   2009 ;	spillPairReg hl
      000A2D CB 7C            [ 8] 2010 	bit	7, h
      000A2F 20 1A            [12] 2011 	jr	NZ, 00102$
      000A31 79               [ 4] 2012 	ld	a, c
      000A32 D6 4E            [ 7] 2013 	sub	a, #0x4e
      000A34 78               [ 4] 2014 	ld	a, b
      000A35 17               [ 4] 2015 	rla
      000A36 3F               [ 4] 2016 	ccf
      000A37 1F               [ 4] 2017 	rra
      000A38 DE 80            [ 7] 2018 	sbc	a, #0x80
      000A3A 30 0F            [12] 2019 	jr	NC, 00102$
      000A3C 7B               [ 4] 2020 	ld	a, e
      000A3D D6 1A            [ 7] 2021 	sub	a, #0x1a
      000A3F 7A               [ 4] 2022 	ld	a, d
      000A40 17               [ 4] 2023 	rla
      000A41 3F               [ 4] 2024 	ccf
      000A42 1F               [ 4] 2025 	rra
      000A43 DE 80            [ 7] 2026 	sbc	a, #0x80
      000A45 30 04            [12] 2027 	jr	NC, 00102$
                                   2028 ;tslmain.c:444: return 1;
      000A47 3E 01            [ 7] 2029 	ld	a, #0x01
      000A49 18 01            [12] 2030 	jr	00106$
      000A4B                       2031 00102$:
                                   2032 ;tslmain.c:445: return 0;
      000A4B AF               [ 4] 2033 	xor	a, a
      000A4C                       2034 00106$:
                                   2035 ;tslmain.c:446: }
      000A4C DD F9            [10] 2036 	ld	sp, ix
      000A4E DD E1            [14] 2037 	pop	ix
      000A50 C9               [10] 2038 	ret
                                   2039 ;tslmain.c:448: void eod_cursor(Cursor* c)
                                   2040 ;	---------------------------------
                                   2041 ; Function eod_cursor
                                   2042 ; ---------------------------------
      000A51                       2043 _eod_cursor::
                                   2044 ;tslmain.c:450: c->x = 0;
      000A51 36 00            [10] 2045 	ld	(hl), #0x00
      000A53 23               [ 6] 2046 	inc	hl
      000A54 36 00            [10] 2047 	ld	(hl), #0x00
                                   2048 ;tslmain.c:451: c->y = vector_size(document);
      000A56 23               [ 6] 2049 	inc	hl
      000A57 E5               [11] 2050 	push	hl
      000A58 2Ar00r00         [16] 2051 	ld	hl, (_document)
      000A5B CDr00r00         [17] 2052 	call	_vector_size
      000A5E E1               [10] 2053 	pop	hl
      000A5F 73               [ 7] 2054 	ld	(hl), e
      000A60 23               [ 6] 2055 	inc	hl
      000A61 72               [ 7] 2056 	ld	(hl), d
                                   2057 ;tslmain.c:452: }
      000A62 C9               [10] 2058 	ret
                                   2059 ;tslmain.c:454: void redraw_all()
                                   2060 ;	---------------------------------
                                   2061 ; Function redraw_all
                                   2062 ; ---------------------------------
      000A63                       2063 _redraw_all::
                                   2064 ;tslmain.c:456: redraw_start = 0;
      000A63 21 00 00         [10] 2065 	ld	hl, #0x0000
      000A66 22r54r01         [16] 2066 	ld	(_redraw_start), hl
                                   2067 ;tslmain.c:457: redraw_stop = 0x7000;
      000A69 26 70            [ 7] 2068 	ld	h, #0x70
      000A6B 22r56r01         [16] 2069 	ld	(_redraw_stop), hl
                                   2070 ;tslmain.c:458: }
      000A6E C9               [10] 2071 	ret
                                   2072 ;tslmain.c:460: void calculate_new_offset()
                                   2073 ;	---------------------------------
                                   2074 ; Function calculate_new_offset
                                   2075 ; ---------------------------------
      000A6F                       2076 _calculate_new_offset::
      000A6F DD E5            [15] 2077 	push	ix
      000A71 DD 21 00 00      [14] 2078 	ld	ix,#0
      000A75 DD 39            [15] 2079 	add	ix,sp
      000A77 F5               [11] 2080 	push	af
      000A78 F5               [11] 2081 	push	af
                                   2082 ;tslmain.c:463: visual_cursor(0,&v);
      000A79 21 00 00         [10] 2083 	ld	hl, #0
      000A7C 39               [11] 2084 	add	hl, sp
      000A7D EB               [ 4] 2085 	ex	de, hl
      000A7E AF               [ 4] 2086 	xor	a, a
      000A7F CDrA3r09         [17] 2087 	call	_visual_cursor
                                   2088 ;tslmain.c:464: if (v.x < (W >> 1)) v.x = 0;
      000A82 C1               [10] 2089 	pop	bc
      000A83 C5               [11] 2090 	push	bc
      000A84 79               [ 4] 2091 	ld	a, c
      000A85 D6 28            [ 7] 2092 	sub	a, #0x28
      000A87 78               [ 4] 2093 	ld	a, b
      000A88 17               [ 4] 2094 	rla
      000A89 3F               [ 4] 2095 	ccf
      000A8A 1F               [ 4] 2096 	rra
      000A8B DE 80            [ 7] 2097 	sbc	a, #0x80
      000A8D 30 09            [12] 2098 	jr	NC, 00102$
      000A8F AF               [ 4] 2099 	xor	a, a
      000A90 DD 77 FC         [19] 2100 	ld	-4 (ix), a
      000A93 DD 77 FD         [19] 2101 	ld	-3 (ix), a
      000A96 18 0C            [12] 2102 	jr	00103$
      000A98                       2103 00102$:
                                   2104 ;tslmain.c:465: else offset.x = v.x - (W >> 1);
      000A98 79               [ 4] 2105 	ld	a, c
      000A99 C6 D8            [ 7] 2106 	add	a, #0xd8
      000A9B 4F               [ 4] 2107 	ld	c, a
      000A9C 78               [ 4] 2108 	ld	a, b
      000A9D CE FF            [ 7] 2109 	adc	a, #0xff
      000A9F 47               [ 4] 2110 	ld	b, a
      000AA0 ED 43r48r01      [20] 2111 	ld	(_offset), bc
      000AA4                       2112 00103$:
                                   2113 ;tslmain.c:466: if (v.y < (H >> 1)) offset.y = 0;
      000AA4 E1               [10] 2114 	pop	hl
      000AA5 C1               [10] 2115 	pop	bc
      000AA6 C5               [11] 2116 	push	bc
      000AA7 E5               [11] 2117 	push	hl
      000AA8 79               [ 4] 2118 	ld	a, c
      000AA9 D6 0F            [ 7] 2119 	sub	a, #0x0f
      000AAB 78               [ 4] 2120 	ld	a, b
      000AAC 17               [ 4] 2121 	rla
      000AAD 3F               [ 4] 2122 	ccf
      000AAE 1F               [ 4] 2123 	rra
      000AAF DE 80            [ 7] 2124 	sbc	a, #0x80
      000AB1 30 08            [12] 2125 	jr	NC, 00105$
      000AB3 21 00 00         [10] 2126 	ld	hl, #0x0000
      000AB6 22r4Ar01         [16] 2127 	ld	((_offset + 2)), hl
      000AB9 18 0C            [12] 2128 	jr	00106$
      000ABB                       2129 00105$:
                                   2130 ;tslmain.c:467: else offset.y = v.y - (H >> 1);
      000ABB 79               [ 4] 2131 	ld	a, c
      000ABC C6 F1            [ 7] 2132 	add	a, #0xf1
      000ABE 4F               [ 4] 2133 	ld	c, a
      000ABF 78               [ 4] 2134 	ld	a, b
      000AC0 CE FF            [ 7] 2135 	adc	a, #0xff
      000AC2 47               [ 4] 2136 	ld	b, a
      000AC3 ED 43r4Ar01      [20] 2137 	ld	((_offset + 2)), bc
      000AC7                       2138 00106$:
                                   2139 ;tslmain.c:468: draw_frame();
      000AC7 CDrAEr06         [17] 2140 	call	_draw_frame
                                   2141 ;tslmain.c:469: redraw_all();
      000ACA CDr63r0A         [17] 2142 	call	_redraw_all
                                   2143 ;tslmain.c:470: }
      000ACD DD F9            [10] 2144 	ld	sp, ix
      000ACF DD E1            [14] 2145 	pop	ix
      000AD1 C9               [10] 2146 	ret
                                   2147 ;tslmain.c:472: void place_cursor()
                                   2148 ;	---------------------------------
                                   2149 ; Function place_cursor
                                   2150 ; ---------------------------------
      000AD2                       2151 _place_cursor::
      000AD2 DD E5            [15] 2152 	push	ix
      000AD4 DD 21 00 00      [14] 2153 	ld	ix,#0
      000AD8 DD 39            [15] 2154 	add	ix,sp
      000ADA F5               [11] 2155 	push	af
      000ADB F5               [11] 2156 	push	af
                                   2157 ;tslmain.c:474: if (cursor_in_view() == 0) calculate_new_offset();
      000ADC CDr07r0A         [17] 2158 	call	_cursor_in_view
      000ADF B7               [ 4] 2159 	or	a, a
      000AE0 20 03            [12] 2160 	jr	NZ, 00102$
      000AE2 CDr6Fr0A         [17] 2161 	call	_calculate_new_offset
      000AE5                       2162 00102$:
                                   2163 ;tslmain.c:476: visual_cursor(1,&v);
      000AE5 21 00 00         [10] 2164 	ld	hl, #0
      000AE8 39               [11] 2165 	add	hl, sp
      000AE9 EB               [ 4] 2166 	ex	de, hl
      000AEA 3E 01            [ 7] 2167 	ld	a, #0x01
      000AEC CDrA3r09         [17] 2168 	call	_visual_cursor
                                   2169 ;tslmain.c:477: hal_move(v.x + 1, v.y + 2);
      000AEF E1               [10] 2170 	pop	hl
      000AF0 D1               [10] 2171 	pop	de
      000AF1 D5               [11] 2172 	push	de
      000AF2 E5               [11] 2173 	push	hl
      000AF3 13               [ 6] 2174 	inc	de
      000AF4 13               [ 6] 2175 	inc	de
      000AF5 E1               [10] 2176 	pop	hl
      000AF6 E5               [11] 2177 	push	hl
      000AF7 23               [ 6] 2178 	inc	hl
      000AF8 CDr00r00         [17] 2179 	call	_hal_move
                                   2180 ;tslmain.c:478: }
      000AFB DD F9            [10] 2181 	ld	sp, ix
      000AFD DD E1            [14] 2182 	pop	ix
      000AFF C9               [10] 2183 	ret
                                   2184 ;tslmain.c:480: void decimal_string(byte* buffer, short length, word value)
                                   2185 ;	---------------------------------
                                   2186 ; Function decimal_string
                                   2187 ; ---------------------------------
      000B00                       2188 _decimal_string::
      000B00 DD E5            [15] 2189 	push	ix
      000B02 DD 21 00 00      [14] 2190 	ld	ix,#0
      000B06 DD 39            [15] 2191 	add	ix,sp
      000B08 F5               [11] 2192 	push	af
      000B09 F5               [11] 2193 	push	af
      000B0A 3B               [ 6] 2194 	dec	sp
      000B0B 4D               [ 4] 2195 	ld	c, l
      000B0C 44               [ 4] 2196 	ld	b, h
                                   2197 ;tslmain.c:482: short index = length - 1;
      000B0D 1B               [ 6] 2198 	dec	de
                                   2199 ;tslmain.c:483: while (value > 0)
      000B0E                       2200 00101$:
      000B0E DD 7E 05         [19] 2201 	ld	a, 5 (ix)
      000B11 DD B6 04         [19] 2202 	or	a, 4 (ix)
      000B14 28 40            [12] 2203 	jr	Z, 00112$
                                   2204 ;tslmain.c:486: dm.a = value;
      000B16 DD 7E 04         [19] 2205 	ld	a, 4 (ix)
      000B19 DD 77 FB         [19] 2206 	ld	-5 (ix), a
      000B1C DD 7E 05         [19] 2207 	ld	a, 5 (ix)
      000B1F DD 77 FC         [19] 2208 	ld	-4 (ix), a
                                   2209 ;tslmain.c:487: dm.b = 10;
      000B22 DD 36 FD 0A      [19] 2210 	ld	-3 (ix), #0x0a
                                   2211 ;tslmain.c:488: div_mod(&dm);
      000B26 C5               [11] 2212 	push	bc
      000B27 D5               [11] 2213 	push	de
      000B28 21 04 00         [10] 2214 	ld	hl, #4
      000B2B 39               [11] 2215 	add	hl, sp
      000B2C CDr00r00         [17] 2216 	call	_div_mod
      000B2F D1               [10] 2217 	pop	de
      000B30 C1               [10] 2218 	pop	bc
                                   2219 ;tslmain.c:489: buffer[index--] = (byte)(48 + dm.b);
      000B31 79               [ 4] 2220 	ld	a, c
      000B32 83               [ 4] 2221 	add	a, e
      000B33 DD 77 FE         [19] 2222 	ld	-2 (ix), a
      000B36 78               [ 4] 2223 	ld	a, b
      000B37 8A               [ 4] 2224 	adc	a, d
      000B38 DD 77 FF         [19] 2225 	ld	-1 (ix), a
      000B3B 1B               [ 6] 2226 	dec	de
      000B3C DD 7E FD         [19] 2227 	ld	a, -3 (ix)
      000B3F C6 30            [ 7] 2228 	add	a, #0x30
      000B41 DD 6E FE         [19] 2229 	ld	l, -2 (ix)
      000B44 DD 66 FF         [19] 2230 	ld	h, -1 (ix)
      000B47 77               [ 7] 2231 	ld	(hl), a
                                   2232 ;tslmain.c:490: value=dm.a;
      000B48 DD 7E FB         [19] 2233 	ld	a, -5 (ix)
      000B4B DD 77 04         [19] 2234 	ld	4 (ix), a
      000B4E DD 7E FC         [19] 2235 	ld	a, -4 (ix)
      000B51 DD 77 05         [19] 2236 	ld	5 (ix), a
      000B54 18 B8            [12] 2237 	jr	00101$
                                   2238 ;tslmain.c:492: while (index >= 0)
      000B56                       2239 00112$:
      000B56                       2240 00104$:
                                   2241 ;	spillPairReg hl
                                   2242 ;	spillPairReg hl
      000B56 62               [ 4] 2243 	ld	h, d
                                   2244 ;	spillPairReg hl
                                   2245 ;	spillPairReg hl
      000B57 CB 7C            [ 8] 2246 	bit	7, h
      000B59 20 08            [12] 2247 	jr	NZ, 00107$
                                   2248 ;tslmain.c:493: buffer[index--] = 48;
      000B5B 69               [ 4] 2249 	ld	l, c
      000B5C 60               [ 4] 2250 	ld	h, b
      000B5D 19               [11] 2251 	add	hl, de
      000B5E 1B               [ 6] 2252 	dec	de
      000B5F 36 30            [10] 2253 	ld	(hl), #0x30
      000B61 18 F3            [12] 2254 	jr	00104$
      000B63                       2255 00107$:
                                   2256 ;tslmain.c:494: }
      000B63 DD F9            [10] 2257 	ld	sp, ix
      000B65 DD E1            [14] 2258 	pop	ix
      000B67 E1               [10] 2259 	pop	hl
      000B68 F1               [10] 2260 	pop	af
      000B69 E9               [ 4] 2261 	jp	(hl)
                                   2262 ;tslmain.c:496: void draw_number(word value)
                                   2263 ;	---------------------------------
                                   2264 ; Function draw_number
                                   2265 ; ---------------------------------
      000B6A                       2266 _draw_number::
      000B6A DD E5            [15] 2267 	push	ix
      000B6C DD 21 00 00      [14] 2268 	ld	ix,#0
      000B70 DD 39            [15] 2269 	add	ix,sp
      000B72 FD 21 F8 FF      [14] 2270 	ld	iy, #-8
      000B76 FD 39            [15] 2271 	add	iy, sp
      000B78 FD F9            [10] 2272 	ld	sp, iy
      000B7A EB               [ 4] 2273 	ex	de, hl
                                   2274 ;tslmain.c:499: buffer[7] = 0;
      000B7B DD 36 FF 00      [19] 2275 	ld	-1 (ix), #0x00
                                   2276 ;tslmain.c:500: decimal_string(buffer, 7, value);
      000B7F D5               [11] 2277 	push	de
      000B80 11 07 00         [10] 2278 	ld	de, #0x0007
      000B83 21 02 00         [10] 2279 	ld	hl, #2
      000B86 39               [11] 2280 	add	hl, sp
      000B87 CDr00r0B         [17] 2281 	call	_decimal_string
                                   2282 ;tslmain.c:501: byte* ptr = buffer;
      000B8A 21 00 00         [10] 2283 	ld	hl, #0
      000B8D 39               [11] 2284 	add	hl, sp
                                   2285 ;tslmain.c:504: hal_draw_char(*ptr);
      000B8E                       2286 00104$:
                                   2287 ;tslmain.c:502: for (; *ptr == 48; ++ptr);
      000B8E 7E               [ 7] 2288 	ld	a, (hl)
      000B8F D6 30            [ 7] 2289 	sub	a, #0x30
      000B91 20 03            [12] 2290 	jr	NZ, 00114$
      000B93 23               [ 6] 2291 	inc	hl
      000B94 18 F8            [12] 2292 	jr	00104$
      000B96                       2293 00114$:
      000B96                       2294 00107$:
                                   2295 ;tslmain.c:503: for (; *ptr; ++ptr)
      000B96 4E               [ 7] 2296 	ld	c, (hl)
      000B97 79               [ 4] 2297 	ld	a, c
      000B98 B7               [ 4] 2298 	or	a, a
      000B99 28 09            [12] 2299 	jr	Z, 00109$
                                   2300 ;tslmain.c:504: hal_draw_char(*ptr);
      000B9B E5               [11] 2301 	push	hl
      000B9C 79               [ 4] 2302 	ld	a, c
      000B9D CDr00r00         [17] 2303 	call	_hal_draw_char
      000BA0 E1               [10] 2304 	pop	hl
                                   2305 ;tslmain.c:503: for (; *ptr; ++ptr)
      000BA1 23               [ 6] 2306 	inc	hl
      000BA2 18 F2            [12] 2307 	jr	00107$
      000BA4                       2308 00109$:
                                   2309 ;tslmain.c:505: }
      000BA4 DD F9            [10] 2310 	ld	sp, ix
      000BA6 DD E1            [14] 2311 	pop	ix
      000BA8 C9               [10] 2312 	ret
                                   2313 ;tslmain.c:507: void draw_cursor_position()
                                   2314 ;	---------------------------------
                                   2315 ; Function draw_cursor_position
                                   2316 ; ---------------------------------
      000BA9                       2317 _draw_cursor_position::
                                   2318 ;tslmain.c:509: hal_move(5, H - 2);
      000BA9 11 1C 00         [10] 2319 	ld	de, #0x001c
      000BAC 21 05 00         [10] 2320 	ld	hl, #0x0005
      000BAF CDr00r00         [17] 2321 	call	_hal_move
                                   2322 ;tslmain.c:511: hal_draw_char(' ');
      000BB2 3E 20            [ 7] 2323 	ld	a, #0x20
      000BB4 CDr00r00         [17] 2324 	call	_hal_draw_char
                                   2325 ;tslmain.c:512: draw_number(cursor.x + 1);
      000BB7 2Ar44r01         [16] 2326 	ld	hl, (#_cursor + 0)
      000BBA 23               [ 6] 2327 	inc	hl
      000BBB CDr6Ar0B         [17] 2328 	call	_draw_number
                                   2329 ;tslmain.c:513: hal_draw_char(':');
      000BBE 3E 3A            [ 7] 2330 	ld	a, #0x3a
      000BC0 CDr00r00         [17] 2331 	call	_hal_draw_char
                                   2332 ;tslmain.c:514: draw_number(cursor.y + 1);
      000BC3 2Ar46r01         [16] 2333 	ld	hl, (#(_cursor + 2) + 0)
      000BC6 23               [ 6] 2334 	inc	hl
      000BC7 CDr6Ar0B         [17] 2335 	call	_draw_number
                                   2336 ;tslmain.c:515: hal_draw_char(' ');
      000BCA 3E 20            [ 7] 2337 	ld	a, #0x20
      000BCC CDr00r00         [17] 2338 	call	_hal_draw_char
                                   2339 ;tslmain.c:517: for (byte i = 0; i < 5; ++i)
      000BCF 0E 00            [ 7] 2340 	ld	c, #0x00
      000BD1                       2341 00103$:
      000BD1 79               [ 4] 2342 	ld	a, c
      000BD2 D6 05            [ 7] 2343 	sub	a, #0x05
      000BD4 D0               [11] 2344 	ret	NC
                                   2345 ;tslmain.c:518: hal_draw_char(HORZ);
      000BD5 3Ar3Er00         [13] 2346 	ld	a, (_HORZ+0)
      000BD8 47               [ 4] 2347 	ld	b, a
      000BD9 C5               [11] 2348 	push	bc
      000BDA 78               [ 4] 2349 	ld	a, b
      000BDB CDr00r00         [17] 2350 	call	_hal_draw_char
      000BDE C1               [10] 2351 	pop	bc
                                   2352 ;tslmain.c:517: for (byte i = 0; i < 5; ++i)
      000BDF 0C               [ 4] 2353 	inc	c
                                   2354 ;tslmain.c:519: }
      000BE0 18 EF            [12] 2355 	jr	00103$
                                   2356 ;tslmain.c:521: void draw_screen()
                                   2357 ;	---------------------------------
                                   2358 ; Function draw_screen
                                   2359 ; ---------------------------------
      000BE2                       2360 _draw_screen::
                                   2361 ;tslmain.c:523: if (offset.y > redraw_start)
      000BE2 ED 4Br4Ar01      [20] 2362 	ld	bc, (#(_offset + 2) + 0)
      000BE6 21r54r01         [10] 2363 	ld	hl, #_redraw_start
      000BE9 7E               [ 7] 2364 	ld	a, (hl)
      000BEA 23               [ 6] 2365 	inc	hl
      000BEB 91               [ 4] 2366 	sub	a, c
      000BEC 7E               [ 7] 2367 	ld	a, (hl)
      000BED 98               [ 4] 2368 	sbc	a, b
      000BEE E2rF3r0B         [10] 2369 	jp	PO, 00132$
      000BF1 EE 80            [ 7] 2370 	xor	a, #0x80
      000BF3                       2371 00132$:
      000BF3 F2rFAr0B         [10] 2372 	jp	P, 00102$
                                   2373 ;tslmain.c:525: redraw_start = offset.y;
      000BF6 ED 43r54r01      [20] 2374 	ld	(_redraw_start), bc
      000BFA                       2375 00102$:
                                   2376 ;tslmain.c:527: for (short y = redraw_start; y < redraw_stop; ++y)
      000BFA ED 4Br54r01      [20] 2377 	ld	bc, (_redraw_start)
      000BFE                       2378 00107$:
      000BFE 21r56r01         [10] 2379 	ld	hl, #_redraw_stop
      000C01 79               [ 4] 2380 	ld	a, c
      000C02 96               [ 7] 2381 	sub	a, (hl)
      000C03 23               [ 6] 2382 	inc	hl
      000C04 78               [ 4] 2383 	ld	a, b
      000C05 9E               [ 7] 2384 	sbc	a, (hl)
      000C06 E2r0Br0C         [10] 2385 	jp	PO, 00133$
      000C09 EE 80            [ 7] 2386 	xor	a, #0x80
      000C0B                       2387 00133$:
      000C0B F2r1Br0C         [10] 2388 	jp	P, 00105$
                                   2389 ;tslmain.c:529: if (!draw_line(y)) break;
      000C0E C5               [11] 2390 	push	bc
      000C0F 69               [ 4] 2391 	ld	l, c
                                   2392 ;	spillPairReg hl
                                   2393 ;	spillPairReg hl
      000C10 60               [ 4] 2394 	ld	h, b
                                   2395 ;	spillPairReg hl
                                   2396 ;	spillPairReg hl
      000C11 CDrB2r07         [17] 2397 	call	_draw_line
      000C14 C1               [10] 2398 	pop	bc
      000C15 B7               [ 4] 2399 	or	a, a
      000C16 28 03            [12] 2400 	jr	Z, 00105$
                                   2401 ;tslmain.c:527: for (short y = redraw_start; y < redraw_stop; ++y)
      000C18 03               [ 6] 2402 	inc	bc
      000C19 18 E3            [12] 2403 	jr	00107$
      000C1B                       2404 00105$:
                                   2405 ;tslmain.c:531: redraw_stop = redraw_start;
      000C1B 2Ar54r01         [16] 2406 	ld	hl, (_redraw_start)
      000C1E 22r56r01         [16] 2407 	ld	(_redraw_stop), hl
                                   2408 ;tslmain.c:532: draw_cursor_position();
      000C21 CDrA9r0B         [17] 2409 	call	_draw_cursor_position
                                   2410 ;tslmain.c:533: place_cursor();
                                   2411 ;tslmain.c:534: }
      000C24 C3rD2r0A         [10] 2412 	jp	_place_cursor
                                   2413 ;tslmain.c:536: word visual_to_logical(Vector* line, word visual)
                                   2414 ;	---------------------------------
                                   2415 ; Function visual_to_logical
                                   2416 ; ---------------------------------
      000C27                       2417 _visual_to_logical::
      000C27 DD E5            [15] 2418 	push	ix
      000C29 DD 21 00 00      [14] 2419 	ld	ix,#0
      000C2D DD 39            [15] 2420 	add	ix,sp
      000C2F FD 21 F6 FF      [14] 2421 	ld	iy, #-10
      000C33 FD 39            [15] 2422 	add	iy, sp
      000C35 FD F9            [10] 2423 	ld	sp, iy
      000C37 DD 73 FA         [19] 2424 	ld	-6 (ix), e
      000C3A DD 72 FB         [19] 2425 	ld	-5 (ix), d
                                   2426 ;tslmain.c:538: word n = vector_size(line);
      000C3D E5               [11] 2427 	push	hl
      000C3E CDr00r00         [17] 2428 	call	_vector_size
      000C41 E1               [10] 2429 	pop	hl
      000C42 33               [ 6] 2430 	inc	sp
      000C43 33               [ 6] 2431 	inc	sp
      000C44 D5               [11] 2432 	push	de
                                   2433 ;tslmain.c:539: const byte* data = vector_access(line, 0);
      000C45 11 00 00         [10] 2434 	ld	de, #0x0000
      000C48 CDr00r00         [17] 2435 	call	_vector_access
      000C4B DD 73 F8         [19] 2436 	ld	-8 (ix), e
      000C4E DD 72 F9         [19] 2437 	ld	-7 (ix), d
                                   2438 ;tslmain.c:540: word x = 0;
      000C51 01 00 00         [10] 2439 	ld	bc, #0x0000
                                   2440 ;tslmain.c:541: for (word i = 0; i < n; ++i)
      000C54 AF               [ 4] 2441 	xor	a, a
      000C55 DD 77 FE         [19] 2442 	ld	-2 (ix), a
      000C58 DD 77 FF         [19] 2443 	ld	-1 (ix), a
      000C5B AF               [ 4] 2444 	xor	a, a
      000C5C DD 77 FC         [19] 2445 	ld	-4 (ix), a
      000C5F DD 77 FD         [19] 2446 	ld	-3 (ix), a
      000C62                       2447 00110$:
      000C62 DD 7E FC         [19] 2448 	ld	a, -4 (ix)
      000C65 DD 96 F6         [19] 2449 	sub	a, -10 (ix)
      000C68 DD 7E FD         [19] 2450 	ld	a, -3 (ix)
      000C6B DD 9E F7         [19] 2451 	sbc	a, -9 (ix)
      000C6E 30 59            [12] 2452 	jr	NC, 00108$
                                   2453 ;tslmain.c:543: if (x >= visual) return i;
      000C70 79               [ 4] 2454 	ld	a, c
      000C71 DD 96 FA         [19] 2455 	sub	a, -6 (ix)
      000C74 78               [ 4] 2456 	ld	a, b
      000C75 DD 9E FB         [19] 2457 	sbc	a, -5 (ix)
      000C78 38 08            [12] 2458 	jr	C, 00102$
      000C7A DD 5E FE         [19] 2459 	ld	e, -2 (ix)
      000C7D DD 56 FF         [19] 2460 	ld	d, -1 (ix)
      000C80 18 49            [12] 2461 	jr	00112$
      000C82                       2462 00102$:
                                   2463 ;tslmain.c:544: ++x;
      000C82 03               [ 6] 2464 	inc	bc
                                   2465 ;tslmain.c:545: if (data[i] == 9)
      000C83 DD 7E FC         [19] 2466 	ld	a, -4 (ix)
      000C86 DD 86 F8         [19] 2467 	add	a, -8 (ix)
      000C89 5F               [ 4] 2468 	ld	e, a
      000C8A DD 7E FD         [19] 2469 	ld	a, -3 (ix)
      000C8D DD 8E F9         [19] 2470 	adc	a, -7 (ix)
      000C90 57               [ 4] 2471 	ld	d, a
      000C91 1A               [ 7] 2472 	ld	a, (de)
      000C92 D6 09            [ 7] 2473 	sub	a, #0x09
      000C94 20 1D            [12] 2474 	jr	NZ, 00111$
                                   2475 ;tslmain.c:547: while ((x & 3) != 0) ++x;
      000C96 DD 71 FE         [19] 2476 	ld	-2 (ix), c
      000C99 DD 70 FF         [19] 2477 	ld	-1 (ix), b
      000C9C                       2478 00103$:
      000C9C DD 7E FE         [19] 2479 	ld	a, -2 (ix)
      000C9F E6 03            [ 7] 2480 	and	a, #0x03
      000CA1 28 0A            [12] 2481 	jr	Z, 00119$
      000CA3 DD 34 FE         [23] 2482 	inc	-2 (ix)
      000CA6 20 F4            [12] 2483 	jr	NZ, 00103$
      000CA8 DD 34 FF         [23] 2484 	inc	-1 (ix)
      000CAB 18 EF            [12] 2485 	jr	00103$
      000CAD                       2486 00119$:
      000CAD DD 4E FE         [19] 2487 	ld	c, -2 (ix)
      000CB0 DD 46 FF         [19] 2488 	ld	b, -1 (ix)
      000CB3                       2489 00111$:
                                   2490 ;tslmain.c:541: for (word i = 0; i < n; ++i)
      000CB3 DD 34 FC         [23] 2491 	inc	-4 (ix)
      000CB6 20 03            [12] 2492 	jr	NZ, 00148$
      000CB8 DD 34 FD         [23] 2493 	inc	-3 (ix)
      000CBB                       2494 00148$:
      000CBB DD 7E FC         [19] 2495 	ld	a, -4 (ix)
      000CBE DD 77 FE         [19] 2496 	ld	-2 (ix), a
      000CC1 DD 7E FD         [19] 2497 	ld	a, -3 (ix)
      000CC4 DD 77 FF         [19] 2498 	ld	-1 (ix), a
      000CC7 18 99            [12] 2499 	jr	00110$
      000CC9                       2500 00108$:
                                   2501 ;tslmain.c:550: return n;
      000CC9 D1               [10] 2502 	pop	de
      000CCA D5               [11] 2503 	push	de
      000CCB                       2504 00112$:
                                   2505 ;tslmain.c:551: }
      000CCB DD F9            [10] 2506 	ld	sp, ix
      000CCD DD E1            [14] 2507 	pop	ix
      000CCF C9               [10] 2508 	ret
                                   2509 ;tslmain.c:553: void move_x_cursor(short dx)
                                   2510 ;	---------------------------------
                                   2511 ; Function move_x_cursor
                                   2512 ; ---------------------------------
      000CD0                       2513 _move_x_cursor::
      000CD0 4D               [ 4] 2514 	ld	c, l
      000CD1 44               [ 4] 2515 	ld	b, h
                                   2516 ;tslmain.c:555: if (dx==0 || cursor.y<0 || cursor.y >= vector_size(document)) return;
      000CD2 78               [ 4] 2517 	ld	a, b
      000CD3 B1               [ 4] 2518 	or	a, c
      000CD4 C8               [11] 2519 	ret	Z
      000CD5 2Ar46r01         [16] 2520 	ld	hl, (#(_cursor + 2) + 0)
      000CD8 54               [ 4] 2521 	ld	d, h
      000CD9 CB 7A            [ 8] 2522 	bit	7, d
      000CDB C0               [11] 2523 	ret	NZ
      000CDC E5               [11] 2524 	push	hl
      000CDD C5               [11] 2525 	push	bc
      000CDE 2Ar00r00         [16] 2526 	ld	hl, (_document)
      000CE1 CDr00r00         [17] 2527 	call	_vector_size
      000CE4 C1               [10] 2528 	pop	bc
      000CE5 E1               [10] 2529 	pop	hl
      000CE6 AF               [ 4] 2530 	xor	a, a
      000CE7 ED 52            [15] 2531 	sbc	hl, de
      000CE9 D0               [11] 2532 	ret	NC
                                   2533 ;tslmain.c:556: Vector* line = get_line(cursor.y);
      000CEA 2Ar46r01         [16] 2534 	ld	hl, (#(_cursor + 2) + 0)
      000CED C5               [11] 2535 	push	bc
      000CEE CDrA9r03         [17] 2536 	call	_get_line
      000CF1 C1               [10] 2537 	pop	bc
                                   2538 ;tslmain.c:557: cursor.x += dx;
      000CF2 2Ar44r01         [16] 2539 	ld	hl, (#_cursor + 0)
      000CF5 09               [11] 2540 	add	hl, bc
      000CF6 4D               [ 4] 2541 	ld	c, l
      000CF7 44               [ 4] 2542 	ld	b, h
      000CF8 ED 43r44r01      [20] 2543 	ld	(_cursor), bc
                                   2544 ;tslmain.c:558: if (cursor.x < 0) cursor.x = 0;
      000CFC CB 78            [ 8] 2545 	bit	7, b
      000CFE 28 06            [12] 2546 	jr	Z, 00106$
      000D00 21 00 00         [10] 2547 	ld	hl, #0x0000
      000D03 22r44r01         [16] 2548 	ld	(_cursor), hl
      000D06                       2549 00106$:
                                   2550 ;tslmain.c:559: short n = vector_size(line);
      000D06 EB               [ 4] 2551 	ex	de, hl
      000D07 CDr00r00         [17] 2552 	call	_vector_size
                                   2553 ;tslmain.c:560: if (cursor.x >= n) cursor.x = n;
      000D0A 2Ar44r01         [16] 2554 	ld	hl, (#_cursor + 0)
      000D0D 7D               [ 4] 2555 	ld	a, l
      000D0E 93               [ 4] 2556 	sub	a, e
      000D0F 7C               [ 4] 2557 	ld	a, h
      000D10 9A               [ 4] 2558 	sbc	a, d
      000D11 E2r16r0D         [10] 2559 	jp	PO, 00131$
      000D14 EE 80            [ 7] 2560 	xor	a, #0x80
      000D16                       2561 00131$:
      000D16 FArD2r0A         [10] 2562 	jp	M,_place_cursor
      000D19 ED 53r44r01      [20] 2563 	ld	(_cursor), de
                                   2564 ;tslmain.c:561: place_cursor();
                                   2565 ;tslmain.c:562: }
      000D1D C3rD2r0A         [10] 2566 	jp	_place_cursor
                                   2567 ;tslmain.c:577: byte is_move_key(word key)
                                   2568 ;	---------------------------------
                                   2569 ; Function is_move_key
                                   2570 ; ---------------------------------
      000D20                       2571 _is_move_key::
                                   2572 ;tslmain.c:579: if (key >= 0x100)
                                   2573 ;tslmain.c:581: byte b = (key >> 8) & 0x3F;
      000D20 7C               [ 4] 2574 	ld	a,h
      000D21 FE 01            [ 7] 2575 	cp	a,#0x01
      000D23 38 0D            [12] 2576 	jr	C, 00102$
                                   2577 ;tslmain.c:582: return (b > 0 && b < 9);
      000D25 E6 3F            [ 7] 2578 	and	a,#0x3f
      000D27 28 04            [12] 2579 	jr	Z, 00105$
      000D29 D6 09            [ 7] 2580 	sub	a, #0x09
      000D2B 38 02            [12] 2581 	jr	C, 00106$
      000D2D                       2582 00105$:
      000D2D AF               [ 4] 2583 	xor	a, a
      000D2E C9               [10] 2584 	ret
      000D2F                       2585 00106$:
      000D2F 3E 01            [ 7] 2586 	ld	a, #0x01
      000D31 C9               [10] 2587 	ret
      000D32                       2588 00102$:
                                   2589 ;tslmain.c:584: return 0;
      000D32 AF               [ 4] 2590 	xor	a, a
                                   2591 ;tslmain.c:585: }
      000D33 C9               [10] 2592 	ret
                                   2593 ;tslmain.c:587: void join_prev_line()
                                   2594 ;	---------------------------------
                                   2595 ; Function join_prev_line
                                   2596 ; ---------------------------------
      000D34                       2597 _join_prev_line::
      000D34 DD E5            [15] 2598 	push	ix
      000D36 DD 21 00 00      [14] 2599 	ld	ix,#0
      000D3A DD 39            [15] 2600 	add	ix,sp
      000D3C 21 F8 FF         [10] 2601 	ld	hl, #-8
      000D3F 39               [11] 2602 	add	hl, sp
      000D40 F9               [ 6] 2603 	ld	sp, hl
                                   2604 ;tslmain.c:589: Vector* prev_line = get_line(cursor.y - 1);
      000D41 2Ar46r01         [16] 2605 	ld	hl, (#(_cursor + 2) + 0)
      000D44 2B               [ 6] 2606 	dec	hl
      000D45 CDrA9r03         [17] 2607 	call	_get_line
      000D48 33               [ 6] 2608 	inc	sp
      000D49 33               [ 6] 2609 	inc	sp
      000D4A D5               [11] 2610 	push	de
                                   2611 ;tslmain.c:590: Vector* cur_line = get_line(cursor.y);
      000D4B 2Ar46r01         [16] 2612 	ld	hl, (#(_cursor + 2) + 0)
      000D4E CDrA9r03         [17] 2613 	call	_get_line
                                   2614 ;tslmain.c:591: word m = vector_size(prev_line);
      000D51 E1               [10] 2615 	pop	hl
      000D52 E5               [11] 2616 	push	hl
      000D53 D5               [11] 2617 	push	de
      000D54 CDr00r00         [17] 2618 	call	_vector_size
      000D57 E1               [10] 2619 	pop	hl
      000D58 DD 73 FA         [19] 2620 	ld	-6 (ix), e
      000D5B DD 72 FB         [19] 2621 	ld	-5 (ix), d
                                   2622 ;tslmain.c:592: word n = vector_size(cur_line);
      000D5E E5               [11] 2623 	push	hl
      000D5F CDr00r00         [17] 2624 	call	_vector_size
      000D62 E1               [10] 2625 	pop	hl
      000D63 DD 73 FC         [19] 2626 	ld	-4 (ix), e
      000D66 DD 72 FD         [19] 2627 	ld	-3 (ix), d
                                   2628 ;tslmain.c:593: byte* data = vector_access(cur_line, 0);
      000D69 E5               [11] 2629 	push	hl
      000D6A 11 00 00         [10] 2630 	ld	de, #0x0000
      000D6D CDr00r00         [17] 2631 	call	_vector_access
      000D70 E1               [10] 2632 	pop	hl
      000D71 DD 73 FE         [19] 2633 	ld	-2 (ix), e
      000D74 DD 72 FF         [19] 2634 	ld	-1 (ix), d
                                   2635 ;tslmain.c:594: for (word i = 0; i < n; ++i)
      000D77 01 00 00         [10] 2636 	ld	bc, #0x0000
      000D7A                       2637 00103$:
      000D7A 79               [ 4] 2638 	ld	a, c
      000D7B DD 96 FC         [19] 2639 	sub	a, -4 (ix)
      000D7E 78               [ 4] 2640 	ld	a, b
      000D7F DD 9E FD         [19] 2641 	sbc	a, -3 (ix)
      000D82 30 1A            [12] 2642 	jr	NC, 00101$
                                   2643 ;tslmain.c:595: vector_push(prev_line, &data[i]);
      000D84 DD 7E FE         [19] 2644 	ld	a, -2 (ix)
      000D87 81               [ 4] 2645 	add	a, c
      000D88 5F               [ 4] 2646 	ld	e, a
      000D89 DD 7E FF         [19] 2647 	ld	a, -1 (ix)
      000D8C 88               [ 4] 2648 	adc	a, b
      000D8D 57               [ 4] 2649 	ld	d, a
      000D8E E5               [11] 2650 	push	hl
      000D8F C5               [11] 2651 	push	bc
      000D90 DD 6E F8         [19] 2652 	ld	l, -8 (ix)
                                   2653 ;	spillPairReg hl
                                   2654 ;	spillPairReg hl
      000D93 DD 66 F9         [19] 2655 	ld	h, -7 (ix)
                                   2656 ;	spillPairReg hl
                                   2657 ;	spillPairReg hl
      000D96 CDr00r00         [17] 2658 	call	_vector_push
      000D99 C1               [10] 2659 	pop	bc
      000D9A E1               [10] 2660 	pop	hl
                                   2661 ;tslmain.c:594: for (word i = 0; i < n; ++i)
      000D9B 03               [ 6] 2662 	inc	bc
      000D9C 18 DC            [12] 2663 	jr	00103$
      000D9E                       2664 00101$:
                                   2665 ;tslmain.c:596: vector_shut(cur_line);
      000D9E CDr00r00         [17] 2666 	call	_vector_shut
                                   2667 ;tslmain.c:597: vector_erase(document, cursor.y);
      000DA1 ED 5Br46r01      [20] 2668 	ld	de, (#(_cursor + 2) + 0)
      000DA5 2Ar00r00         [16] 2669 	ld	hl, (_document)
      000DA8 CDr00r00         [17] 2670 	call	_vector_erase
                                   2671 ;tslmain.c:598: cursor.y--;
      000DAB ED 4Br46r01      [20] 2672 	ld	bc, (#(_cursor + 2) + 0)
      000DAF 0B               [ 6] 2673 	dec	bc
      000DB0 ED 43r46r01      [20] 2674 	ld	((_cursor + 2)), bc
                                   2675 ;tslmain.c:599: cursor.x = logical_to_visual(prev_line, m);
      000DB4 E1               [10] 2676 	pop	hl
      000DB5 D1               [10] 2677 	pop	de
      000DB6 D5               [11] 2678 	push	de
      000DB7 E5               [11] 2679 	push	hl
      000DB8 CDrA8r01         [17] 2680 	call	_logical_to_visual
      000DBB ED 53r44r01      [20] 2681 	ld	(_cursor), de
                                   2682 ;tslmain.c:600: }
      000DBF DD F9            [10] 2683 	ld	sp, ix
      000DC1 DD E1            [14] 2684 	pop	ix
      000DC3 C9               [10] 2685 	ret
                                   2686 ;tslmain.c:602: byte delete_single_line_selection()
                                   2687 ;	---------------------------------
                                   2688 ; Function delete_single_line_selection
                                   2689 ; ---------------------------------
      000DC4                       2690 _delete_single_line_selection::
                                   2691 ;tslmain.c:604: Vector* line = get_line(select_start.y);
      000DC4 2Ar4Er01         [16] 2692 	ld	hl, (#(_select_start + 2) + 0)
      000DC7 CDrA9r03         [17] 2693 	call	_get_line
      000DCA 4B               [ 4] 2694 	ld	c, e
      000DCB 42               [ 4] 2695 	ld	b, d
                                   2696 ;tslmain.c:605: vector_erase_range(line, select_start.x, select_stop.x);
      000DCC ED 5Br50r01      [20] 2697 	ld	de, (#_select_stop + 0)
      000DD0 2Ar4Cr01         [16] 2698 	ld	hl, (#_select_start + 0)
      000DD3 EB               [ 4] 2699 	ex	de, hl
      000DD4 E5               [11] 2700 	push	hl
      000DD5 69               [ 4] 2701 	ld	l, c
                                   2702 ;	spillPairReg hl
                                   2703 ;	spillPairReg hl
      000DD6 60               [ 4] 2704 	ld	h, b
                                   2705 ;	spillPairReg hl
                                   2706 ;	spillPairReg hl
      000DD7 CDr00r00         [17] 2707 	call	_vector_erase_range
                                   2708 ;tslmain.c:606: cursor = select_start;
      000DDA 11r44r01         [10] 2709 	ld	de, #_cursor
      000DDD 21r4Cr01         [10] 2710 	ld	hl, #_select_start
      000DE0 01 04 00         [10] 2711 	ld	bc, #0x0004
      000DE3 ED B0            [21] 2712 	ldir
                                   2713 ;tslmain.c:607: redraw_line(select_start.y);
      000DE5 2Ar4Er01         [16] 2714 	ld	hl, (#(_select_start + 2) + 0)
      000DE8 CDrB9r02         [17] 2715 	call	_redraw_line
                                   2716 ;tslmain.c:608: select_stop = select_start;
      000DEB 11r50r01         [10] 2717 	ld	de, #_select_stop
      000DEE 21r4Cr01         [10] 2718 	ld	hl, #_select_start
      000DF1 01 04 00         [10] 2719 	ld	bc, #0x0004
      000DF4 ED B0            [21] 2720 	ldir
                                   2721 ;tslmain.c:609: return 1;
      000DF6 3E 01            [ 7] 2722 	ld	a, #0x01
                                   2723 ;tslmain.c:610: }
      000DF8 C9               [10] 2724 	ret
                                   2725 ;tslmain.c:612: byte delete_selection()
                                   2726 ;	---------------------------------
                                   2727 ; Function delete_selection
                                   2728 ; ---------------------------------
      000DF9                       2729 _delete_selection::
      000DF9 DD E5            [15] 2730 	push	ix
      000DFB DD 21 00 00      [14] 2731 	ld	ix,#0
      000DFF DD 39            [15] 2732 	add	ix,sp
      000E01 F5               [11] 2733 	push	af
                                   2734 ;tslmain.c:614: if (select_start.y == select_stop.y)
      000E02 ED 4Br4Er01      [20] 2735 	ld	bc, (#(_select_start + 2) + 0)
      000E06 2Ar52r01         [16] 2736 	ld	hl, (#(_select_stop + 2) + 0)
      000E09 BF               [ 4] 2737 	cp	a, a
      000E0A ED 42            [15] 2738 	sbc	hl, bc
      000E0C 20 06            [12] 2739 	jr	NZ, 00102$
                                   2740 ;tslmain.c:615: return delete_single_line_selection();
      000E0E CDrC4r0D         [17] 2741 	call	_delete_single_line_selection
      000E11 C3r15r0F         [10] 2742 	jp	00113$
      000E14                       2743 00102$:
                                   2744 ;tslmain.c:616: Vector* line = get_line(select_start.y);
      000E14 69               [ 4] 2745 	ld	l, c
                                   2746 ;	spillPairReg hl
                                   2747 ;	spillPairReg hl
      000E15 60               [ 4] 2748 	ld	h, b
                                   2749 ;	spillPairReg hl
                                   2750 ;	spillPairReg hl
      000E16 CDrA9r03         [17] 2751 	call	_get_line
      000E19 4B               [ 4] 2752 	ld	c, e
      000E1A 42               [ 4] 2753 	ld	b, d
                                   2754 ;tslmain.c:617: word n = vector_size(line);
      000E1B C5               [11] 2755 	push	bc
      000E1C 69               [ 4] 2756 	ld	l, c
                                   2757 ;	spillPairReg hl
                                   2758 ;	spillPairReg hl
      000E1D 60               [ 4] 2759 	ld	h, b
                                   2760 ;	spillPairReg hl
                                   2761 ;	spillPairReg hl
      000E1E CDr00r00         [17] 2762 	call	_vector_size
      000E21 C1               [10] 2763 	pop	bc
                                   2764 ;tslmain.c:618: vector_erase_range(line, select_start.x, n);
      000E22 2Ar4Cr01         [16] 2765 	ld	hl, (#_select_start + 0)
      000E25 EB               [ 4] 2766 	ex	de, hl
      000E26 E5               [11] 2767 	push	hl
      000E27 69               [ 4] 2768 	ld	l, c
                                   2769 ;	spillPairReg hl
                                   2770 ;	spillPairReg hl
      000E28 60               [ 4] 2771 	ld	h, b
                                   2772 ;	spillPairReg hl
                                   2773 ;	spillPairReg hl
      000E29 CDr00r00         [17] 2774 	call	_vector_erase_range
                                   2775 ;tslmain.c:619: if ((select_stop.y - select_start.y) > 1)
      000E2C ED 4Br52r01      [20] 2776 	ld	bc, (#(_select_stop + 2) + 0)
      000E30 21r4Er01         [10] 2777 	ld	hl, #(_select_start + 2)
      000E33 7E               [ 7] 2778 	ld	a, (hl)
      000E34 DD 77 FE         [19] 2779 	ld	-2 (ix), a
      000E37 23               [ 6] 2780 	inc	hl
      000E38 7E               [ 7] 2781 	ld	a, (hl)
      000E39 DD 77 FF         [19] 2782 	ld	-1 (ix), a
      000E3C 79               [ 4] 2783 	ld	a, c
      000E3D DD 96 FE         [19] 2784 	sub	a, -2 (ix)
      000E40 4F               [ 4] 2785 	ld	c, a
      000E41 78               [ 4] 2786 	ld	a, b
      000E42 DD 9E FF         [19] 2787 	sbc	a, -1 (ix)
      000E45 47               [ 4] 2788 	ld	b, a
      000E46 3E 01            [ 7] 2789 	ld	a, #0x01
      000E48 B9               [ 4] 2790 	cp	a, c
      000E49 3E 00            [ 7] 2791 	ld	a, #0x00
      000E4B 98               [ 4] 2792 	sbc	a, b
      000E4C E2r51r0E         [10] 2793 	jp	PO, 00148$
      000E4F EE 80            [ 7] 2794 	xor	a, #0x80
      000E51                       2795 00148$:
      000E51 F2r96r0E         [10] 2796 	jp	P, 00105$
                                   2797 ;tslmain.c:621: for (short y = select_start.y + 1; y < select_stop.y; ++y)
      000E54 C1               [10] 2798 	pop	bc
      000E55 C5               [11] 2799 	push	bc
      000E56 03               [ 6] 2800 	inc	bc
      000E57 33               [ 6] 2801 	inc	sp
      000E58 33               [ 6] 2802 	inc	sp
      000E59 C5               [11] 2803 	push	bc
      000E5A                       2804 00111$:
      000E5A ED 4Br52r01      [20] 2805 	ld	bc, (#(_select_stop + 2) + 0)
      000E5E DD 7E FE         [19] 2806 	ld	a, -2 (ix)
      000E61 91               [ 4] 2807 	sub	a, c
      000E62 DD 7E FF         [19] 2808 	ld	a, -1 (ix)
      000E65 98               [ 4] 2809 	sbc	a, b
      000E66 E2r6Br0E         [10] 2810 	jp	PO, 00149$
      000E69 EE 80            [ 7] 2811 	xor	a, #0x80
      000E6B                       2812 00149$:
      000E6B F2r81r0E         [10] 2813 	jp	P, 00103$
                                   2814 ;tslmain.c:623: line = get_line(y);
      000E6E E1               [10] 2815 	pop	hl
      000E6F E5               [11] 2816 	push	hl
      000E70 CDrA9r03         [17] 2817 	call	_get_line
                                   2818 ;tslmain.c:624: vector_shut(line);
      000E73 EB               [ 4] 2819 	ex	de, hl
      000E74 CDr00r00         [17] 2820 	call	_vector_shut
                                   2821 ;tslmain.c:621: for (short y = select_start.y + 1; y < select_stop.y; ++y)
      000E77 DD 34 FE         [23] 2822 	inc	-2 (ix)
      000E7A 20 DE            [12] 2823 	jr	NZ, 00111$
      000E7C DD 34 FF         [23] 2824 	inc	-1 (ix)
      000E7F 18 D9            [12] 2825 	jr	00111$
      000E81                       2826 00103$:
                                   2827 ;tslmain.c:626: vector_erase_range(document, select_start.y + 1, select_stop.y);
      000E81 ED 5Br4Er01      [20] 2828 	ld	de, (#(_select_start + 2) + 0)
      000E85 13               [ 6] 2829 	inc	de
      000E86 C5               [11] 2830 	push	bc
      000E87 2Ar00r00         [16] 2831 	ld	hl, (_document)
      000E8A CDr00r00         [17] 2832 	call	_vector_erase_range
                                   2833 ;tslmain.c:627: select_stop.y = select_start.y + 1;
      000E8D ED 4Br4Er01      [20] 2834 	ld	bc, (#(_select_start + 2) + 0)
      000E91 03               [ 6] 2835 	inc	bc
      000E92 ED 43r52r01      [20] 2836 	ld	((_select_stop + 2)), bc
      000E96                       2837 00105$:
                                   2838 ;tslmain.c:629: if (select_stop.x > 0)
      000E96 2Ar50r01         [16] 2839 	ld	hl, (#_select_stop + 0)
      000E99 AF               [ 4] 2840 	xor	a, a
      000E9A BD               [ 4] 2841 	cp	a, l
      000E9B 9C               [ 4] 2842 	sbc	a, h
      000E9C E2rA1r0E         [10] 2843 	jp	PO, 00151$
      000E9F EE 80            [ 7] 2844 	xor	a, #0x80
      000EA1                       2845 00151$:
      000EA1 F2rBFr0E         [10] 2846 	jp	P, 00107$
                                   2847 ;tslmain.c:631: line = get_line(select_stop.y);
      000EA4 2Ar52r01         [16] 2848 	ld	hl, (#(_select_stop + 2) + 0)
      000EA7 CDrA9r03         [17] 2849 	call	_get_line
      000EAA 4B               [ 4] 2850 	ld	c, e
      000EAB 42               [ 4] 2851 	ld	b, d
                                   2852 ;tslmain.c:632: n = vector_size(line);
      000EAC C5               [11] 2853 	push	bc
      000EAD 69               [ 4] 2854 	ld	l, c
                                   2855 ;	spillPairReg hl
                                   2856 ;	spillPairReg hl
      000EAE 60               [ 4] 2857 	ld	h, b
                                   2858 ;	spillPairReg hl
                                   2859 ;	spillPairReg hl
      000EAF CDr00r00         [17] 2860 	call	_vector_size
      000EB2 C1               [10] 2861 	pop	bc
                                   2862 ;tslmain.c:633: vector_erase_range(line, 0, select_stop.x);
      000EB3 2Ar50r01         [16] 2863 	ld	hl, (#_select_stop + 0)
      000EB6 E5               [11] 2864 	push	hl
      000EB7 11 00 00         [10] 2865 	ld	de, #0x0000
      000EBA 69               [ 4] 2866 	ld	l, c
                                   2867 ;	spillPairReg hl
                                   2868 ;	spillPairReg hl
      000EBB 60               [ 4] 2869 	ld	h, b
                                   2870 ;	spillPairReg hl
                                   2871 ;	spillPairReg hl
      000EBC CDr00r00         [17] 2872 	call	_vector_erase_range
      000EBF                       2873 00107$:
                                   2874 ;tslmain.c:614: if (select_start.y == select_stop.y)
      000EBF 21r52r01         [10] 2875 	ld	hl, #(_select_stop + 2)
      000EC2 7E               [ 7] 2876 	ld	a, (hl)
      000EC3 DD 77 FE         [19] 2877 	ld	-2 (ix), a
      000EC6 23               [ 6] 2878 	inc	hl
      000EC7 7E               [ 7] 2879 	ld	a, (hl)
      000EC8 DD 77 FF         [19] 2880 	ld	-1 (ix), a
                                   2881 ;tslmain.c:635: if (select_stop.y > select_start.y)
      000ECB 2Ar4Er01         [16] 2882 	ld	hl, (#(_select_start + 2) + 0)
      000ECE 7D               [ 4] 2883 	ld	a, l
      000ECF DD 96 FE         [19] 2884 	sub	a, -2 (ix)
      000ED2 7C               [ 4] 2885 	ld	a, h
      000ED3 DD 9E FF         [19] 2886 	sbc	a, -1 (ix)
      000ED6 E2rDBr0E         [10] 2887 	jp	PO, 00152$
      000ED9 EE 80            [ 7] 2888 	xor	a, #0x80
      000EDB                       2889 00152$:
      000EDB F2rF3r0E         [10] 2890 	jp	P, 00109$
                                   2891 ;tslmain.c:637: cursor.y = select_stop.y;
      000EDE 21r46r01         [10] 2892 	ld	hl, #(_cursor + 2)
      000EE1 DD 7E FE         [19] 2893 	ld	a, -2 (ix)
      000EE4 77               [ 7] 2894 	ld	(hl), a
      000EE5 23               [ 6] 2895 	inc	hl
      000EE6 DD 7E FF         [19] 2896 	ld	a, -1 (ix)
      000EE9 77               [ 7] 2897 	ld	(hl), a
                                   2898 ;tslmain.c:638: cursor.x = 0;
      000EEA 21 00 00         [10] 2899 	ld	hl, #0x0000
      000EED 22r44r01         [16] 2900 	ld	(_cursor), hl
                                   2901 ;tslmain.c:639: join_prev_line();
      000EF0 CDr34r0D         [17] 2902 	call	_join_prev_line
      000EF3                       2903 00109$:
                                   2904 ;tslmain.c:641: cursor = select_start;
      000EF3 11r44r01         [10] 2905 	ld	de, #_cursor
      000EF6 21r4Cr01         [10] 2906 	ld	hl, #_select_start
      000EF9 01 04 00         [10] 2907 	ld	bc, #0x0004
      000EFC ED B0            [21] 2908 	ldir
                                   2909 ;tslmain.c:642: redraw_start = 0;
      000EFE 21 00 00         [10] 2910 	ld	hl, #0x0000
      000F01 22r54r01         [16] 2911 	ld	(_redraw_start), hl
                                   2912 ;tslmain.c:643: redraw_stop = 0x7000;
      000F04 26 70            [ 7] 2913 	ld	h, #0x70
      000F06 22r56r01         [16] 2914 	ld	(_redraw_stop), hl
                                   2915 ;tslmain.c:644: select_stop = select_start;
      000F09 11r50r01         [10] 2916 	ld	de, #_select_stop
      000F0C 21r4Cr01         [10] 2917 	ld	hl, #_select_start
      000F0F 01 04 00         [10] 2918 	ld	bc, #0x0004
      000F12 ED B0            [21] 2919 	ldir
                                   2920 ;tslmain.c:645: return 0;
      000F14 AF               [ 4] 2921 	xor	a, a
      000F15                       2922 00113$:
                                   2923 ;tslmain.c:646: }
      000F15 DD F9            [10] 2924 	ld	sp, ix
      000F17 DD E1            [14] 2925 	pop	ix
      000F19 C9               [10] 2926 	ret
                                   2927 ;tslmain.c:648: byte do_delete()
                                   2928 ;	---------------------------------
                                   2929 ; Function do_delete
                                   2930 ; ---------------------------------
      000F1A                       2931 _do_delete::
      000F1A DD E5            [15] 2932 	push	ix
      000F1C DD 21 00 00      [14] 2933 	ld	ix,#0
      000F20 DD 39            [15] 2934 	add	ix,sp
      000F22 21 F6 FF         [10] 2935 	ld	hl, #-10
      000F25 39               [11] 2936 	add	hl, sp
      000F26 F9               [ 6] 2937 	ld	sp, hl
                                   2938 ;tslmain.c:650: if (valid_select()) return delete_selection();
      000F27 CDr89r02         [17] 2939 	call	_valid_select
      000F2A DD 77 FF         [19] 2940 	ld	-1 (ix), a
      000F2D B7               [ 4] 2941 	or	a, a
      000F2E 28 06            [12] 2942 	jr	Z, 00102$
      000F30 CDrF9r0D         [17] 2943 	call	_delete_selection
      000F33 C3rE1r0F         [10] 2944 	jp	00112$
      000F36                       2945 00102$:
                                   2946 ;tslmain.c:651: Vector* line = get_line(cursor.y);
      000F36 2Ar46r01         [16] 2947 	ld	hl, (#(_cursor + 2) + 0)
      000F39 CDrA9r03         [17] 2948 	call	_get_line
      000F3C 33               [ 6] 2949 	inc	sp
      000F3D 33               [ 6] 2950 	inc	sp
      000F3E D5               [11] 2951 	push	de
                                   2952 ;tslmain.c:652: if (cursor.x < vector_size(line))
      000F3F 2Ar44r01         [16] 2953 	ld	hl, (#_cursor + 0)
      000F42 EB               [ 4] 2954 	ex	de,hl
      000F43 E1               [10] 2955 	pop	hl
      000F44 E5               [11] 2956 	push	hl
      000F45 D5               [11] 2957 	push	de
      000F46 CDr00r00         [17] 2958 	call	_vector_size
      000F49 E1               [10] 2959 	pop	hl
      000F4A AF               [ 4] 2960 	xor	a, a
      000F4B ED 52            [15] 2961 	sbc	hl, de
      000F4D 30 0C            [12] 2962 	jr	NC, 00107$
                                   2963 ;tslmain.c:654: vector_erase(line, cursor.x);
      000F4F ED 5Br44r01      [20] 2964 	ld	de, (#_cursor + 0)
      000F53 E1               [10] 2965 	pop	hl
      000F54 E5               [11] 2966 	push	hl
      000F55 CDr00r00         [17] 2967 	call	_vector_erase
      000F58 C3rDFr0F         [10] 2968 	jp	00108$
      000F5B                       2969 00107$:
                                   2970 ;tslmain.c:657: if (cursor.y < (vector_size(document)-1))
      000F5B 2Ar46r01         [16] 2971 	ld	hl, (#(_cursor + 2) + 0)
      000F5E E5               [11] 2972 	push	hl
      000F5F 2Ar00r00         [16] 2973 	ld	hl, (_document)
      000F62 CDr00r00         [17] 2974 	call	_vector_size
      000F65 E1               [10] 2975 	pop	hl
      000F66 1B               [ 6] 2976 	dec	de
      000F67 AF               [ 4] 2977 	xor	a, a
      000F68 ED 52            [15] 2978 	sbc	hl, de
      000F6A 30 73            [12] 2979 	jr	NC, 00108$
                                   2980 ;tslmain.c:659: Vector* next_line = get_line(cursor.y + 1);
      000F6C 2Ar46r01         [16] 2981 	ld	hl, (#(_cursor + 2) + 0)
      000F6F 23               [ 6] 2982 	inc	hl
      000F70 CDrA9r03         [17] 2983 	call	_get_line
      000F73 DD 73 F8         [19] 2984 	ld	-8 (ix), e
      000F76 DD 72 F9         [19] 2985 	ld	-7 (ix), d
                                   2986 ;tslmain.c:660: word n = vector_size(next_line);
      000F79 D1               [10] 2987 	pop	de
      000F7A E1               [10] 2988 	pop	hl
      000F7B E5               [11] 2989 	push	hl
      000F7C D5               [11] 2990 	push	de
      000F7D CDr00r00         [17] 2991 	call	_vector_size
      000F80 DD 73 FA         [19] 2992 	ld	-6 (ix), e
      000F83 DD 72 FB         [19] 2993 	ld	-5 (ix), d
                                   2994 ;tslmain.c:661: byte* data = vector_access(next_line, 0);
      000F86 11 00 00         [10] 2995 	ld	de, #0x0000
      000F89 DD 6E F8         [19] 2996 	ld	l, -8 (ix)
                                   2997 ;	spillPairReg hl
                                   2998 ;	spillPairReg hl
      000F8C DD 66 F9         [19] 2999 	ld	h, -7 (ix)
                                   3000 ;	spillPairReg hl
                                   3001 ;	spillPairReg hl
      000F8F CDr00r00         [17] 3002 	call	_vector_access
      000F92 DD 73 FC         [19] 3003 	ld	-4 (ix), e
      000F95 DD 72 FD         [19] 3004 	ld	-3 (ix), d
                                   3005 ;tslmain.c:662: for (word j = 0; j < n; ++j)
      000F98 AF               [ 4] 3006 	xor	a, a
      000F99 DD 77 FE         [19] 3007 	ld	-2 (ix), a
      000F9C DD 77 FF         [19] 3008 	ld	-1 (ix), a
      000F9F                       3009 00110$:
      000F9F DD 7E FE         [19] 3010 	ld	a, -2 (ix)
      000FA2 DD 96 FA         [19] 3011 	sub	a, -6 (ix)
      000FA5 DD 7E FF         [19] 3012 	ld	a, -1 (ix)
      000FA8 DD 9E FB         [19] 3013 	sbc	a, -5 (ix)
      000FAB 30 1D            [12] 3014 	jr	NC, 00103$
                                   3015 ;tslmain.c:663: vector_push(line, &data[j]);
      000FAD DD 7E FC         [19] 3016 	ld	a, -4 (ix)
      000FB0 DD 86 FE         [19] 3017 	add	a, -2 (ix)
      000FB3 5F               [ 4] 3018 	ld	e, a
      000FB4 DD 7E FD         [19] 3019 	ld	a, -3 (ix)
      000FB7 DD 8E FF         [19] 3020 	adc	a, -1 (ix)
      000FBA 57               [ 4] 3021 	ld	d, a
      000FBB E1               [10] 3022 	pop	hl
      000FBC E5               [11] 3023 	push	hl
      000FBD CDr00r00         [17] 3024 	call	_vector_push
                                   3025 ;tslmain.c:662: for (word j = 0; j < n; ++j)
      000FC0 DD 34 FE         [23] 3026 	inc	-2 (ix)
      000FC3 20 DA            [12] 3027 	jr	NZ, 00110$
      000FC5 DD 34 FF         [23] 3028 	inc	-1 (ix)
      000FC8 18 D5            [12] 3029 	jr	00110$
      000FCA                       3030 00103$:
                                   3031 ;tslmain.c:664: vector_shut(next_line);
      000FCA D1               [10] 3032 	pop	de
      000FCB E1               [10] 3033 	pop	hl
      000FCC E5               [11] 3034 	push	hl
      000FCD D5               [11] 3035 	push	de
      000FCE CDr00r00         [17] 3036 	call	_vector_shut
                                   3037 ;tslmain.c:665: vector_erase(document, cursor.y + 1);
      000FD1 ED 5Br46r01      [20] 3038 	ld	de, (#(_cursor + 2) + 0)
      000FD5 13               [ 6] 3039 	inc	de
      000FD6 2Ar00r00         [16] 3040 	ld	hl, (_document)
      000FD9 CDr00r00         [17] 3041 	call	_vector_erase
                                   3042 ;tslmain.c:666: return 0; /* Indicate redraw from line to end of screen */
      000FDC AF               [ 4] 3043 	xor	a, a
      000FDD 18 02            [12] 3044 	jr	00112$
      000FDF                       3045 00108$:
                                   3046 ;tslmain.c:668: return 1;
      000FDF 3E 01            [ 7] 3047 	ld	a, #0x01
      000FE1                       3048 00112$:
                                   3049 ;tslmain.c:669: }
      000FE1 DD F9            [10] 3050 	ld	sp, ix
      000FE3 DD E1            [14] 3051 	pop	ix
      000FE5 C9               [10] 3052 	ret
                                   3053 ;tslmain.c:671: void backspace()
                                   3054 ;	---------------------------------
                                   3055 ; Function backspace
                                   3056 ; ---------------------------------
      000FE6                       3057 _backspace::
                                   3058 ;tslmain.c:673: move_x_cursor(-1);
      000FE6 21 FF FF         [10] 3059 	ld	hl, #0xffff
      000FE9 CDrD0r0C         [17] 3060 	call	_move_x_cursor
                                   3061 ;tslmain.c:674: do_delete();
                                   3062 ;tslmain.c:675: }
      000FEC C3r1Ar0F         [10] 3063 	jp	_do_delete
                                   3064 ;tslmain.c:677: void add_enter()
                                   3065 ;	---------------------------------
                                   3066 ; Function add_enter
                                   3067 ; ---------------------------------
      000FEF                       3068 _add_enter::
      000FEF DD E5            [15] 3069 	push	ix
      000FF1 DD 21 00 00      [14] 3070 	ld	ix,#0
      000FF5 DD 39            [15] 3071 	add	ix,sp
      000FF7 21 FA FF         [10] 3072 	ld	hl, #-6
      000FFA 39               [11] 3073 	add	hl, sp
      000FFB F9               [ 6] 3074 	ld	sp, hl
                                   3075 ;tslmain.c:679: if (insert)
      000FFC 3Ar02r00         [13] 3076 	ld	a, (_insert+0)
      000FFF B7               [ 4] 3077 	or	a, a
      001000 CAr8Br10         [10] 3078 	jp	Z, 00107$
                                   3079 ;tslmain.c:681: Vector* cur_line = get_line(cursor.y);
      001003 2Ar46r01         [16] 3080 	ld	hl, (#(_cursor + 2) + 0)
      001006 CDrA9r03         [17] 3081 	call	_get_line
      001009 4B               [ 4] 3082 	ld	c, e
      00100A 42               [ 4] 3083 	ld	b, d
                                   3084 ;tslmain.c:682: word n = vector_size(cur_line);
      00100B C5               [11] 3085 	push	bc
      00100C 69               [ 4] 3086 	ld	l, c
                                   3087 ;	spillPairReg hl
                                   3088 ;	spillPairReg hl
      00100D 60               [ 4] 3089 	ld	h, b
                                   3090 ;	spillPairReg hl
                                   3091 ;	spillPairReg hl
      00100E CDr00r00         [17] 3092 	call	_vector_size
      001011 C1               [10] 3093 	pop	bc
      001012 DD 73 FC         [19] 3094 	ld	-4 (ix), e
      001015 DD 72 FD         [19] 3095 	ld	-3 (ix), d
                                   3096 ;tslmain.c:683: byte* data = vector_access(cur_line, 0);
      001018 C5               [11] 3097 	push	bc
      001019 11 00 00         [10] 3098 	ld	de, #0x0000
      00101C 69               [ 4] 3099 	ld	l, c
                                   3100 ;	spillPairReg hl
                                   3101 ;	spillPairReg hl
      00101D 60               [ 4] 3102 	ld	h, b
                                   3103 ;	spillPairReg hl
                                   3104 ;	spillPairReg hl
      00101E CDr00r00         [17] 3105 	call	_vector_access
      001021 C1               [10] 3106 	pop	bc
      001022 DD 73 FE         [19] 3107 	ld	-2 (ix), e
      001025 DD 72 FF         [19] 3108 	ld	-1 (ix), d
                                   3109 ;tslmain.c:684: Vector* next_line = vector_new(1);
      001028 C5               [11] 3110 	push	bc
      001029 21 01 00         [10] 3111 	ld	hl, #0x0001
      00102C CDr00r00         [17] 3112 	call	_vector_new
      00102F C1               [10] 3113 	pop	bc
      001030 33               [ 6] 3114 	inc	sp
      001031 33               [ 6] 3115 	inc	sp
      001032 D5               [11] 3116 	push	de
                                   3117 ;tslmain.c:685: vector_insert(document, cursor.y + 1, &next_line);
      001033 ED 5Br46r01      [20] 3118 	ld	de, (#(_cursor + 2) + 0)
      001037 13               [ 6] 3119 	inc	de
      001038 C5               [11] 3120 	push	bc
      001039 21 02 00         [10] 3121 	ld	hl, #2
      00103C 39               [11] 3122 	add	hl, sp
      00103D E5               [11] 3123 	push	hl
      00103E 2Ar00r00         [16] 3124 	ld	hl, (_document)
      001041 CDr00r00         [17] 3125 	call	_vector_insert
      001044 C1               [10] 3126 	pop	bc
                                   3127 ;tslmain.c:686: for (word j = cursor.x; j < n; ++j)
      001045 2Ar44r01         [16] 3128 	ld	hl, (#_cursor + 0)
      001048                       3129 00105$:
      001048 7D               [ 4] 3130 	ld	a, l
      001049 DD 96 FC         [19] 3131 	sub	a, -4 (ix)
      00104C 7C               [ 4] 3132 	ld	a, h
      00104D DD 9E FD         [19] 3133 	sbc	a, -3 (ix)
      001050 30 1A            [12] 3134 	jr	NC, 00101$
                                   3135 ;tslmain.c:687: vector_push(next_line, &data[j]);
      001052 DD 7E FE         [19] 3136 	ld	a, -2 (ix)
      001055 85               [ 4] 3137 	add	a, l
      001056 5F               [ 4] 3138 	ld	e, a
      001057 DD 7E FF         [19] 3139 	ld	a, -1 (ix)
      00105A 8C               [ 4] 3140 	adc	a, h
      00105B 57               [ 4] 3141 	ld	d, a
      00105C E5               [11] 3142 	push	hl
      00105D C5               [11] 3143 	push	bc
      00105E DD 6E FA         [19] 3144 	ld	l, -6 (ix)
                                   3145 ;	spillPairReg hl
                                   3146 ;	spillPairReg hl
      001061 DD 66 FB         [19] 3147 	ld	h, -5 (ix)
                                   3148 ;	spillPairReg hl
                                   3149 ;	spillPairReg hl
      001064 CDr00r00         [17] 3150 	call	_vector_push
      001067 C1               [10] 3151 	pop	bc
      001068 E1               [10] 3152 	pop	hl
                                   3153 ;tslmain.c:686: for (word j = cursor.x; j < n; ++j)
      001069 23               [ 6] 3154 	inc	hl
      00106A 18 DC            [12] 3155 	jr	00105$
      00106C                       3156 00101$:
                                   3157 ;tslmain.c:688: vector_erase_range(cur_line, cursor.x, n);
      00106C ED 5Br44r01      [20] 3158 	ld	de, (#_cursor + 0)
      001070 DD 6E FC         [19] 3159 	ld	l, -4 (ix)
                                   3160 ;	spillPairReg hl
                                   3161 ;	spillPairReg hl
      001073 DD 66 FD         [19] 3162 	ld	h, -3 (ix)
                                   3163 ;	spillPairReg hl
                                   3164 ;	spillPairReg hl
      001076 E5               [11] 3165 	push	hl
      001077 69               [ 4] 3166 	ld	l, c
                                   3167 ;	spillPairReg hl
                                   3168 ;	spillPairReg hl
      001078 60               [ 4] 3169 	ld	h, b
                                   3170 ;	spillPairReg hl
                                   3171 ;	spillPairReg hl
      001079 CDr00r00         [17] 3172 	call	_vector_erase_range
                                   3173 ;tslmain.c:689: cursor.y++;
      00107C ED 4Br46r01      [20] 3174 	ld	bc, (#(_cursor + 2) + 0)
      001080 03               [ 6] 3175 	inc	bc
      001081 ED 43r46r01      [20] 3176 	ld	((_cursor + 2)), bc
                                   3177 ;tslmain.c:690: cursor.x = 0;
      001085 21 00 00         [10] 3178 	ld	hl, #0x0000
      001088 22r44r01         [16] 3179 	ld	(_cursor), hl
      00108B                       3180 00107$:
                                   3181 ;tslmain.c:692: }
      00108B DD F9            [10] 3182 	ld	sp, ix
      00108D DD E1            [14] 3183 	pop	ix
      00108F C9               [10] 3184 	ret
                                   3185 ;tslmain.c:694: void add_char(byte c)
                                   3186 ;	---------------------------------
                                   3187 ; Function add_char
                                   3188 ; ---------------------------------
      001090                       3189 _add_char::
      001090 DD E5            [15] 3190 	push	ix
      001092 DD 21 00 00      [14] 3191 	ld	ix,#0
      001096 DD 39            [15] 3192 	add	ix,sp
      001098 3B               [ 6] 3193 	dec	sp
                                   3194 ;tslmain.c:696: if (c == 10 || c == 13)
      001099 DD 77 FF         [19] 3195 	ld	-1 (ix), a
      00109C D6 0A            [ 7] 3196 	sub	a, #0x0a
      00109E 28 07            [12] 3197 	jr	Z, 00107$
      0010A0 DD 7E FF         [19] 3198 	ld	a, -1 (ix)
      0010A3 D6 0D            [ 7] 3199 	sub	a, #0x0d
      0010A5 20 05            [12] 3200 	jr	NZ, 00108$
      0010A7                       3201 00107$:
                                   3202 ;tslmain.c:698: add_enter();
      0010A7 CDrEFr0F         [17] 3203 	call	_add_enter
      0010AA 18 4E            [12] 3204 	jr	00111$
      0010AC                       3205 00108$:
                                   3206 ;tslmain.c:702: Vector* line = get_line(cursor.y);
      0010AC 2Ar46r01         [16] 3207 	ld	hl, (#_cursor + 2)
      0010AF CDrA9r03         [17] 3208 	call	_get_line
      0010B2 4B               [ 4] 3209 	ld	c, e
      0010B3 42               [ 4] 3210 	ld	b, d
                                   3211 ;tslmain.c:703: if (cursor.x >= vector_size(line)) vector_push(line, &c);
      0010B4 2Ar44r01         [16] 3212 	ld	hl, (#_cursor + 0)
      0010B7 E5               [11] 3213 	push	hl
      0010B8 C5               [11] 3214 	push	bc
      0010B9 69               [ 4] 3215 	ld	l, c
                                   3216 ;	spillPairReg hl
                                   3217 ;	spillPairReg hl
      0010BA 60               [ 4] 3218 	ld	h, b
                                   3219 ;	spillPairReg hl
                                   3220 ;	spillPairReg hl
      0010BB CDr00r00         [17] 3221 	call	_vector_size
      0010BE C1               [10] 3222 	pop	bc
      0010BF E1               [10] 3223 	pop	hl
      0010C0 AF               [ 4] 3224 	xor	a, a
      0010C1 ED 52            [15] 3225 	sbc	hl, de
      0010C3 38 0C            [12] 3226 	jr	C, 00105$
      0010C5 21 00 00         [10] 3227 	ld	hl, #0
      0010C8 39               [11] 3228 	add	hl, sp
      0010C9 EB               [ 4] 3229 	ex	de, hl
      0010CA 69               [ 4] 3230 	ld	l, c
                                   3231 ;	spillPairReg hl
                                   3232 ;	spillPairReg hl
      0010CB 60               [ 4] 3233 	ld	h, b
                                   3234 ;	spillPairReg hl
                                   3235 ;	spillPairReg hl
      0010CC CDr00r00         [17] 3236 	call	_vector_push
      0010CF 18 20            [12] 3237 	jr	00106$
      0010D1                       3238 00105$:
      0010D1 ED 5Br44r01      [20] 3239 	ld	de, (#_cursor + 0)
                                   3240 ;tslmain.c:706: if (insert)
      0010D5 3Ar02r00         [13] 3241 	ld	a, (_insert+0)
      0010D8 B7               [ 4] 3242 	or	a, a
      0010D9 28 0C            [12] 3243 	jr	Z, 00102$
                                   3244 ;tslmain.c:708: vector_insert(line, cursor.x, &c);
      0010DB 21 00 00         [10] 3245 	ld	hl, #0
      0010DE 39               [11] 3246 	add	hl, sp
      0010DF E5               [11] 3247 	push	hl
      0010E0 69               [ 4] 3248 	ld	l, c
                                   3249 ;	spillPairReg hl
                                   3250 ;	spillPairReg hl
      0010E1 60               [ 4] 3251 	ld	h, b
                                   3252 ;	spillPairReg hl
                                   3253 ;	spillPairReg hl
      0010E2 CDr00r00         [17] 3254 	call	_vector_insert
      0010E5 18 0A            [12] 3255 	jr	00106$
      0010E7                       3256 00102$:
                                   3257 ;tslmain.c:712: vector_set(line, cursor.x, &c);
      0010E7 21 00 00         [10] 3258 	ld	hl, #0
      0010EA 39               [11] 3259 	add	hl, sp
      0010EB E5               [11] 3260 	push	hl
      0010EC 69               [ 4] 3261 	ld	l, c
                                   3262 ;	spillPairReg hl
                                   3263 ;	spillPairReg hl
      0010ED 60               [ 4] 3264 	ld	h, b
                                   3265 ;	spillPairReg hl
                                   3266 ;	spillPairReg hl
      0010EE CDr00r00         [17] 3267 	call	_vector_set
      0010F1                       3268 00106$:
                                   3269 ;tslmain.c:715: ++cursor.x;
      0010F1 ED 4Br44r01      [20] 3270 	ld	bc, (#_cursor + 0)
      0010F5 03               [ 6] 3271 	inc	bc
      0010F6 ED 43r44r01      [20] 3272 	ld	(_cursor), bc
      0010FA                       3273 00111$:
                                   3274 ;tslmain.c:717: }
      0010FA 33               [ 6] 3275 	inc	sp
      0010FB DD E1            [14] 3276 	pop	ix
      0010FD C9               [10] 3277 	ret
                                   3278 ;tslmain.c:719: word getkey()
                                   3279 ;	---------------------------------
                                   3280 ; Function getkey
                                   3281 ; ---------------------------------
      0010FE                       3282 _getkey::
                                   3283 ;tslmain.c:724: return hal_getkey();
                                   3284 ;tslmain.c:725: }
      0010FE C3r00r00         [10] 3285 	jp	_hal_getkey
                                   3286 ;tslmain.c:727: void move_y(short dy)
                                   3287 ;	---------------------------------
                                   3288 ; Function move_y
                                   3289 ; ---------------------------------
      001101                       3290 _move_y::
      001101 4D               [ 4] 3291 	ld	c, l
      001102 44               [ 4] 3292 	ld	b, h
                                   3293 ;tslmain.c:729: Vector* line = get_line(cursor.y);
      001103 2Ar46r01         [16] 3294 	ld	hl, (#(_cursor + 2) + 0)
      001106 C5               [11] 3295 	push	bc
      001107 CDrA9r03         [17] 3296 	call	_get_line
      00110A C1               [10] 3297 	pop	bc
      00110B D5               [11] 3298 	push	de
      00110C FD E1            [14] 3299 	pop	iy
                                   3300 ;tslmain.c:730: short vx = logical_to_visual(line, cursor.x);
      00110E ED 5Br44r01      [20] 3301 	ld	de, (#_cursor + 0)
      001112 C5               [11] 3302 	push	bc
      001113 FD E5            [15] 3303 	push	iy
      001115 E1               [10] 3304 	pop	hl
      001116 CDrA8r01         [17] 3305 	call	_logical_to_visual
      001119 C1               [10] 3306 	pop	bc
                                   3307 ;tslmain.c:731: cursor.y += dy;
      00111A 2Ar46r01         [16] 3308 	ld	hl, (#(_cursor + 2) + 0)
      00111D 09               [11] 3309 	add	hl, bc
      00111E 4D               [ 4] 3310 	ld	c, l
      00111F 44               [ 4] 3311 	ld	b, h
      001120 ED 43r46r01      [20] 3312 	ld	((_cursor + 2)), bc
                                   3313 ;tslmain.c:732: line = get_line(cursor.y);
      001124 D5               [11] 3314 	push	de
      001125 69               [ 4] 3315 	ld	l, c
                                   3316 ;	spillPairReg hl
                                   3317 ;	spillPairReg hl
      001126 60               [ 4] 3318 	ld	h, b
                                   3319 ;	spillPairReg hl
                                   3320 ;	spillPairReg hl
      001127 CDrA9r03         [17] 3321 	call	_get_line
      00112A EB               [ 4] 3322 	ex	de, hl
      00112B D1               [10] 3323 	pop	de
                                   3324 ;tslmain.c:733: cursor.x = visual_to_logical(line, vx);
      00112C CDr27r0C         [17] 3325 	call	_visual_to_logical
      00112F ED 53r44r01      [20] 3326 	ld	(_cursor), de
                                   3327 ;tslmain.c:734: }
      001133 C9               [10] 3328 	ret
                                   3329 ;tslmain.c:736: void clipboard_copy()
                                   3330 ;	---------------------------------
                                   3331 ; Function clipboard_copy
                                   3332 ; ---------------------------------
      001134                       3333 _clipboard_copy::
      001134 DD E5            [15] 3334 	push	ix
      001136 DD 21 00 00      [14] 3335 	ld	ix,#0
      00113A DD 39            [15] 3336 	add	ix,sp
      00113C 21 F7 FF         [10] 3337 	ld	hl, #-9
      00113F 39               [11] 3338 	add	hl, sp
      001140 F9               [ 6] 3339 	ld	sp, hl
                                   3340 ;tslmain.c:738: if (!valid_select()) return;
      001141 CDr89r02         [17] 3341 	call	_valid_select
      001144 B7               [ 4] 3342 	or	a, a
      001145 CAr3Er12         [10] 3343 	jp	Z,00120$
                                   3344 ;tslmain.c:739: vector_clear(clipboard);
      001148 2Ar02r00         [16] 3345 	ld	hl, (_clipboard)
      00114B CDr00r00         [17] 3346 	call	_vector_clear
                                   3347 ;tslmain.c:740: for (short y = select_start.y; y <= select_stop.y; ++y)
      00114E 21r4Er01         [10] 3348 	ld	hl, #(_select_start + 2)
      001151 7E               [ 7] 3349 	ld	a, (hl)
      001152 DD 77 FE         [19] 3350 	ld	-2 (ix), a
      001155 23               [ 6] 3351 	inc	hl
      001156 7E               [ 7] 3352 	ld	a, (hl)
      001157 DD 77 FF         [19] 3353 	ld	-1 (ix), a
      00115A                       3354 00119$:
      00115A 2Ar52r01         [16] 3355 	ld	hl, (#(_select_stop + 2) + 0)
      00115D 7D               [ 4] 3356 	ld	a, l
      00115E DD 96 FE         [19] 3357 	sub	a, -2 (ix)
      001161 7C               [ 4] 3358 	ld	a, h
      001162 DD 9E FF         [19] 3359 	sbc	a, -1 (ix)
      001165 E2r6Ar11         [10] 3360 	jp	PO, 00174$
      001168 EE 80            [ 7] 3361 	xor	a, #0x80
      00116A                       3362 00174$:
      00116A FAr3Er12         [10] 3363 	jp	M, 00120$
                                   3364 ;tslmain.c:742: Vector* line = get_line(y);
      00116D DD 6E FE         [19] 3365 	ld	l, -2 (ix)
                                   3366 ;	spillPairReg hl
                                   3367 ;	spillPairReg hl
      001170 DD 66 FF         [19] 3368 	ld	h, -1 (ix)
                                   3369 ;	spillPairReg hl
                                   3370 ;	spillPairReg hl
      001173 CDrA9r03         [17] 3371 	call	_get_line
      001176 DD 73 F8         [19] 3372 	ld	-8 (ix), e
                                   3373 ;tslmain.c:743: if (!line) continue;
      001179 DD 72 F9         [19] 3374 	ld	-7 (ix), d
      00117C 7A               [ 4] 3375 	ld	a, d
      00117D DD B6 F8         [19] 3376 	or	a, -8 (ix)
      001180 CAr32r12         [10] 3377 	jp	Z, 00113$
                                   3378 ;tslmain.c:744: short start = 0, stop=vector_size(line);
      001183 AF               [ 4] 3379 	xor	a, a
      001184 DD 77 FA         [19] 3380 	ld	-6 (ix), a
      001187 DD 77 FB         [19] 3381 	ld	-5 (ix), a
      00118A DD 6E F8         [19] 3382 	ld	l, -8 (ix)
                                   3383 ;	spillPairReg hl
                                   3384 ;	spillPairReg hl
      00118D DD 66 F9         [19] 3385 	ld	h, -7 (ix)
                                   3386 ;	spillPairReg hl
                                   3387 ;	spillPairReg hl
      001190 CDr00r00         [17] 3388 	call	_vector_size
      001193 DD 73 FC         [19] 3389 	ld	-4 (ix), e
      001196 DD 72 FD         [19] 3390 	ld	-3 (ix), d
                                   3391 ;tslmain.c:745: if (y == select_start.y)
      001199 2Ar4Er01         [16] 3392 	ld	hl, (#(_select_start + 2) + 0)
      00119C DD 4E FE         [19] 3393 	ld	c, -2 (ix)
      00119F DD 46 FF         [19] 3394 	ld	b, -1 (ix)
      0011A2 BF               [ 4] 3395 	cp	a, a
      0011A3 ED 42            [15] 3396 	sbc	hl, bc
      0011A5 20 0C            [12] 3397 	jr	NZ, 00106$
                                   3398 ;tslmain.c:747: start = select_start.x;
      0011A7 21r4Cr01         [10] 3399 	ld	hl, #_select_start
      0011AA 7E               [ 7] 3400 	ld	a, (hl)
      0011AB DD 77 FA         [19] 3401 	ld	-6 (ix), a
      0011AE 23               [ 6] 3402 	inc	hl
      0011AF 7E               [ 7] 3403 	ld	a, (hl)
      0011B0 DD 77 FB         [19] 3404 	ld	-5 (ix), a
      0011B3                       3405 00106$:
                                   3406 ;tslmain.c:749: if (y == select_stop.y && select_stop.x < stop)
      0011B3 2Ar52r01         [16] 3407 	ld	hl, (#(_select_stop + 2) + 0)
      0011B6 DD 4E FE         [19] 3408 	ld	c, -2 (ix)
      0011B9 DD 46 FF         [19] 3409 	ld	b, -1 (ix)
      0011BC BF               [ 4] 3410 	cp	a, a
      0011BD ED 42            [15] 3411 	sbc	hl, bc
      0011BF 20 19            [12] 3412 	jr	NZ, 00108$
      0011C1 2Ar50r01         [16] 3413 	ld	hl, (#_select_stop + 0)
      0011C4 7D               [ 4] 3414 	ld	a, l
      0011C5 DD 96 FC         [19] 3415 	sub	a, -4 (ix)
      0011C8 7C               [ 4] 3416 	ld	a, h
      0011C9 DD 9E FD         [19] 3417 	sbc	a, -3 (ix)
      0011CC E2rD1r11         [10] 3418 	jp	PO, 00179$
      0011CF EE 80            [ 7] 3419 	xor	a, #0x80
      0011D1                       3420 00179$:
      0011D1 F2rDAr11         [10] 3421 	jp	P, 00108$
                                   3422 ;tslmain.c:750: stop = select_stop.x;
      0011D4 DD 75 FC         [19] 3423 	ld	-4 (ix), l
      0011D7 DD 74 FD         [19] 3424 	ld	-3 (ix), h
      0011DA                       3425 00108$:
                                   3426 ;tslmain.c:751: byte* data = vector_access(line, 0);
      0011DA 11 00 00         [10] 3427 	ld	de, #0x0000
      0011DD DD 6E F8         [19] 3428 	ld	l, -8 (ix)
                                   3429 ;	spillPairReg hl
                                   3430 ;	spillPairReg hl
      0011E0 DD 66 F9         [19] 3431 	ld	h, -7 (ix)
                                   3432 ;	spillPairReg hl
                                   3433 ;	spillPairReg hl
      0011E3 CDr00r00         [17] 3434 	call	_vector_access
      0011E6 EB               [ 4] 3435 	ex	de, hl
                                   3436 ;tslmain.c:752: for (short x = start; x < stop; ++x)
      0011E7 DD 4E FA         [19] 3437 	ld	c, -6 (ix)
      0011EA DD 46 FB         [19] 3438 	ld	b, -5 (ix)
      0011ED                       3439 00116$:
      0011ED 79               [ 4] 3440 	ld	a, c
      0011EE DD 96 FC         [19] 3441 	sub	a, -4 (ix)
      0011F1 78               [ 4] 3442 	ld	a, b
      0011F2 DD 9E FD         [19] 3443 	sbc	a, -3 (ix)
      0011F5 E2rFAr11         [10] 3444 	jp	PO, 00180$
      0011F8 EE 80            [ 7] 3445 	xor	a, #0x80
      0011FA                       3446 00180$:
      0011FA F2r10r12         [10] 3447 	jp	P, 00110$
                                   3448 ;tslmain.c:754: vector_push(clipboard, &(data[x]));
      0011FD 7D               [ 4] 3449 	ld	a, l
      0011FE 81               [ 4] 3450 	add	a, c
      0011FF 5F               [ 4] 3451 	ld	e, a
      001200 7C               [ 4] 3452 	ld	a, h
      001201 88               [ 4] 3453 	adc	a, b
      001202 57               [ 4] 3454 	ld	d, a
      001203 E5               [11] 3455 	push	hl
      001204 C5               [11] 3456 	push	bc
      001205 2Ar02r00         [16] 3457 	ld	hl, (_clipboard)
      001208 CDr00r00         [17] 3458 	call	_vector_push
      00120B C1               [10] 3459 	pop	bc
      00120C E1               [10] 3460 	pop	hl
                                   3461 ;tslmain.c:752: for (short x = start; x < stop; ++x)
      00120D 03               [ 6] 3462 	inc	bc
      00120E 18 DD            [12] 3463 	jr	00116$
      001210                       3464 00110$:
                                   3465 ;tslmain.c:756: if (y < select_stop.y)
      001210 2Ar52r01         [16] 3466 	ld	hl, (#(_select_stop + 2) + 0)
      001213 DD 7E FE         [19] 3467 	ld	a, -2 (ix)
      001216 95               [ 4] 3468 	sub	a, l
      001217 DD 7E FF         [19] 3469 	ld	a, -1 (ix)
      00121A 9C               [ 4] 3470 	sbc	a, h
      00121B E2r20r12         [10] 3471 	jp	PO, 00181$
      00121E EE 80            [ 7] 3472 	xor	a, #0x80
      001220                       3473 00181$:
      001220 F2r32r12         [10] 3474 	jp	P, 00113$
                                   3475 ;tslmain.c:758: byte enter = 10;
      001223 DD 36 F7 0A      [19] 3476 	ld	-9 (ix), #0x0a
                                   3477 ;tslmain.c:759: vector_push(clipboard, &enter);
      001227 21 00 00         [10] 3478 	ld	hl, #0
      00122A 39               [11] 3479 	add	hl, sp
      00122B EB               [ 4] 3480 	ex	de, hl
      00122C 2Ar02r00         [16] 3481 	ld	hl, (_clipboard)
      00122F CDr00r00         [17] 3482 	call	_vector_push
      001232                       3483 00113$:
                                   3484 ;tslmain.c:740: for (short y = select_start.y; y <= select_stop.y; ++y)
      001232 DD 34 FE         [23] 3485 	inc	-2 (ix)
      001235 C2r5Ar11         [10] 3486 	jp	NZ,00119$
      001238 DD 34 FF         [23] 3487 	inc	-1 (ix)
      00123B C3r5Ar11         [10] 3488 	jp	00119$
      00123E                       3489 00120$:
                                   3490 ;tslmain.c:762: }
      00123E DD F9            [10] 3491 	ld	sp, ix
      001240 DD E1            [14] 3492 	pop	ix
      001242 C9               [10] 3493 	ret
                                   3494 ;tslmain.c:764: void clipboard_cut()
                                   3495 ;	---------------------------------
                                   3496 ; Function clipboard_cut
                                   3497 ; ---------------------------------
      001243                       3498 _clipboard_cut::
                                   3499 ;tslmain.c:766: if (!valid_select()) return;
      001243 CDr89r02         [17] 3500 	call	_valid_select
      001246 B7               [ 4] 3501 	or	a, a
      001247 C8               [11] 3502 	ret	Z
                                   3503 ;tslmain.c:767: clipboard_copy();
      001248 CDr34r11         [17] 3504 	call	_clipboard_copy
                                   3505 ;tslmain.c:768: do_delete();
                                   3506 ;tslmain.c:769: }
      00124B C3r1Ar0F         [10] 3507 	jp	_do_delete
                                   3508 ;tslmain.c:771: void clipboard_paste()
                                   3509 ;	---------------------------------
                                   3510 ; Function clipboard_paste
                                   3511 ; ---------------------------------
      00124E                       3512 _clipboard_paste::
                                   3513 ;tslmain.c:773: if (valid_select())
      00124E CDr89r02         [17] 3514 	call	_valid_select
      001251 B7               [ 4] 3515 	or	a, a
      001252 28 03            [12] 3516 	jr	Z, 00102$
                                   3517 ;tslmain.c:774: do_delete();
      001254 CDr1Ar0F         [17] 3518 	call	_do_delete
      001257                       3519 00102$:
                                   3520 ;tslmain.c:775: word n = vector_size(clipboard);
      001257 2Ar02r00         [16] 3521 	ld	hl, (_clipboard)
      00125A CDr00r00         [17] 3522 	call	_vector_size
                                   3523 ;tslmain.c:776: const byte* data = vector_access(clipboard, 0);
      00125D D5               [11] 3524 	push	de
      00125E 11 00 00         [10] 3525 	ld	de, #0x0000
      001261 2Ar02r00         [16] 3526 	ld	hl, (_clipboard)
      001264 CDr00r00         [17] 3527 	call	_vector_access
      001267 C1               [10] 3528 	pop	bc
      001268 D5               [11] 3529 	push	de
      001269 FD E1            [14] 3530 	pop	iy
                                   3531 ;tslmain.c:777: for (word i = 0; i < n; ++i)
      00126B 11 00 00         [10] 3532 	ld	de, #0x0000
      00126E                       3533 00105$:
      00126E 7B               [ 4] 3534 	ld	a, e
      00126F 91               [ 4] 3535 	sub	a, c
      001270 7A               [ 4] 3536 	ld	a, d
      001271 98               [ 4] 3537 	sbc	a, b
      001272 30 14            [12] 3538 	jr	NC, 00103$
                                   3539 ;tslmain.c:779: add_char(data[i]);
      001274 FD E5            [15] 3540 	push	iy
      001276 E1               [10] 3541 	pop	hl
      001277 19               [11] 3542 	add	hl, de
      001278 6E               [ 7] 3543 	ld	l, (hl)
                                   3544 ;	spillPairReg hl
      001279 C5               [11] 3545 	push	bc
      00127A D5               [11] 3546 	push	de
      00127B FD E5            [15] 3547 	push	iy
      00127D 7D               [ 4] 3548 	ld	a, l
      00127E CDr90r10         [17] 3549 	call	_add_char
      001281 FD E1            [14] 3550 	pop	iy
      001283 D1               [10] 3551 	pop	de
      001284 C1               [10] 3552 	pop	bc
                                   3553 ;tslmain.c:777: for (word i = 0; i < n; ++i)
      001285 13               [ 6] 3554 	inc	de
      001286 18 E6            [12] 3555 	jr	00105$
      001288                       3556 00103$:
                                   3557 ;tslmain.c:781: redraw_start = 0;
      001288 21 00 00         [10] 3558 	ld	hl, #0x0000
      00128B 22r54r01         [16] 3559 	ld	(_redraw_start), hl
                                   3560 ;tslmain.c:782: redraw_stop = 0x7000;
      00128E 26 70            [ 7] 3561 	ld	h, #0x70
      001290 22r56r01         [16] 3562 	ld	(_redraw_stop), hl
                                   3563 ;tslmain.c:783: }
      001293 C9               [10] 3564 	ret
                                   3565 ;tslmain.c:785: void event_loop()
                                   3566 ;	---------------------------------
                                   3567 ; Function event_loop
                                   3568 ; ---------------------------------
      001294                       3569 _event_loop::
      001294 DD E5            [15] 3570 	push	ix
      001296 DD 21 00 00      [14] 3571 	ld	ix,#0
      00129A DD 39            [15] 3572 	add	ix,sp
      00129C 21 F1 FF         [10] 3573 	ld	hl, #-15
      00129F 39               [11] 3574 	add	hl, sp
      0012A0 F9               [ 6] 3575 	ld	sp, hl
                                   3576 ;tslmain.c:787: byte done = 0;
      0012A1 DD 36 F5 00      [19] 3577 	ld	-11 (ix), #0x00
                                   3578 ;tslmain.c:788: const word total_lines = vector_size(document);
      0012A5 2Ar00r00         [16] 3579 	ld	hl, (_document)
      0012A8 CDr00r00         [17] 3580 	call	_vector_size
      0012AB DD 73 F6         [19] 3581 	ld	-10 (ix), e
      0012AE DD 72 F7         [19] 3582 	ld	-9 (ix), d
                                   3583 ;tslmain.c:789: while (!done)
      0012B1                       3584 00179$:
      0012B1 DD 7E F5         [19] 3585 	ld	a, -11 (ix)
      0012B4 B7               [ 4] 3586 	or	a, a
      0012B5 C2r67r16         [10] 3587 	jp	NZ, 00182$
                                   3588 ;tslmain.c:792: prev_cursor.x = cursor.x;
      0012B8 21r44r01         [10] 3589 	ld	hl, #_cursor
      0012BB 7E               [ 7] 3590 	ld	a, (hl)
      0012BC DD 77 FE         [19] 3591 	ld	-2 (ix), a
      0012BF 23               [ 6] 3592 	inc	hl
      0012C0 7E               [ 7] 3593 	ld	a, (hl)
      0012C1 DD 77 FF         [19] 3594 	ld	-1 (ix), a
      0012C4 DD 7E FE         [19] 3595 	ld	a, -2 (ix)
      0012C7 DD 77 F1         [19] 3596 	ld	-15 (ix), a
      0012CA DD 7E FF         [19] 3597 	ld	a, -1 (ix)
      0012CD DD 77 F2         [19] 3598 	ld	-14 (ix), a
                                   3599 ;tslmain.c:793: prev_cursor.y = cursor.y;
      0012D0 ED 4Br46r01      [20] 3600 	ld	bc, (#(_cursor + 2) + 0)
      0012D4 DD 71 F3         [19] 3601 	ld	-13 (ix), c
      0012D7 DD 70 F4         [19] 3602 	ld	-12 (ix), b
                                   3603 ;tslmain.c:794: Vector* line = get_line(cursor.y);
      0012DA 2Ar46r01         [16] 3604 	ld	hl, (#(_cursor + 2) + 0)
      0012DD CDrA9r03         [17] 3605 	call	_get_line
                                   3606 ;tslmain.c:795: word n = vector_size(line);
                                   3607 ;	spillPairReg hl
                                   3608 ;	spillPairReg hl
      0012E0 DD 73 FE         [19] 3609 	ld	-2 (ix), e
      0012E3 DD 72 FF         [19] 3610 	ld	-1 (ix), d
      0012E6 EB               [ 4] 3611 	ex	de,hl
                                   3612 ;	spillPairReg hl
                                   3613 ;	spillPairReg hl
      0012E7 CDr00r00         [17] 3614 	call	_vector_size
      0012EA DD 73 FE         [19] 3615 	ld	-2 (ix), e
      0012ED DD 72 FF         [19] 3616 	ld	-1 (ix), d
      0012F0 DD 7E FE         [19] 3617 	ld	a, -2 (ix)
      0012F3 DD 77 F8         [19] 3618 	ld	-8 (ix), a
      0012F6 DD 7E FF         [19] 3619 	ld	a, -1 (ix)
      0012F9 DD 77 F9         [19] 3620 	ld	-7 (ix), a
                                   3621 ;tslmain.c:796: word key = getkey();
      0012FC CDrFEr10         [17] 3622 	call	_getkey
      0012FF DD 73 FE         [19] 3623 	ld	-2 (ix), e
      001302 DD 72 FF         [19] 3624 	ld	-1 (ix), d
      001305 DD 7E FE         [19] 3625 	ld	a, -2 (ix)
      001308 DD 77 FA         [19] 3626 	ld	-6 (ix), a
      00130B DD 7E FF         [19] 3627 	ld	a, -1 (ix)
      00130E DD 77 FB         [19] 3628 	ld	-5 (ix), a
                                   3629 ;tslmain.c:797: byte moving = is_move_key(key);
      001311 DD 6E FA         [19] 3630 	ld	l, -6 (ix)
                                   3631 ;	spillPairReg hl
                                   3632 ;	spillPairReg hl
      001314 DD 66 FB         [19] 3633 	ld	h, -5 (ix)
                                   3634 ;	spillPairReg hl
                                   3635 ;	spillPairReg hl
      001317 CDr20r0D         [17] 3636 	call	_is_move_key
      00131A DD 77 FF         [19] 3637 	ld	-1 (ix), a
      00131D DD 77 FC         [19] 3638 	ld	-4 (ix), a
                                   3639 ;tslmain.c:798: byte shifted = ((key & SHIFT) != 0 ? 1 : 0);
      001320 DD 7E FA         [19] 3640 	ld	a, -6 (ix)
      001323 DD 77 FE         [19] 3641 	ld	-2 (ix), a
      001326 DD 7E FB         [19] 3642 	ld	a, -5 (ix)
      001329 DD 77 FF         [19] 3643 	ld	-1 (ix), a
      00132C DD CB FF 76      [20] 3644 	bit	6, -1 (ix)
      001330 28 05            [12] 3645 	jr	Z, 00184$
      001332 01 01 00         [10] 3646 	ld	bc, #0x0001
      001335 18 03            [12] 3647 	jr	00185$
      001337                       3648 00184$:
      001337 01 00 00         [10] 3649 	ld	bc, #0x0000
      00133A                       3650 00185$:
      00133A DD 71 FD         [19] 3651 	ld	-3 (ix), c
                                   3652 ;tslmain.c:799: byte ctrl = ((key & CTRL) != 0 ? 1 : 0);
      00133D DD 66 FB         [19] 3653 	ld	h, -5 (ix)
                                   3654 ;	spillPairReg hl
                                   3655 ;	spillPairReg hl
      001340 29               [11] 3656 	add	hl, hl
      001341 30 0A            [12] 3657 	jr	NC, 00186$
      001343 DD 36 FE 01      [19] 3658 	ld	-2 (ix), #0x01
      001347 DD 36 FF 00      [19] 3659 	ld	-1 (ix), #0
      00134B 18 07            [12] 3660 	jr	00187$
      00134D                       3661 00186$:
      00134D AF               [ 4] 3662 	xor	a, a
      00134E DD 77 FE         [19] 3663 	ld	-2 (ix), a
      001351 DD 77 FF         [19] 3664 	ld	-1 (ix), a
      001354                       3665 00187$:
      001354 DD 4E FE         [19] 3666 	ld	c, -2 (ix)
                                   3667 ;tslmain.c:800: key &= ~CTRL;
      001357 DD 5E FA         [19] 3668 	ld	e, -6 (ix)
      00135A DD 56 FB         [19] 3669 	ld	d, -5 (ix)
      00135D CB BA            [ 8] 3670 	res	7, d
      00135F DD 73 FE         [19] 3671 	ld	-2 (ix), e
      001362 DD 72 FF         [19] 3672 	ld	-1 (ix), d
                                   3673 ;tslmain.c:801: if (moving)
      001365 DD 7E FC         [19] 3674 	ld	a, -4 (ix)
      001368 B7               [ 4] 3675 	or	a, a
      001369 28 28            [12] 3676 	jr	Z, 00107$
                                   3677 ;tslmain.c:803: if (shifted)
      00136B DD 7E FD         [19] 3678 	ld	a, -3 (ix)
      00136E B7               [ 4] 3679 	or	a, a
      00136F 28 1D            [12] 3680 	jr	Z, 00104$
                                   3681 ;tslmain.c:805: if (!valid_select())
      001371 C5               [11] 3682 	push	bc
      001372 CDr89r02         [17] 3683 	call	_valid_select
      001375 C1               [10] 3684 	pop	bc
      001376 B7               [ 4] 3685 	or	a, a
      001377 20 05            [12] 3686 	jr	NZ, 00102$
                                   3687 ;tslmain.c:806: start_select();
      001379 C5               [11] 3688 	push	bc
      00137A CDr08r03         [17] 3689 	call	_start_select
      00137D C1               [10] 3690 	pop	bc
      00137E                       3691 00102$:
                                   3692 ;tslmain.c:807: key &= ~SHIFT;
      00137E DD 7E FE         [19] 3693 	ld	a, -2 (ix)
      001381 DD 46 FF         [19] 3694 	ld	b, -1 (ix)
      001384 CB B0            [ 8] 3695 	res	6, b
      001386 DD 77 FE         [19] 3696 	ld	-2 (ix), a
      001389 DD 70 FF         [19] 3697 	ld	-1 (ix), b
      00138C 18 05            [12] 3698 	jr	00107$
      00138E                       3699 00104$:
                                   3700 ;tslmain.c:810: clear_select();
      00138E C5               [11] 3701 	push	bc
      00138F CDrE5r02         [17] 3702 	call	_clear_select
      001392 C1               [10] 3703 	pop	bc
      001393                       3704 00107$:
                                   3705 ;tslmain.c:812: switch (key)
      001393 DD 7E FE         [19] 3706 	ld	a, -2 (ix)
      001396 D6 03            [ 7] 3707 	sub	a, #0x03
      001398 DD B6 FF         [19] 3708 	or	a, -1 (ix)
      00139B CAr7Dr15         [10] 3709 	jp	Z,00150$
      00139E DD 5E FE         [19] 3710 	ld	e, -2 (ix)
      0013A1 DD 56 FF         [19] 3711 	ld	d, -1 (ix)
      0013A4 7B               [ 4] 3712 	ld	a, e
      0013A5 D6 08            [ 7] 3713 	sub	a, #0x08
      0013A7 B2               [ 4] 3714 	or	a, d
      0013A8 CAr9Cr15         [10] 3715 	jp	Z,00154$
      0013AB 7B               [ 4] 3716 	ld	a, e
      0013AC D6 09            [ 7] 3717 	sub	a, #0x09
      0013AE B2               [ 4] 3718 	or	a, d
      0013AF CAr8Fr15         [10] 3719 	jp	Z,00153$
      0013B2 7B               [ 4] 3720 	ld	a, e
      0013B3 D6 0A            [ 7] 3721 	sub	a, #0x0a
      0013B5 B2               [ 4] 3722 	or	a, d
      0013B6 CArE7r15         [10] 3723 	jp	Z,00168$
      0013B9 7B               [ 4] 3724 	ld	a, e
      0013BA D6 0D            [ 7] 3725 	sub	a, #0x0d
      0013BC B2               [ 4] 3726 	or	a, d
      0013BD CArE7r15         [10] 3727 	jp	Z,00168$
      0013C0 DD 7E FE         [19] 3728 	ld	a, -2 (ix)
      0013C3 D6 16            [ 7] 3729 	sub	a, #0x16
      0013C5 DD B6 FF         [19] 3730 	or	a, -1 (ix)
      0013C8 CAr89r15         [10] 3731 	jp	Z,00152$
      0013CB DD 7E FE         [19] 3732 	ld	a, -2 (ix)
      0013CE D6 18            [ 7] 3733 	sub	a, #0x18
      0013D0 DD B6 FF         [19] 3734 	or	a, -1 (ix)
      0013D3 CAr83r15         [10] 3735 	jp	Z,00151$
      0013D6 7B               [ 4] 3736 	ld	a, e
      0013D7 D6 1B            [ 7] 3737 	sub	a, #0x1b
      0013D9 B2               [ 4] 3738 	or	a, d
      0013DA CAr5Fr15         [10] 3739 	jp	Z,00143$
      0013DD 7B               [ 4] 3740 	ld	a, e
      0013DE B7               [ 4] 3741 	or	a, a
      0013DF 20 05            [12] 3742 	jr	NZ, 00433$
      0013E1 7A               [ 4] 3743 	ld	a, d
      0013E2 3D               [ 4] 3744 	dec	a
      0013E3 CAr24r15         [10] 3745 	jp	Z,00138$
      0013E6                       3746 00433$:
      0013E6 7B               [ 4] 3747 	ld	a, e
      0013E7 B7               [ 4] 3748 	or	a, a
      0013E8 20 06            [12] 3749 	jr	NZ, 00434$
      0013EA 7A               [ 4] 3750 	ld	a, d
      0013EB D6 02            [ 7] 3751 	sub	a, #0x02
      0013ED CAr48r15         [10] 3752 	jp	Z,00142$
      0013F0                       3753 00434$:
      0013F0 7B               [ 4] 3754 	ld	a, e
      0013F1 B7               [ 4] 3755 	or	a, a
      0013F2 20 06            [12] 3756 	jr	NZ, 00435$
      0013F4 7A               [ 4] 3757 	ld	a, d
      0013F5 D6 03            [ 7] 3758 	sub	a, #0x03
      0013F7 CArF7r14         [10] 3759 	jp	Z,00134$
      0013FA                       3760 00435$:
      0013FA 7B               [ 4] 3761 	ld	a, e
      0013FB B7               [ 4] 3762 	or	a, a
      0013FC 20 06            [12] 3763 	jr	NZ, 00436$
      0013FE 7A               [ 4] 3764 	ld	a, d
      0013FF D6 04            [ 7] 3765 	sub	a, #0x04
      001401 CArDEr14         [10] 3766 	jp	Z,00130$
      001404                       3767 00436$:
      001404 7B               [ 4] 3768 	ld	a, e
      001405 B7               [ 4] 3769 	or	a, a
      001406 20 05            [12] 3770 	jr	NZ, 00437$
      001408 7A               [ 4] 3771 	ld	a, d
      001409 D6 05            [ 7] 3772 	sub	a, #0x05
      00140B 28 33            [12] 3773 	jr	Z, 00108$
      00140D                       3774 00437$:
      00140D 7B               [ 4] 3775 	ld	a, e
      00140E B7               [ 4] 3776 	or	a, a
      00140F 20 05            [12] 3777 	jr	NZ, 00438$
      001411 7A               [ 4] 3778 	ld	a, d
      001412 D6 06            [ 7] 3779 	sub	a, #0x06
      001414 28 4A            [12] 3780 	jr	Z, 00112$
      001416                       3781 00438$:
      001416 7B               [ 4] 3782 	ld	a, e
      001417 B7               [ 4] 3783 	or	a, a
      001418 20 05            [12] 3784 	jr	NZ, 00439$
      00141A 7A               [ 4] 3785 	ld	a, d
      00141B D6 07            [ 7] 3786 	sub	a, #0x07
      00141D 28 38            [12] 3787 	jr	Z, 00111$
      00141F                       3788 00439$:
      00141F 7B               [ 4] 3789 	ld	a, e
      001420 B7               [ 4] 3790 	or	a, a
      001421 20 05            [12] 3791 	jr	NZ, 00440$
      001423 7A               [ 4] 3792 	ld	a, d
      001424 D6 08            [ 7] 3793 	sub	a, #0x08
      001426 28 6F            [12] 3794 	jr	Z, 00120$
      001428                       3795 00440$:
      001428 7B               [ 4] 3796 	ld	a, e
      001429 B7               [ 4] 3797 	or	a, a
      00142A 20 06            [12] 3798 	jr	NZ, 00441$
      00142C 7A               [ 4] 3799 	ld	a, d
      00142D D6 0D            [ 7] 3800 	sub	a, #0x0d
      00142F CAr66r15         [10] 3801 	jp	Z,00144$
      001432                       3802 00441$:
      001432 7B               [ 4] 3803 	ld	a, e
      001433 B7               [ 4] 3804 	or	a, a
      001434 C2rF7r15         [10] 3805 	jp	NZ,00169$
      001437 7A               [ 4] 3806 	ld	a, d
      001438 D6 0E            [ 7] 3807 	sub	a, #0x0e
      00143A CArC8r15         [10] 3808 	jp	Z,00160$
      00143D C3rF7r15         [10] 3809 	jp	00169$
                                   3810 ;tslmain.c:814: case LEFT: if (cursor.x > 0) move_x_cursor(-1); break;
      001440                       3811 00108$:
      001440 2Ar44r01         [16] 3812 	ld	hl, (#_cursor + 0)
      001443 AF               [ 4] 3813 	xor	a, a
      001444 BD               [ 4] 3814 	cp	a, l
      001445 9C               [ 4] 3815 	sbc	a, h
      001446 E2r4Br14         [10] 3816 	jp	PO, 00443$
      001449 EE 80            [ 7] 3817 	xor	a, #0x80
      00144B                       3818 00443$:
      00144B F2r13r16         [10] 3819 	jp	P, 00173$
      00144E 21 FF FF         [10] 3820 	ld	hl, #0xffff
      001451 CDrD0r0C         [17] 3821 	call	_move_x_cursor
      001454 C3r13r16         [10] 3822 	jp	00173$
                                   3823 ;tslmain.c:815: case RIGHT: move_x_cursor(1); break;
      001457                       3824 00111$:
      001457 21 01 00         [10] 3825 	ld	hl, #0x0001
      00145A CDrD0r0C         [17] 3826 	call	_move_x_cursor
      00145D C3r13r16         [10] 3827 	jp	00173$
                                   3828 ;tslmain.c:816: case UP:
      001460                       3829 00112$:
                                   3830 ;tslmain.c:818: if (ctrl)
      001460 79               [ 4] 3831 	ld	a, c
      001461 B7               [ 4] 3832 	or	a, a
      001462 28 1C            [12] 3833 	jr	Z, 00118$
                                   3834 ;tslmain.c:820: if (offset.y > 0)
      001464 ED 4Br4Ar01      [20] 3835 	ld	bc, (#(_offset + 2) + 0)
      001468 59               [ 4] 3836 	ld	e, c
      001469 50               [ 4] 3837 	ld	d, b
      00146A AF               [ 4] 3838 	xor	a, a
      00146B BB               [ 4] 3839 	cp	a, e
      00146C 9A               [ 4] 3840 	sbc	a, d
      00146D E2r72r14         [10] 3841 	jp	PO, 00444$
      001470 EE 80            [ 7] 3842 	xor	a, #0x80
      001472                       3843 00444$:
      001472 F2r13r16         [10] 3844 	jp	P, 00173$
                                   3845 ;tslmain.c:822: --offset.y;
      001475 0B               [ 6] 3846 	dec	bc
      001476 ED 43r4Ar01      [20] 3847 	ld	((_offset + 2)), bc
                                   3848 ;tslmain.c:823: redraw_all();
      00147A CDr63r0A         [17] 3849 	call	_redraw_all
      00147D C3r13r16         [10] 3850 	jp	00173$
      001480                       3851 00118$:
                                   3852 ;tslmain.c:828: if (cursor.y > 0)
      001480 2Ar46r01         [16] 3853 	ld	hl, (#(_cursor + 2) + 0)
      001483 AF               [ 4] 3854 	xor	a, a
      001484 BD               [ 4] 3855 	cp	a, l
      001485 9C               [ 4] 3856 	sbc	a, h
      001486 E2r8Br14         [10] 3857 	jp	PO, 00445$
      001489 EE 80            [ 7] 3858 	xor	a, #0x80
      00148B                       3859 00445$:
      00148B F2r13r16         [10] 3860 	jp	P, 00173$
                                   3861 ;tslmain.c:829: move_y(-1);
      00148E 21 FF FF         [10] 3862 	ld	hl, #0xffff
      001491 CDr01r11         [17] 3863 	call	_move_y
                                   3864 ;tslmain.c:831: break;
      001494 C3r13r16         [10] 3865 	jp	00173$
                                   3866 ;tslmain.c:833: case DOWN:
      001497                       3867 00120$:
                                   3868 ;tslmain.c:835: if (ctrl)
      001497 79               [ 4] 3869 	ld	a, c
      001498 B7               [ 4] 3870 	or	a, a
      001499 28 2C            [12] 3871 	jr	Z, 00128$
                                   3872 ;tslmain.c:837: if (offset.y < vector_size(document))
      00149B 2Ar4Ar01         [16] 3873 	ld	hl, (#(_offset + 2) + 0)
      00149E E5               [11] 3874 	push	hl
      00149F 2Ar00r00         [16] 3875 	ld	hl, (_document)
      0014A2 CDr00r00         [17] 3876 	call	_vector_size
      0014A5 E1               [10] 3877 	pop	hl
      0014A6 AF               [ 4] 3878 	xor	a, a
      0014A7 ED 52            [15] 3879 	sbc	hl, de
      0014A9 D2r13r16         [10] 3880 	jp	NC, 00173$
                                   3881 ;tslmain.c:839: ++offset.y;
      0014AC ED 4Br4Ar01      [20] 3882 	ld	bc, (#(_offset + 2) + 0)
      0014B0 03               [ 6] 3883 	inc	bc
      0014B1 ED 43r4Ar01      [20] 3884 	ld	((_offset + 2)), bc
                                   3885 ;tslmain.c:840: if (!cursor_in_view())
      0014B5 CDr07r0A         [17] 3886 	call	_cursor_in_view
      0014B8 B7               [ 4] 3887 	or	a, a
      0014B9 20 06            [12] 3888 	jr	NZ, 00122$
                                   3889 ;tslmain.c:841: move_y(1);
      0014BB 21 01 00         [10] 3890 	ld	hl, #0x0001
      0014BE CDr01r11         [17] 3891 	call	_move_y
      0014C1                       3892 00122$:
                                   3893 ;tslmain.c:842: redraw_all();
      0014C1 CDr63r0A         [17] 3894 	call	_redraw_all
      0014C4 C3r13r16         [10] 3895 	jp	00173$
      0014C7                       3896 00128$:
                                   3897 ;tslmain.c:847: if (cursor.y < total_lines)
      0014C7 2Ar46r01         [16] 3898 	ld	hl, (#(_cursor + 2) + 0)
      0014CA 7D               [ 4] 3899 	ld	a, l
      0014CB DD 96 F6         [19] 3900 	sub	a, -10 (ix)
      0014CE 7C               [ 4] 3901 	ld	a, h
      0014CF DD 9E F7         [19] 3902 	sbc	a, -9 (ix)
      0014D2 D2r13r16         [10] 3903 	jp	NC, 00173$
                                   3904 ;tslmain.c:848: move_y(1);
      0014D5 21 01 00         [10] 3905 	ld	hl, #0x0001
      0014D8 CDr01r11         [17] 3906 	call	_move_y
                                   3907 ;tslmain.c:850: break;
      0014DB C3r13r16         [10] 3908 	jp	00173$
                                   3909 ;tslmain.c:852: case HOME:
      0014DE                       3910 00130$:
                                   3911 ;tslmain.c:854: if (ctrl)
      0014DE 79               [ 4] 3912 	ld	a, c
      0014DF B7               [ 4] 3913 	or	a, a
      0014E0 28 0C            [12] 3914 	jr	Z, 00132$
                                   3915 ;tslmain.c:856: cursor.y = 0;
      0014E2 21 00 00         [10] 3916 	ld	hl, #0x0000
      0014E5 22r46r01         [16] 3917 	ld	((_cursor + 2)), hl
                                   3918 ;tslmain.c:857: cursor.x = 0;
      0014E8 22r44r01         [16] 3919 	ld	(_cursor), hl
      0014EB C3r13r16         [10] 3920 	jp	00173$
      0014EE                       3921 00132$:
                                   3922 ;tslmain.c:860: cursor.x = 0;
      0014EE 21 00 00         [10] 3923 	ld	hl, #0x0000
      0014F1 22r44r01         [16] 3924 	ld	(_cursor), hl
                                   3925 ;tslmain.c:861: break;
      0014F4 C3r13r16         [10] 3926 	jp	00173$
                                   3927 ;tslmain.c:863: case END:
      0014F7                       3928 00134$:
                                   3929 ;tslmain.c:865: if (ctrl)
      0014F7 79               [ 4] 3930 	ld	a, c
      0014F8 B7               [ 4] 3931 	or	a, a
      0014F9 28 1A            [12] 3932 	jr	Z, 00136$
                                   3933 ;tslmain.c:867: cursor.y = vector_size(document) - 1;
      0014FB 2Ar00r00         [16] 3934 	ld	hl, (_document)
      0014FE CDr00r00         [17] 3935 	call	_vector_size
      001501 1B               [ 6] 3936 	dec	de
      001502 ED 53r46r01      [20] 3937 	ld	((_cursor + 2)), de
                                   3938 ;tslmain.c:868: Vector* end_line = get_line(cursor.y);
      001506 EB               [ 4] 3939 	ex	de, hl
      001507 CDrA9r03         [17] 3940 	call	_get_line
                                   3941 ;tslmain.c:869: cursor.x = vector_size(end_line);
      00150A EB               [ 4] 3942 	ex	de, hl
      00150B CDr00r00         [17] 3943 	call	_vector_size
      00150E ED 53r44r01      [20] 3944 	ld	(_cursor), de
      001512 C3r13r16         [10] 3945 	jp	00173$
      001515                       3946 00136$:
                                   3947 ;tslmain.c:872: cursor.x = n;
      001515 21r44r01         [10] 3948 	ld	hl, #_cursor
      001518 DD 7E F8         [19] 3949 	ld	a, -8 (ix)
      00151B 77               [ 7] 3950 	ld	(hl), a
      00151C 23               [ 6] 3951 	inc	hl
      00151D DD 7E F9         [19] 3952 	ld	a, -7 (ix)
      001520 77               [ 7] 3953 	ld	(hl), a
                                   3954 ;tslmain.c:873: break;
      001521 C3r13r16         [10] 3955 	jp	00173$
                                   3956 ;tslmain.c:875: case PGUP: if (cursor.y < 25) cursor.y = 0; else cursor.y -= 25; break;
      001524                       3957 00138$:
      001524 2Ar46r01         [16] 3958 	ld	hl, (#(_cursor + 2) + 0)
      001527 7D               [ 4] 3959 	ld	a, l
      001528 D6 19            [ 7] 3960 	sub	a, #0x19
      00152A 7C               [ 4] 3961 	ld	a, h
      00152B 17               [ 4] 3962 	rla
      00152C 3F               [ 4] 3963 	ccf
      00152D 1F               [ 4] 3964 	rra
      00152E DE 80            [ 7] 3965 	sbc	a, #0x80
      001530 30 09            [12] 3966 	jr	NC, 00140$
      001532 21 00 00         [10] 3967 	ld	hl, #0x0000
      001535 22r46r01         [16] 3968 	ld	((_cursor + 2)), hl
      001538 C3r13r16         [10] 3969 	jp	00173$
      00153B                       3970 00140$:
      00153B 01 E7 FF         [10] 3971 	ld	bc, #0xffe7
      00153E 09               [11] 3972 	add	hl,bc
      00153F 4D               [ 4] 3973 	ld	c, l
      001540 44               [ 4] 3974 	ld	b, h
      001541 ED 43r46r01      [20] 3975 	ld	((_cursor + 2)), bc
      001545 C3r13r16         [10] 3976 	jp	00173$
                                   3977 ;tslmain.c:876: case PGDN: cursor.y = min(cursor.y + 25, total_lines); break;
      001548                       3978 00142$:
      001548 2Ar46r01         [16] 3979 	ld	hl, (#(_cursor + 2) + 0)
      00154B 01 19 00         [10] 3980 	ld	bc, #0x0019
      00154E 09               [11] 3981 	add	hl, bc
      00154F DD 5E F6         [19] 3982 	ld	e, -10 (ix)
      001552 DD 56 F7         [19] 3983 	ld	d, -9 (ix)
      001555 CDr00r00         [17] 3984 	call	_min
      001558 ED 53r46r01      [20] 3985 	ld	((_cursor + 2)), de
      00155C C3r13r16         [10] 3986 	jp	00173$
                                   3987 ;tslmain.c:877: case 27: done = 1; break;
      00155F                       3988 00143$:
      00155F DD 36 F5 01      [19] 3989 	ld	-11 (ix), #0x01
      001563 C3r13r16         [10] 3990 	jp	00173$
                                   3991 ;tslmain.c:878: case INSERT:
      001566                       3992 00144$:
                                   3993 ;tslmain.c:880: if (ctrl) clipboard_copy();
      001566 79               [ 4] 3994 	ld	a, c
      001567 B7               [ 4] 3995 	or	a, a
      001568 28 06            [12] 3996 	jr	Z, 00148$
      00156A CDr34r11         [17] 3997 	call	_clipboard_copy
      00156D C3r13r16         [10] 3998 	jp	00173$
      001570                       3999 00148$:
                                   4000 ;tslmain.c:881: else if (shifted) clipboard_paste();
      001570 DD 7E FD         [19] 4001 	ld	a, -3 (ix)
      001573 B7               [ 4] 4002 	or	a, a
      001574 CAr13r16         [10] 4003 	jp	Z, 00173$
      001577 CDr4Er12         [17] 4004 	call	_clipboard_paste
                                   4005 ;tslmain.c:882: break;
      00157A C3r13r16         [10] 4006 	jp	00173$
                                   4007 ;tslmain.c:884: case CONTROL('C'): clipboard_copy(); break;
      00157D                       4008 00150$:
      00157D CDr34r11         [17] 4009 	call	_clipboard_copy
      001580 C3r13r16         [10] 4010 	jp	00173$
                                   4011 ;tslmain.c:885: case CONTROL('X'): clipboard_cut(); break;
      001583                       4012 00151$:
      001583 CDr43r12         [17] 4013 	call	_clipboard_cut
      001586 C3r13r16         [10] 4014 	jp	00173$
                                   4015 ;tslmain.c:886: case CONTROL('V'): clipboard_paste(); break;
      001589                       4016 00152$:
      001589 CDr4Er12         [17] 4017 	call	_clipboard_paste
      00158C C3r13r16         [10] 4018 	jp	00173$
                                   4019 ;tslmain.c:887: case 9:
      00158F                       4020 00153$:
                                   4021 ;tslmain.c:889: add_char(9);
      00158F 3E 09            [ 7] 4022 	ld	a, #0x09
      001591 CDr90r10         [17] 4023 	call	_add_char
                                   4024 ;tslmain.c:890: redraw_line(cursor.y);
      001594 2Ar46r01         [16] 4025 	ld	hl, (#(_cursor + 2) + 0)
      001597 CDrB9r02         [17] 4026 	call	_redraw_line
                                   4027 ;tslmain.c:891: break;
      00159A 18 77            [12] 4028 	jr	00173$
                                   4029 ;tslmain.c:893: case 8:
      00159C                       4030 00154$:
                                   4031 ;tslmain.c:895: if (cursor.x > 0)
      00159C 2Ar44r01         [16] 4032 	ld	hl, (#_cursor + 0)
      00159F AF               [ 4] 4033 	xor	a, a
      0015A0 BD               [ 4] 4034 	cp	a, l
      0015A1 9C               [ 4] 4035 	sbc	a, h
      0015A2 E2rA7r15         [10] 4036 	jp	PO, 00446$
      0015A5 EE 80            [ 7] 4037 	xor	a, #0x80
      0015A7                       4038 00446$:
      0015A7 F2rB5r15         [10] 4039 	jp	P, 00158$
                                   4040 ;tslmain.c:897: backspace();
      0015AA CDrE6r0F         [17] 4041 	call	_backspace
                                   4042 ;tslmain.c:898: redraw_line(cursor.y);
      0015AD 2Ar46r01         [16] 4043 	ld	hl, (#(_cursor + 2) + 0)
      0015B0 CDrB9r02         [17] 4044 	call	_redraw_line
      0015B3 18 5E            [12] 4045 	jr	00173$
      0015B5                       4046 00158$:
                                   4047 ;tslmain.c:901: if (cursor.y>0)
      0015B5 2Ar46r01         [16] 4048 	ld	hl, (#(_cursor + 2) + 0)
      0015B8 AF               [ 4] 4049 	xor	a, a
      0015B9 BD               [ 4] 4050 	cp	a, l
      0015BA 9C               [ 4] 4051 	sbc	a, h
      0015BB E2rC0r15         [10] 4052 	jp	PO, 00447$
      0015BE EE 80            [ 7] 4053 	xor	a, #0x80
      0015C0                       4054 00447$:
      0015C0 F2r13r16         [10] 4055 	jp	P, 00173$
                                   4056 ;tslmain.c:903: join_prev_line();
      0015C3 CDr34r0D         [17] 4057 	call	_join_prev_line
                                   4058 ;tslmain.c:905: break;
      0015C6 18 4B            [12] 4059 	jr	00173$
                                   4060 ;tslmain.c:907: case DEL:
      0015C8                       4061 00160$:
                                   4062 ;tslmain.c:909: if (ctrl) clipboard_cut();
      0015C8 79               [ 4] 4063 	ld	a, c
      0015C9 B7               [ 4] 4064 	or	a, a
      0015CA 28 05            [12] 4065 	jr	Z, 00165$
      0015CC CDr43r12         [17] 4066 	call	_clipboard_cut
      0015CF 18 42            [12] 4067 	jr	00173$
      0015D1                       4068 00165$:
                                   4069 ;tslmain.c:911: if (do_delete())
      0015D1 CDr1Ar0F         [17] 4070 	call	_do_delete
      0015D4 B7               [ 4] 4071 	or	a, a
      0015D5 28 08            [12] 4072 	jr	Z, 00162$
                                   4073 ;tslmain.c:912: redraw_line(cursor.y);
      0015D7 2Ar46r01         [16] 4074 	ld	hl, (#(_cursor + 2) + 0)
      0015DA CDrB9r02         [17] 4075 	call	_redraw_line
      0015DD 18 34            [12] 4076 	jr	00173$
      0015DF                       4077 00162$:
                                   4078 ;tslmain.c:915: redraw_from(cursor.y);
      0015DF 2Ar46r01         [16] 4079 	ld	hl, (#(_cursor + 2) + 0)
      0015E2 CDrC1r02         [17] 4080 	call	_redraw_from
                                   4081 ;tslmain.c:917: break;
      0015E5 18 2C            [12] 4082 	jr	00173$
                                   4083 ;tslmain.c:920: case 10:
      0015E7                       4084 00168$:
                                   4085 ;tslmain.c:922: add_enter();
      0015E7 D5               [11] 4086 	push	de
      0015E8 CDrEFr0F         [17] 4087 	call	_add_enter
      0015EB D1               [10] 4088 	pop	de
                                   4089 ;tslmain.c:923: redraw_from(prev_cursor.y);
      0015EC DD 6E F3         [19] 4090 	ld	l, -13 (ix)
                                   4091 ;	spillPairReg hl
                                   4092 ;	spillPairReg hl
      0015EF DD 66 F4         [19] 4093 	ld	h, -12 (ix)
                                   4094 ;	spillPairReg hl
                                   4095 ;	spillPairReg hl
      0015F2 D5               [11] 4096 	push	de
      0015F3 CDrC1r02         [17] 4097 	call	_redraw_from
      0015F6 D1               [10] 4098 	pop	de
                                   4099 ;tslmain.c:925: default:
      0015F7                       4100 00169$:
                                   4101 ;tslmain.c:927: if (key >= 32 && key < 127)
      0015F7 7B               [ 4] 4102 	ld	a, e
      0015F8 D6 20            [ 7] 4103 	sub	a, #0x20
      0015FA 7A               [ 4] 4104 	ld	a, d
      0015FB DE 00            [ 7] 4105 	sbc	a, #0x00
      0015FD 38 14            [12] 4106 	jr	C, 00173$
      0015FF 7B               [ 4] 4107 	ld	a, e
      001600 D6 7F            [ 7] 4108 	sub	a, #0x7f
      001602 7A               [ 4] 4109 	ld	a, d
      001603 DE 00            [ 7] 4110 	sbc	a, #0x00
      001605 30 0C            [12] 4111 	jr	NC, 00173$
                                   4112 ;tslmain.c:929: add_char((byte)key);
      001607 DD 7E FE         [19] 4113 	ld	a, -2 (ix)
      00160A CDr90r10         [17] 4114 	call	_add_char
                                   4115 ;tslmain.c:930: redraw_line(cursor.y);
      00160D 2Ar46r01         [16] 4116 	ld	hl, (#(_cursor + 2) + 0)
      001610 CDrB9r02         [17] 4117 	call	_redraw_line
                                   4118 ;tslmain.c:933: }
      001613                       4119 00173$:
                                   4120 ;tslmain.c:934: line = get_line(cursor.y);
      001613 2Ar46r01         [16] 4121 	ld	hl, (#(_cursor + 2) + 0)
      001616 CDrA9r03         [17] 4122 	call	_get_line
                                   4123 ;tslmain.c:935: n = vector_size(line);
      001619 EB               [ 4] 4124 	ex	de, hl
      00161A CDr00r00         [17] 4125 	call	_vector_size
      00161D DD 73 FE         [19] 4126 	ld	-2 (ix), e
      001620 DD 72 FF         [19] 4127 	ld	-1 (ix), d
                                   4128 ;tslmain.c:936: if (cursor.x > n) 
      001623 2Ar44r01         [16] 4129 	ld	hl, (#_cursor + 0)
      001626 DD 7E FE         [19] 4130 	ld	a, -2 (ix)
      001629 95               [ 4] 4131 	sub	a, l
      00162A DD 7E FF         [19] 4132 	ld	a, -1 (ix)
      00162D 9C               [ 4] 4133 	sbc	a, h
      00162E 30 0C            [12] 4134 	jr	NC, 00175$
                                   4135 ;tslmain.c:937: cursor.x = n;
      001630 21r44r01         [10] 4136 	ld	hl, #_cursor
      001633 DD 7E FE         [19] 4137 	ld	a, -2 (ix)
      001636 77               [ 7] 4138 	ld	(hl), a
      001637 23               [ 6] 4139 	inc	hl
      001638 DD 7E FF         [19] 4140 	ld	a, -1 (ix)
      00163B 77               [ 7] 4141 	ld	(hl), a
      00163C                       4142 00175$:
                                   4143 ;tslmain.c:938: if (moving && shifted)
      00163C DD 7E FC         [19] 4144 	ld	a, -4 (ix)
      00163F B7               [ 4] 4145 	or	a, a
      001640 28 16            [12] 4146 	jr	Z, 00177$
      001642 DD 7E FD         [19] 4147 	ld	a, -3 (ix)
      001645 B7               [ 4] 4148 	or	a, a
      001646 28 10            [12] 4149 	jr	Z, 00177$
                                   4150 ;tslmain.c:940: extend_select();
      001648 CDr1Fr03         [17] 4151 	call	_extend_select
                                   4152 ;tslmain.c:941: redraw_range(prev_cursor.y, cursor.y);
      00164B ED 5Br46r01      [20] 4153 	ld	de, (#(_cursor + 2) + 0)
      00164F DD 6E F3         [19] 4154 	ld	l, -13 (ix)
                                   4155 ;	spillPairReg hl
                                   4156 ;	spillPairReg hl
      001652 DD 66 F4         [19] 4157 	ld	h, -12 (ix)
                                   4158 ;	spillPairReg hl
                                   4159 ;	spillPairReg hl
      001655 CDrCBr02         [17] 4160 	call	_redraw_range
      001658                       4161 00177$:
                                   4162 ;tslmain.c:943: place_cursor();
      001658 CDrD2r0A         [17] 4163 	call	_place_cursor
                                   4164 ;tslmain.c:944: draw_screen();
      00165B CDrE2r0B         [17] 4165 	call	_draw_screen
                                   4166 ;tslmain.c:945: draw_cursor_position();
      00165E CDrA9r0B         [17] 4167 	call	_draw_cursor_position
                                   4168 ;tslmain.c:946: place_cursor();
      001661 CDrD2r0A         [17] 4169 	call	_place_cursor
      001664 C3rB1r12         [10] 4170 	jp	00179$
      001667                       4171 00182$:
                                   4172 ;tslmain.c:948: }
      001667 DD F9            [10] 4173 	ld	sp, ix
      001669 DD E1            [14] 4174 	pop	ix
      00166B C9               [10] 4175 	ret
                                   4176 ;tslmain.c:956: int MAIN(char** args)
                                   4177 ;	---------------------------------
                                   4178 ; Function main
                                   4179 ; ---------------------------------
      00166C                       4180 _main::
                                   4181 ;tslmain.c:958: init_state();
      00166C E5               [11] 4182 	push	hl
      00166D CDr00r00         [17] 4183 	call	_init_state
      001670 CDr00r00         [17] 4184 	call	_alloc_init
      001673 CDr00r00         [17] 4185 	call	_hal_init
      001676 21 01 00         [10] 4186 	ld	hl, #0x0001
      001679 CDr00r00         [17] 4187 	call	_vector_new
      00167C E1               [10] 4188 	pop	hl
      00167D ED 53r02r00      [20] 4189 	ld	(_clipboard), de
                                   4190 ;tslmain.c:962: vector_reserve(clipboard, 256);
      001681 E5               [11] 4191 	push	hl
      001682 11 00 01         [10] 4192 	ld	de, #0x0100
      001685 2Ar02r00         [16] 4193 	ld	hl, (_clipboard)
      001688 CDr00r00         [17] 4194 	call	_vector_reserve
      00168B 21 02 00         [10] 4195 	ld	hl, #0x0002
      00168E CDr00r00         [17] 4196 	call	_vector_new
      001691 E1               [10] 4197 	pop	hl
      001692 ED 53r00r00      [20] 4198 	ld	(_document), de
                                   4199 ;tslmain.c:964: if (args[0])
      001696 4E               [ 7] 4200 	ld	c, (hl)
      001697 23               [ 6] 4201 	inc	hl
      001698 66               [ 7] 4202 	ld	h, (hl)
                                   4203 ;	spillPairReg hl
      001699 7C               [ 4] 4204 	ld	a, h
      00169A B1               [ 4] 4205 	or	a, c
      00169B 28 04            [12] 4206 	jr	Z, 00102$
                                   4207 ;tslmain.c:966: load_file(args[0]);
      00169D 69               [ 4] 4208 	ld	l, c
                                   4209 ;	spillPairReg hl
                                   4210 ;	spillPairReg hl
      00169E CDr9Fr04         [17] 4211 	call	_load_file
      0016A1                       4212 00102$:
                                   4213 ;tslmain.c:968: fg = 0x3F;
      0016A1 21r00r00         [10] 4214 	ld	hl, #_fg
      0016A4 36 3F            [10] 4215 	ld	(hl), #0x3f
                                   4216 ;tslmain.c:969: bg = 0x40;
      0016A6 21r01r00         [10] 4217 	ld	hl, #_bg
      0016A9 36 40            [10] 4218 	ld	(hl), #0x40
                                   4219 ;tslmain.c:970: draw_frame();
      0016AB CDrAEr06         [17] 4220 	call	_draw_frame
                                   4221 ;tslmain.c:971: draw_screen();
      0016AE CDrE2r0B         [17] 4222 	call	_draw_screen
                                   4223 ;tslmain.c:972: hal_blink(1);
      0016B1 3E 01            [ 7] 4224 	ld	a, #0x01
      0016B3 CDr00r00         [17] 4225 	call	_hal_blink
                                   4226 ;tslmain.c:973: event_loop();
      0016B6 CDr94r12         [17] 4227 	call	_event_loop
                                   4228 ;tslmain.c:974: hal_shutdown();
      0016B9 CDr00r00         [17] 4229 	call	_hal_shutdown
                                   4230 ;tslmain.c:975: clear();
      0016BC CDr53r03         [17] 4231 	call	_clear
                                   4232 ;tslmain.c:976: vector_shut(document);
      0016BF 2Ar00r00         [16] 4233 	ld	hl, (_document)
      0016C2 CDr00r00         [17] 4234 	call	_vector_shut
                                   4235 ;tslmain.c:977: return 0;
      0016C5 11 00 00         [10] 4236 	ld	de, #0x0000
                                   4237 ;tslmain.c:978: }
      0016C8 C9               [10] 4238 	ret
                                   4239 	.area _CODE
                                   4240 	.area _INITIALIZER
      000000                       4241 __xinit__fg:
      000000 FF                    4242 	.db #0xff	; 255
      000001                       4243 __xinit__bg:
      000001 00                    4244 	.db #0x00	; 0
      000002                       4245 __xinit__insert:
      000002 01                    4246 	.db #0x01	; 1
                                   4247 	.area _CABS (ABS)
