ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 1.
Hexadecimal [24-Bits]



                                      1 	.area _CODE
                                      2 	.globl _main
                                      3 	
                                      4 	.globl _input_write_ptr
                                      5 	.globl _input_read_ptr
                                      6 	.globl _globals_area
                                      7 
                                      8 	
                                      9 
                                     10 
                                     11 
                                     12 
                                     13 
                                     14 
                                     15 
                                     16 
                                     17 
                                     18 
                                     19 
                                     20 
                                     21 
                                     22 
                                     23 
      000000                         24 _init::
      000000 21 00 FF         [10]   25 	LD		HL,#0xFF00	; Initialize stack pointer
      000003 F9               [ 6]   26 	LD		SP,HL
      000004 AF               [ 4]   27 	XOR		A			;\ I=0
      000005 ED 47            [ 9]   28 	LD		I,A			;/
      000007 ED 5E            [ 8]   29 	IM		2			; Interrupt mode 2
      000009 FB               [ 4]   30 	EI					; Enable interrupts
      00000A C3 00 00         [10]   31 	JP		_main
                                     32 
                                     33 
                                     34 ;	AREA 0xF0 - 0xFF  contains the CPU state
                                     35 ;	0xF0	AF
                                     36 ;	0xF2	BC
                                     37 ;	0xF4	DE
                                     38 ;	0xF6	HL
                                     39 ;	0xF8	SP
                                     40 ;	0xFA	IX
                                     41 ;	0xFC	IY
                                     42 ;	0xFE	PC
      00000D                         43 isr20::
      00000D D9               [ 4]   44 	EXX
      00000E E1               [10]   45 	POP		HL		; Get the return address, which is the next PC
      00000F E5               [11]   46 	PUSH	HL		; Place it back on stack
      000010 22 FE 00         [16]   47 	LD		(#0XFE),HL
      000013 F5               [11]   48 	PUSH	AF
      000014 E1               [10]   49 	POP		HL
      000015 22 F0 00         [16]   50 	LD		(#0xF0),HL
      000018 D9               [ 4]   51 	EXX
      000019 ED 43 F2 00      [20]   52 	LD		(#0xF2),BC
      00001D ED 53 F4 00      [20]   53 	LD		(#0xF4),DE
      000021 22 F6 00         [16]   54 	LD		(#0xF6),HL
      000024 ED 73 F8 00      [20]   55 	LD		(#0xF8),SP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 2.
Hexadecimal [24-Bits]



      000028 DD 22 FA 00      [20]   56 	LD		(#0xFA),IX
      00002C FD 22 FC 00      [20]   57 	LD		(#0xFC),IY
      000030 D3 03            [11]   58 	OUT		(3),A	; Tell the IO controller the state is ready in RAM
      000032 FB               [ 4]   59 	EI
      000033 ED 4D            [14]   60 	RETI
                                     61 
      000035                         62 isr22::
      000035 DD E5            [15]   63 	PUSH	IX
      000037 E5               [11]   64 	PUSH	HL
      000038 F5               [11]   65 	PUSH	AF
      000039 DD 21 00 00      [14]   66 	LD		IX,#_input_write_ptr
      00003D DD 7E 00         [19]   67 	LD		A,0(IX)
      000040 3C               [ 4]   68 	INC		A
      000041 DD BE 01         [19]   69 	CP		1(IX)
      000044 28 0C            [12]   70 	JR		Z,isr22_full
      000046 DD 6E 00         [19]   71 	LD		L,0(IX)
      000049 26 01            [ 7]   72 	LD		H,#1
      00004B DB 00            [11]   73 	IN		A,(0)
      00004D 77               [ 7]   74 	LD		(HL),A
      00004E 2C               [ 4]   75 	INC		L
      00004F DD 75 00         [19]   76 	LD		0(IX),L
      000052                         77 isr22_full:
      000052 F1               [10]   78 	POP		AF
      000053 E1               [10]   79 	POP		HL
      000054 DD E1            [14]   80 	POP		IX
      000056 FB               [ 4]   81 	EI
      000057 ED 4D            [14]   82 	RETI
                                     83 
      000059                         84 isr24::
      000059 FB               [ 4]   85 	EI
      00005A ED 4D            [14]   86 	RETI
                                     87 
      00005C                         88 isr26::
      00005C FB               [ 4]   89 	EI
      00005D ED 4D            [14]   90 	RETI
                                     91 
      00005F                         92 isr28::
      00005F FB               [ 4]   93 	EI
      000060 ED 4D            [14]   94 	RETI
                                     95 
      000062                         96 isr2a::
      000062 FB               [ 4]   97 	EI
      000063 ED 4D            [14]   98 	RETI
                                     99 
      000065                        100 isr2c::
      000065 FB               [ 4]  101 	EI
      000066 ED 4D            [14]  102 	RETI
                                    103 
      000068                        104 isr2e::
      000068 FB               [ 4]  105 	EI
      000069 ED 4D            [14]  106 	RETI
                                    107 
      00006B                        108 isr30::
      00006B FB               [ 4]  109 	EI
      00006C ED 4D            [14]  110 	RETI
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 3.
Hexadecimal [24-Bits]



                                    111 
      00006E                        112 isr32::
      00006E FB               [ 4]  113 	EI
      00006F ED 4D            [14]  114 	RETI
                                    115 
      000071                        116 isr34::
      000071 FB               [ 4]  117 	EI
      000072 ED 4D            [14]  118 	RETI
                                    119 
      000074                        120 isr36::
      000074 FB               [ 4]  121 	EI
      000075 ED 4D            [14]  122 	RETI
                                    123 
      000077                        124 isr38::
      000077 FB               [ 4]  125 	EI
      000078 ED 4D            [14]  126 	RETI
                                    127 
      00007A                        128 isr3a::
      00007A FB               [ 4]  129 	EI
      00007B ED 4D            [14]  130 	RETI
                                    131 
      00007D                        132 isr3c::
      00007D FB               [ 4]  133 	EI
      00007E ED 4D            [14]  134 	RETI
                                    135 
      000080                        136 isr3e::
      000080 FB               [ 4]  137 	EI
      000081 ED 4D            [14]  138 	RETI
                                    139 
      000083                        140 input_empty::
      000083 3A 00 00         [13]  141 	LD		A,(#_input_write_ptr)
      000086 6F               [ 4]  142 	LD		L,A
      000087 3A 00 00         [13]  143 	LD		A,(#_input_read_ptr)
      00008A 95               [ 4]  144 	SUB		L
      00008B 3E 01            [ 7]  145 	LD		A,#1
      00008D C8               [11]  146 	RET		Z
      00008E AF               [ 4]  147 	XOR		A
      00008F C9               [10]  148 	RET
                                    149 
      000090                        150 input_read::
      000090 3A 00 00         [13]  151 	LD		A,(#_input_read_ptr)
      000093 26 01            [ 7]  152 	LD		H,#1    ; Input buffer at 0x0100, so H=1, L=offset
      000095 6F               [ 4]  153 	LD		L,A
      000096 5E               [ 7]  154 	LD		E,(HL)	; Byte read
      000097 23               [ 6]  155 	INC		HL
      000098 56               [ 7]  156 	LD		D,(HL)
      000099 2C               [ 4]  157 	INC		L
      00009A 7D               [ 4]  158 	LD		A,L
      00009B 32 00 00         [13]  159 	LD		(#_input_read_ptr),A
      00009E C9               [10]  160 	RET
                                    161 
      00009F                        162 strlen::
      00009F 01 FF 00         [10]  163 	LD		BC,#255
      0000A2 AF               [ 4]  164 	XOR		A
      0000A3 ED B1            [21]  165 	CPIR
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 4.
Hexadecimal [24-Bits]



      0000A5 79               [ 4]  166 	LD		A,C
      0000A6 ED 44            [ 8]  167 	NEG
      0000A8 D6 02            [ 7]  168 	SUB		#2
      0000AA C9               [10]  169 	RET
                                    170 
                                    171 ; copy string from HL -> DE
      0000AB                        172 strcpy::
      0000AB E5               [11]  173 	PUSH	HL
      0000AC CD 9F 00         [17]  174 	CALL	strlen
      0000AF 06 00            [ 7]  175 	LD		B,#0
      0000B1 4F               [ 4]  176 	LD		C,A
      0000B2 0C               [ 4]  177 	INC		C
      0000B3 E1               [10]  178 	POP		HL
      0000B4 ED B0            [21]  179 	LDIR
      0000B6 C9               [10]  180 	RET
                                    181 
      0000B7                        182 print_text::
      0000B7 3E 1E            [ 7]  183 	LD		A,#30		; Send 30, code for print
      0000B9 D3 00            [11]  184 	OUT		(0),A
      0000BB E5               [11]  185 	PUSH	HL
      0000BC CD 9F 00         [17]  186 	call	strlen
      0000BF D3 00            [11]  187 	OUT		(0),A	; strlen returns length in A,  send it
      0000C1 47               [ 4]  188 	LD		B,A
      0000C2 0E 00            [ 7]  189 	LD		C,#0
      0000C4 E1               [10]  190 	POP		HL			; restore text pointer
      0000C5 ED B3            [21]  191 	OTIR
      0000C7 C9               [10]  192 	RET
                                    193 	
      0000C8                        194 rng::
      0000C8 21                     195 	.db 0x21
      0000C9                        196 seed1:
      0000C9 0F 27                  197 	.db 0x0F, 0x27
      0000CB 44               [ 4]  198 	LD		B,H
      0000CC 4D               [ 4]  199 	LD		C,L
      0000CD 29               [11]  200 	ADD		HL,HL
      0000CE 29               [11]  201 	ADD		HL,HL
      0000CF 2C               [ 4]  202 	INC		L
      0000D0 09               [11]  203 	ADD		HL,BC
      0000D1 22 C9 00         [16]  204 	LD		(seed1),HL
      0000D4 21                     205 	.db 0x21
      0000D5                        206 seed2:
      0000D5 DB 03                  207 	.db 0xDB, 0x03
      0000D7 29               [11]  208 	ADD HL,HL
      0000D8 9F               [ 4]  209 	SBC A,A
      0000D9 E6 2D            [ 7]  210 	AND #0X2D	;#101101b
      0000DB AD               [ 4]  211 	XOR L
      0000DC 6F               [ 4]  212 	LD L,A
      0000DD 22 D5 00         [16]  213 	LD (seed2),HL
      0000E0 09               [11]  214 	ADD HL,BC
      0000E1 C9               [10]  215 	RET
                                    216 
      0000E2                        217 cls::
      0000E2 3E 01            [ 7]  218 	LD		A,#1
      0000E4 D3 00            [11]  219 	OUT		(0),A
      0000E6 C9               [10]  220 	RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 5.
Hexadecimal [24-Bits]



                                    221 	
      0000E7                        222 newline::
      0000E7 3E 04            [ 7]  223 	LD		A,#4
      0000E9 D3 00            [11]  224 	OUT		(0),A
      0000EB C9               [10]  225 	RET
                                    226 
                                    227 ; copy block starting at HL+1, with length at (HL)
      0000EC                        228 gpu_block::
      0000EC 46               [ 7]  229 	LD		B,(HL)			; C = number of bytes to copy
      0000ED 0E 00            [ 7]  230 	LD		C,#0			; BC = number of bytes to copy
      0000EF 23               [ 6]  231 	INC		HL				; HL = pointer to data
      0000F0 ED B3            [21]  232 	OTIR
      0000F2 C9               [10]  233 	RET
                                    234 
                                    235 
      0000F3                        236 timer::
      0000F3 2A EC 00         [16]  237 	LD		HL,(#0xEC)
      0000F6 C9               [10]  238 	RET
                                    239 
                                    240 
                                    241 ; byte list_dir(const byte* path, byte* filename, word* size)
      0000F7                        242 list_dir::
                                    243 	; HL = path
                                    244 	; DE = filename
                                    245 	; (SP+2)=pointer to size  (need to remove)
      0000F7 DD E5            [15]  246 	PUSH	IX
      0000F9 DD 21 00 00      [14]  247 	LD		IX,#0
      0000FD DD 39            [15]  248 	ADD		IX,SP
      0000FF 22 E0 00         [16]  249 	LD		(#0xE0),HL
      000102 ED 53 E2 00      [20]  250 	LD		(#0xE2),DE
      000106 DD 5E 04         [19]  251 	LD		E,4(IX)
      000109 DD 56 05         [19]  252 	LD		D,5(IX)
      00010C ED 53 E4 00      [20]  253 	LD		(#0xE4),DE
      000110 3E 01            [ 7]  254 	LD		A,     #1
      000112 D3 01            [11]  255 	OUT		(1),A
      000114 00               [ 4]  256 	NOP
      000115 00               [ 4]  257 	NOP
      000116 00               [ 4]  258 	NOP
      000117 DB 01            [11]  259 	IN		A,(1)		; Wait for completion and get return code
      000119 00               [ 4]  260 	NOP
      00011A 00               [ 4]  261 	NOP
      00011B 00               [ 4]  262 	NOP
      00011C 00               [ 4]  263 	NOP
      00011D DD E1            [14]  264 	POP		IX
      00011F E1               [10]  265 	POP		HL			; return address
      000120 D1               [10]  266 	POP		DE			; pop size parameter
      000121 E9               [ 4]  267 	JP		(HL)
                                    268 	
                                    269 ; byte list_next(byte* filename, word* size)
      000122                        270 list_next::
                                    271 	; HL=filename
                                    272 	; DE=size
      000122 22 E2 00         [16]  273 	LD		(#0xE2),HL
      000125 ED 53 E4 00      [20]  274 	LD		(#0xE4),DE
      000129 3E 02            [ 7]  275 	LD		A,    #2
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 6.
Hexadecimal [24-Bits]



      00012B D3 01            [11]  276 	OUT		(1),A
      00012D 00               [ 4]  277 	NOP
      00012E DB 01            [11]  278 	IN		A,(1)		; Wait for completion and get return code
      000130 C9               [10]  279 	RET
                                    280 		
                                    281 ; byte open_file(const char* filename, byte write)
                                    282 ; HL = filename
                                    283 ; (SP+2) = write
                                    284 ; function needs to pop single byte SP+2
      000131                        285 open_file::
      000131 DD E5            [15]  286 	PUSH	IX
      000133 DD 21 00 00      [14]  287 	LD		IX,#0
      000137 DD 39            [15]  288 	ADD		IX,SP
                                    289 	
      000139 22 E0 00         [16]  290 	LD		(#0xE0),HL
      00013C DD 6E 04         [19]  291 	LD		L,4(IX)
      00013F 26 00            [ 7]  292 	LD		H,#0
      000141 22 E2 00         [16]  293 	LD		(#0xE2),HL
                                    294 
      000144 3E 03            [ 7]  295 	LD		A,    #3
      000146 D3 01            [11]  296 	OUT		(1),A
      000148 00               [ 4]  297 	NOP
      000149 DB 01            [11]  298 	IN		A,(1)		; Wait for completion and get return code
                                    299 
      00014B DD E1            [14]  300 	POP		IX
      00014D E1               [10]  301 	POP		HL
      00014E 33               [ 6]  302 	INC		SP ;	pop write parameter
      00014F E9               [ 4]  303 	JP		(HL)
                                    304 
                                    305 
                                    306 ; word read_file(byte handle, byte* buffer, word size)
                                    307 ; A=handle
                                    308 ; DE=buffer
                                    309 ; (SP+2)=size
                                    310 ; function needs to pop 2 bytes for (SP+2)
                                    311 ; return word in DE
      000150                        312 read_file::
      000150 DD E5            [15]  313 	PUSH	IX
      000152 DD 21 00 00      [14]  314 	LD		IX,#0
      000156 DD 39            [15]  315 	ADD		IX,SP
                                    316 	
      000158 6F               [ 4]  317 	LD		L,A
      000159 26 00            [ 7]  318 	LD		H,#0
      00015B 22 E0 00         [16]  319 	LD		(#0xE0),HL
      00015E ED 53 E2 00      [20]  320 	LD		(#0xE2),DE
      000162 DD 5E 04         [19]  321 	LD		E,4(IX)
      000165 DD 56 05         [19]  322 	LD		D,5(IX)
      000168 ED 53 E4 00      [20]  323 	LD		(#0xE4),DE
                                    324 	
      00016C 3E 04            [ 7]  325 	LD		A,    #4
      00016E D3 01            [11]  326 	OUT		(1),A
      000170 00               [ 4]  327 	NOP
      000171 DB 01            [11]  328 	IN		A,(1)		; Wait for completion and get return code
                                    329 	
      000173 ED 5B E4 00      [20]  330 	LD		DE,(#0xE4)	; Load number of bytes read
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 7.
Hexadecimal [24-Bits]



                                    331 	
      000177 DD E1            [14]  332 	POP		IX
      000179 E1               [10]  333 	POP		HL	; return address
      00017A C1               [10]  334 	POP		BC	; pop size
      00017B E9               [ 4]  335 	JP		(HL)
                                    336 
                                    337 
                                    338 ; File handle in A
                                    339 ; Return code also in A
      00017C                        340 close_file::
      00017C 6F               [ 4]  341 	LD		L,A
      00017D 26 00            [ 7]  342 	LD		H,#0
      00017F 22 E0 00         [16]  343 	LD		(#0xE0),HL
                                    344 
      000182 3E 06            [ 7]  345 	LD		A,   #6
      000184 D3 01            [11]  346 	OUT		(1),A
      000186 00               [ 4]  347 	NOP
      000187 DB 01            [11]  348 	IN		A,(1)		; Wait for completion and get return code
                                    349 
      000189 C9               [10]  350 	RET
                                    351 
                                    352 
                                    353 ; HL = filename
                                    354 ; (SP+2) = index
                                    355 ; function needs to pop single byte SP+2
      00018A                        356 load_sprites::
      00018A DD E5            [15]  357 	PUSH	IX
      00018C DD 21 00 00      [14]  358 	LD		IX,#0
      000190 DD 39            [15]  359 	ADD		IX,SP
                                    360 	
      000192 22 E0 00         [16]  361 	LD		(#0xE0),HL
      000195 DD 6E 04         [19]  362 	LD		L,4(IX)
      000198 26 00            [ 7]  363 	LD		H,#0
      00019A 22 E2 00         [16]  364 	LD		(#0xE2),HL
                                    365 	
      00019D 3E 07            [ 7]  366 	LD		A, #7
      00019F D3 01            [11]  367 	OUT		(1),A
      0001A1 00               [ 4]  368 	NOP
      0001A2 DB 01            [11]  369 	IN		A,(1)		; Wait for completion and get return code
                                    370 
      0001A4 DD E1            [14]  371 	POP		IX
      0001A6 E1               [10]  372 	POP		HL	;	return address
      0001A7 33               [ 6]  373 	INC		SP  ;	pop index parameter
      0001A8 E9               [ 4]  374 	JP		(HL)
                                    375 
                                    376 
                                    377 ;
                                    378 ;
                                    379 ;
                                    380 ;
      0001A9                        381 div_mod::
      0001A9 5E               [ 7]  382 	LD		E,(HL)
      0001AA 23               [ 6]  383 	INC		HL
      0001AB 56               [ 7]  384 	LD		D,(HL)
      0001AC 23               [ 6]  385 	INC		HL
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 8.
Hexadecimal [24-Bits]



      0001AD 4E               [ 7]  386 	LD		C,(HL)
      0001AE E5               [11]  387 	PUSH	HL
      0001AF EB               [ 4]  388 	EX		DE,HL
      0001B0 AF               [ 4]  389 	XOR		A
      0001B1 06 10            [ 7]  390 	LD		B,#16
      0001B3                        391 _loop_div_mod:
      0001B3 29               [11]  392 	ADD		HL, HL
      0001B4 17               [ 4]  393 	RLA
      0001B5 38 03            [12]  394 	JR		C, _div_mod_j1
      0001B7 B9               [ 4]  395 	CP		C
      0001B8 38 02            [12]  396 	JR		C, _div_mod_j2
      0001BA                        397 _div_mod_j1:
      0001BA 91               [ 4]  398 	SUB		C
      0001BB 2C               [ 4]  399 	INC		L
      0001BC                        400 _div_mod_j2:
      0001BC 10 F5            [13]  401 	DJNZ	_loop_div_mod
                                    402 
      0001BE EB               [ 4]  403 	EX	DE,HL
      0001BF E1               [10]  404 	POP	HL
      0001C0 77               [ 7]  405 	LD	(HL),A
      0001C1 2B               [ 6]  406 	DEC	HL
      0001C2 72               [ 7]  407 	LD	(HL),D
      0001C3 2B               [ 6]  408 	DEC	HL
      0001C4 73               [ 7]  409 	LD	(HL),E
      0001C5 C9               [10]  410 	RET
                                    411 	
      0001C6                        412 bounds_check::
      0001C6 7A               [ 4]  413 	LD		A,D
      0001C7 BC               [ 4]  414 	CP		H
      0001C8 38 04            [12]  415 	JR		C, _bounds_error	; D-H < 0  -> error
      0001CA C0               [11]  416 	RET		NZ					; D-H > 0  -> no error
      0001CB 7B               [ 4]  417 	LD  	A,E
      0001CC BD               [ 4]  418 	CP		L
      0001CD D0               [11]  419 	RET		NC	; H=D & L<=E  no error
      0001CE                        420 _bounds_error:
      0001CE 21 FF 00         [10]  421 	LD		HL,#0xFF
      0001D1 36 01            [10]  422 	LD		(HL),#1
      0001D3 C9               [10]  423 	RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 9.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000000 L   |   0 _bounds_   0001CE R   |   0 _div_mod   0001BA R
  0 _div_mod   0001BC R   |     _globals   ****** GX  |   0 _init      000000 GR
    _input_r   ****** GX  |     _input_w   ****** GX  |   0 _loop_di   0001B3 R
    _main      ****** GX  |   0 bounds_c   0001C6 GR  |   0 close_fi   00017C GR
  0 cls        0000E2 GR  |   0 div_mod    0001A9 GR  |   0 gpu_bloc   0000EC GR
  0 input_em   000083 GR  |   0 input_re   000090 GR  |   0 isr20      00000D GR
  0 isr22      000035 GR  |   0 isr22_fu   000052 R   |   0 isr24      000059 GR
  0 isr26      00005C GR  |   0 isr28      00005F GR  |   0 isr2a      000062 GR
  0 isr2c      000065 GR  |   0 isr2e      000068 GR  |   0 isr30      00006B GR
  0 isr32      00006E GR  |   0 isr34      000071 GR  |   0 isr36      000074 GR
  0 isr38      000077 GR  |   0 isr3a      00007A GR  |   0 isr3c      00007D GR
  0 isr3e      000080 GR  |   0 list_dir   0000F7 GR  |   0 list_nex   000122 GR
  0 load_spr   00018A GR  |   0 newline    0000E7 GR  |   0 open_fil   000131 GR
  0 print_te   0000B7 GR  |   0 read_fil   000150 GR  |   0 rng        0000C8 GR
  0 seed1      0000C9 R   |   0 seed2      0000D5 R   |   0 strcpy     0000AB GR
  0 strlen     00009F GR  |   0 timer      0000F3 GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 10.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size    1D4   flags    0

