ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 1.
Hexadecimal [24-Bits]



                                      1 	.area _CODE
                                      2 	.globl _main
                                      3 	
                                      4 	.globl _input_write_ptr
                                      5 	.globl _input_read_ptr
                                      6 	.globl _globals_area
                                      7 
                                      8 	
                                      9 
                                     10 
                                     11 
                                     12 
                                     13 
                                     14 
                                     15 
                                     16 
                                     17 
                                     18 
                                     19 
                                     20 
                                     21 
                                     22 
                                     23 
      000000                         24 _init::
      000000 21 00 FF         [10]   25 	LD		HL,#0xFF00	; Initialize stack pointer
      000003 F9               [ 6]   26 	LD		SP,HL
      000004 AF               [ 4]   27 	XOR		A			;\ I=0
      000005 ED 47            [ 9]   28 	LD		I,A			;/
      000007 ED 5E            [ 8]   29 	IM		2			; Interrupt mode 2
      000009 FB               [ 4]   30 	EI					; Enable interrupts
      00000A C3 00 00         [10]   31 	JP		_main
                                     32 
                                     33 
                                     34 ;	AREA 0xF0 - 0xFF  contains the CPU state
                                     35 ;	0xF0	AF
                                     36 ;	0xF2	BC
                                     37 ;	0xF4	DE
                                     38 ;	0xF6	HL
                                     39 ;	0xF8	SP
                                     40 ;	0xFA	IX
                                     41 ;	0xFC	IY
                                     42 ;	0xFE	PC
      00000D                         43 isr20::
      00000D D9               [ 4]   44 	EXX
      00000E E1               [10]   45 	POP		HL		; Get the return address, which is the next PC
      00000F E5               [11]   46 	PUSH	HL		; Place it back on stack
      000010 22 FE 00         [16]   47 	LD		(#0XFE),HL
      000013 F5               [11]   48 	PUSH	AF
      000014 E1               [10]   49 	POP		HL
      000015 22 F0 00         [16]   50 	LD		(#0xF0),HL
      000018 D9               [ 4]   51 	EXX
      000019 ED 43 F2 00      [20]   52 	LD		(#0xF2),BC
      00001D ED 53 F4 00      [20]   53 	LD		(#0xF4),DE
      000021 22 F6 00         [16]   54 	LD		(#0xF6),HL
      000024 ED 73 F8 00      [20]   55 	LD		(#0xF8),SP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 2.
Hexadecimal [24-Bits]



      000028 DD 22 FA 00      [20]   56 	LD		(#0xFA),IX
      00002C FD 22 FC 00      [20]   57 	LD		(#0xFC),IY
      000030 D3 03            [11]   58 	OUT		(3),A	; Tell the IO controller the state is ready in RAM
      000032 FB               [ 4]   59 	EI
      000033 ED 4D            [14]   60 	RETI
                                     61 
      000035                         62 isr22::
      000035 DD E5            [15]   63 	PUSH	IX
      000037 E5               [11]   64 	PUSH	HL
      000038 F5               [11]   65 	PUSH	AF
      000039 DD 21 00 00      [14]   66 	LD		IX,#_input_write_ptr
      00003D DD 7E 00         [19]   67 	LD		A,0(IX)
      000040 3C               [ 4]   68 	INC		A
      000041 DD BE 01         [19]   69 	CP		1(IX)
      000044 28 0C            [12]   70 	JR		Z,isr22_full
      000046 DD 6E 00         [19]   71 	LD		L,0(IX)
      000049 26 01            [ 7]   72 	LD		H,#1
      00004B DB 00            [11]   73 	IN		A,(0)
      00004D 77               [ 7]   74 	LD		(HL),A
      00004E 2C               [ 4]   75 	INC		L
      00004F DD 75 00         [19]   76 	LD		0(IX),L
      000052                         77 isr22_full:
      000052 F1               [10]   78 	POP		AF
      000053 E1               [10]   79 	POP		HL
      000054 DD E1            [14]   80 	POP		IX
      000056 FB               [ 4]   81 	EI
      000057 ED 4D            [14]   82 	RETI
                                     83 
      000059                         84 isr24::
      000059 FB               [ 4]   85 	EI
      00005A ED 4D            [14]   86 	RETI
                                     87 
      00005C                         88 isr26::
      00005C FB               [ 4]   89 	EI
      00005D ED 4D            [14]   90 	RETI
                                     91 
      00005F                         92 isr28::
      00005F FB               [ 4]   93 	EI
      000060 ED 4D            [14]   94 	RETI
                                     95 
      000062                         96 isr2a::
      000062 FB               [ 4]   97 	EI
      000063 ED 4D            [14]   98 	RETI
                                     99 
      000065                        100 isr2c::
      000065 FB               [ 4]  101 	EI
      000066 ED 4D            [14]  102 	RETI
                                    103 
      000068                        104 isr2e::
      000068 FB               [ 4]  105 	EI
      000069 ED 4D            [14]  106 	RETI
                                    107 
      00006B                        108 isr30::
      00006B FB               [ 4]  109 	EI
      00006C ED 4D            [14]  110 	RETI
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 3.
Hexadecimal [24-Bits]



                                    111 
      00006E                        112 isr32::
      00006E FB               [ 4]  113 	EI
      00006F ED 4D            [14]  114 	RETI
                                    115 
      000071                        116 isr34::
      000071 FB               [ 4]  117 	EI
      000072 ED 4D            [14]  118 	RETI
                                    119 
      000074                        120 isr36::
      000074 FB               [ 4]  121 	EI
      000075 ED 4D            [14]  122 	RETI
                                    123 
      000077                        124 isr38::
      000077 FB               [ 4]  125 	EI
      000078 ED 4D            [14]  126 	RETI
                                    127 
      00007A                        128 isr3a::
      00007A FB               [ 4]  129 	EI
      00007B ED 4D            [14]  130 	RETI
                                    131 
      00007D                        132 isr3c::
      00007D FB               [ 4]  133 	EI
      00007E ED 4D            [14]  134 	RETI
                                    135 
      000080                        136 isr3e::
      000080 FB               [ 4]  137 	EI
      000081 ED 4D            [14]  138 	RETI
                                    139 
      000083                        140 input_empty::
      000083 3A 00 00         [13]  141 	LD		A,(#_input_write_ptr)
      000086 6F               [ 4]  142 	LD		L,A
      000087 3A 00 00         [13]  143 	LD		A,(#_input_read_ptr)
      00008A 95               [ 4]  144 	SUB		L
      00008B 3E 01            [ 7]  145 	LD		A,#1
      00008D C8               [11]  146 	RET		Z
      00008E AF               [ 4]  147 	XOR		A
      00008F C9               [10]  148 	RET
                                    149 
      000090                        150 input_read::
      000090 3A 00 00         [13]  151 	LD		A,(#_input_read_ptr)
      000093 26 01            [ 7]  152 	LD		H,#1    ; Input buffer at 0x0100, so H=1, L=offset
      000095 6F               [ 4]  153 	LD		L,A
      000096 4E               [ 7]  154 	LD		C,(HL)	; Byte read
      000097 3C               [ 4]  155 	INC		A
      000098 32 00 00         [13]  156 	LD		(#_input_read_ptr),A
      00009B 79               [ 4]  157 	LD		A,C
      00009C C9               [10]  158 	RET
                                    159 
      00009D                        160 strlen::
      00009D 01 FF 00         [10]  161 	LD		BC,#255
      0000A0 AF               [ 4]  162 	XOR		A
      0000A1 ED B1            [21]  163 	CPIR
      0000A3 79               [ 4]  164 	LD		A,C
      0000A4 ED 44            [ 8]  165 	NEG
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 4.
Hexadecimal [24-Bits]



      0000A6 D6 02            [ 7]  166 	SUB		#2
      0000A8 C9               [10]  167 	RET
                                    168 
                                    169 ; copy string from HL -> DE
      0000A9                        170 strcpy::
      0000A9 E5               [11]  171 	PUSH	HL
      0000AA CD 9D 00         [17]  172 	CALL	strlen
      0000AD 06 00            [ 7]  173 	LD		B,#0
      0000AF 4F               [ 4]  174 	LD		C,A
      0000B0 0C               [ 4]  175 	INC		C
      0000B1 E1               [10]  176 	POP		HL
      0000B2 ED B0            [21]  177 	LDIR
      0000B4 C9               [10]  178 	RET
                                    179 
      0000B5                        180 print_text::
      0000B5 3E 1E            [ 7]  181 	LD		A,#30		; Send 30, code for print
      0000B7 D3 00            [11]  182 	OUT		(0),A
      0000B9 E5               [11]  183 	PUSH	HL
      0000BA CD 9D 00         [17]  184 	call	strlen
      0000BD D3 00            [11]  185 	OUT		(0),A	; strlen returns length in A,  send it
      0000BF 47               [ 4]  186 	LD		B,A
      0000C0 0E 00            [ 7]  187 	LD		C,#0
      0000C2 E1               [10]  188 	POP		HL			; restore text pointer
      0000C3 ED B3            [21]  189 	OTIR
      0000C5 C9               [10]  190 	RET
                                    191 	
      0000C6                        192 rng::
      0000C6 21                     193 	.db 0x21
      0000C7                        194 seed1:
      0000C7 0F 27                  195 	.db 0x0F, 0x27
      0000C9 44               [ 4]  196 	LD		B,H
      0000CA 4D               [ 4]  197 	LD		C,L
      0000CB 29               [11]  198 	ADD		HL,HL
      0000CC 29               [11]  199 	ADD		HL,HL
      0000CD 2C               [ 4]  200 	INC		L
      0000CE 09               [11]  201 	ADD		HL,BC
      0000CF 22 C7 00         [16]  202 	LD		(seed1),HL
      0000D2 21                     203 	.db 0x21
      0000D3                        204 seed2:
      0000D3 DB 03                  205 	.db 0xDB, 0x03
      0000D5 29               [11]  206 	ADD HL,HL
      0000D6 9F               [ 4]  207 	SBC A,A
      0000D7 E6 2D            [ 7]  208 	AND #0X2D	;#101101b
      0000D9 AD               [ 4]  209 	XOR L
      0000DA 6F               [ 4]  210 	LD L,A
      0000DB 22 D3 00         [16]  211 	LD (seed2),HL
      0000DE 09               [11]  212 	ADD HL,BC
      0000DF C9               [10]  213 	RET
                                    214 
      0000E0                        215 cls::
      0000E0 3E 01            [ 7]  216 	LD		A,#1
      0000E2 D3 00            [11]  217 	OUT		(0),A
      0000E4 C9               [10]  218 	RET
                                    219 	
      0000E5                        220 newline::
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 5.
Hexadecimal [24-Bits]



      0000E5 3E 04            [ 7]  221 	LD		A,#4
      0000E7 D3 00            [11]  222 	OUT		(0),A
      0000E9 C9               [10]  223 	RET
                                    224 
                                    225 ; copy block starting at HL+1, with length at (HL)
      0000EA                        226 gpu_block::
      0000EA 46               [ 7]  227 	LD		B,(HL)			; C = number of bytes to copy
      0000EB 0E 00            [ 7]  228 	LD		C,#0			; BC = number of bytes to copy
      0000ED 23               [ 6]  229 	INC		HL				; HL = pointer to data
      0000EE ED B3            [21]  230 	OTIR
      0000F0 C9               [10]  231 	RET
                                    232 
                                    233 
      0000F1                        234 timer::
      0000F1 2A EC 00         [16]  235 	LD		HL,(#0xEC)
      0000F4 C9               [10]  236 	RET
                                    237 
                                    238 
                                    239 ; byte list_dir(const byte* path, byte* filename, word* size)
      0000F5                        240 list_dir::
                                    241 	; HL = path
                                    242 	; DE = filename
                                    243 	; (SP+2)=pointer to size  (need to remove)
      0000F5 DD E5            [15]  244 	PUSH	IX
      0000F7 DD 21 00 00      [14]  245 	LD		IX,#0
      0000FB DD 39            [15]  246 	ADD		IX,SP
      0000FD 22 E0 00         [16]  247 	LD		(#0xE0),HL
      000100 ED 53 E2 00      [20]  248 	LD		(#0xE2),DE
      000104 DD 5E 04         [19]  249 	LD		E,4(IX)
      000107 DD 56 05         [19]  250 	LD		D,5(IX)
      00010A ED 53 E4 00      [20]  251 	LD		(#0xE4),DE
      00010E 3E 01            [ 7]  252 	LD		A,     #1
      000110 D3 01            [11]  253 	OUT		(1),A
      000112 00               [ 4]  254 	NOP
      000113 00               [ 4]  255 	NOP
      000114 00               [ 4]  256 	NOP
      000115 DB 01            [11]  257 	IN		A,(1)		; Wait for completion and get return code
      000117 00               [ 4]  258 	NOP
      000118 00               [ 4]  259 	NOP
      000119 00               [ 4]  260 	NOP
      00011A 00               [ 4]  261 	NOP
      00011B DD E1            [14]  262 	POP		IX
      00011D E1               [10]  263 	POP		HL			; return address
      00011E D1               [10]  264 	POP		DE			; pop size parameter
      00011F E9               [ 4]  265 	JP		(HL)
                                    266 	
                                    267 ; byte list_next(byte* filename, word* size)
      000120                        268 list_next::
                                    269 	; HL=filename
                                    270 	; DE=size
      000120 22 E2 00         [16]  271 	LD		(#0xE2),HL
      000123 ED 53 E4 00      [20]  272 	LD		(#0xE4),DE
      000127 3E 02            [ 7]  273 	LD		A,    #2
      000129 D3 01            [11]  274 	OUT		(1),A
      00012B 00               [ 4]  275 	NOP
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 6.
Hexadecimal [24-Bits]



      00012C DB 01            [11]  276 	IN		A,(1)		; Wait for completion and get return code
      00012E C9               [10]  277 	RET
                                    278 		
                                    279 ; byte open_file(const char* filename, byte write)
                                    280 ; HL = filename
                                    281 ; (SP+2) = write
                                    282 ; function needs to pop single byte SP+2
      00012F                        283 open_file::
      00012F DD E5            [15]  284 	PUSH	IX
      000131 DD 21 00 00      [14]  285 	LD		IX,#0
      000135 DD 39            [15]  286 	ADD		IX,SP
                                    287 	
      000137 22 E0 00         [16]  288 	LD		(#0xE0),HL
      00013A DD 6E 04         [19]  289 	LD		L,4(IX)
      00013D 26 00            [ 7]  290 	LD		H,#0
      00013F 22 E2 00         [16]  291 	LD		(#0xE2),HL
                                    292 
      000142 3E 03            [ 7]  293 	LD		A,    #3
      000144 D3 01            [11]  294 	OUT		(1),A
      000146 00               [ 4]  295 	NOP
      000147 DB 01            [11]  296 	IN		A,(1)		; Wait for completion and get return code
                                    297 
      000149 DD E1            [14]  298 	POP		IX
      00014B E1               [10]  299 	POP		HL
      00014C 33               [ 6]  300 	INC		SP ;	pop write parameter
      00014D E9               [ 4]  301 	JP		(HL)
                                    302 
                                    303 
                                    304 ; word read_file(byte handle, byte* buffer, word size)
                                    305 ; A=handle
                                    306 ; DE=buffer
                                    307 ; (SP+2)=size
                                    308 ; function needs to pop 2 bytes for (SP+2)
                                    309 ; return word in DE
      00014E                        310 read_file::
      00014E DD E5            [15]  311 	PUSH	IX
      000150 DD 21 00 00      [14]  312 	LD		IX,#0
      000154 DD 39            [15]  313 	ADD		IX,SP
                                    314 	
      000156 6F               [ 4]  315 	LD		L,A
      000157 26 00            [ 7]  316 	LD		H,#0
      000159 22 E0 00         [16]  317 	LD		(#0xE0),HL
      00015C ED 53 E2 00      [20]  318 	LD		(#0xE2),DE
      000160 DD 5E 04         [19]  319 	LD		E,4(IX)
      000163 DD 56 05         [19]  320 	LD		D,5(IX)
      000166 ED 53 E4 00      [20]  321 	LD		(#0xE4),DE
                                    322 	
      00016A 3E 04            [ 7]  323 	LD		A,    #4
      00016C D3 01            [11]  324 	OUT		(1),A
      00016E 00               [ 4]  325 	NOP
      00016F DB 01            [11]  326 	IN		A,(1)		; Wait for completion and get return code
                                    327 	
      000171 ED 5B E4 00      [20]  328 	LD		DE,(#0xE4)	; Load number of bytes read
                                    329 	
      000175 DD E1            [14]  330 	POP		IX
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 7.
Hexadecimal [24-Bits]



      000177 E1               [10]  331 	POP		HL	; return address
      000178 C1               [10]  332 	POP		BC	; pop size
      000179 E9               [ 4]  333 	JP		(HL)
                                    334 
                                    335 
                                    336 ; File handle in A
                                    337 ; Return code also in A
      00017A                        338 close_file::
      00017A 6F               [ 4]  339 	LD		L,A
      00017B 26 00            [ 7]  340 	LD		H,#0
      00017D 22 E0 00         [16]  341 	LD		(#0xE0),HL
                                    342 
      000180 3E 06            [ 7]  343 	LD		A,   #6
      000182 D3 01            [11]  344 	OUT		(1),A
      000184 00               [ 4]  345 	NOP
      000185 DB 01            [11]  346 	IN		A,(1)		; Wait for completion and get return code
                                    347 
      000187 C9               [10]  348 	RET
                                    349 
                                    350 
                                    351 ; HL = filename
                                    352 ; (SP+2) = index
                                    353 ; function needs to pop single byte SP+2
      000188                        354 load_sprites::
      000188 DD E5            [15]  355 	PUSH	IX
      00018A DD 21 00 00      [14]  356 	LD		IX,#0
      00018E DD 39            [15]  357 	ADD		IX,SP
                                    358 	
      000190 22 E0 00         [16]  359 	LD		(#0xE0),HL
      000193 DD 6E 04         [19]  360 	LD		L,4(IX)
      000196 26 00            [ 7]  361 	LD		H,#0
      000198 22 E2 00         [16]  362 	LD		(#0xE2),HL
                                    363 	
      00019B 3E 07            [ 7]  364 	LD		A, #7
      00019D D3 01            [11]  365 	OUT		(1),A
      00019F 00               [ 4]  366 	NOP
      0001A0 DB 01            [11]  367 	IN		A,(1)		; Wait for completion and get return code
                                    368 
      0001A2 DD E1            [14]  369 	POP		IX
      0001A4 E1               [10]  370 	POP		HL	;	return address
      0001A5 33               [ 6]  371 	INC		SP  ;	pop index parameter
      0001A6 E9               [ 4]  372 	JP		(HL)
                                    373 
                                    374 
                                    375 
      0001A7                        376 _div_mod::
      0001A7 5E               [ 7]  377 	LD		E,(HL)
      0001A8 23               [ 6]  378 	INC		HL
      0001A9 56               [ 7]  379 	LD		D,(HL)
      0001AA 23               [ 6]  380 	INC		HL
      0001AB 4E               [ 7]  381 	LD		C,(HL)
      0001AC E5               [11]  382 	PUSH	HL
      0001AD EB               [ 4]  383 	EX		DE,HL
      0001AE AF               [ 4]  384 	XOR		A
      0001AF 06 10            [ 7]  385 	LD		B,#16
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 8.
Hexadecimal [24-Bits]



      0001B1                        386 _loop_div_mod:
      0001B1 29               [11]  387 	ADD		HL, HL
      0001B2 17               [ 4]  388 	RLA
      0001B3 38 03            [12]  389 	JR		C, _div_mod_j1
      0001B5 B9               [ 4]  390 	CP		C
      0001B6 38 02            [12]  391 	JR		C, _div_mod_j2
      0001B8                        392 _div_mod_j1:
      0001B8 91               [ 4]  393 	SUB		C
      0001B9 2C               [ 4]  394 	INC		L
      0001BA                        395 _div_mod_j2:
      0001BA 10 F5            [13]  396 	DJNZ	_loop_div_mod
                                    397 
      0001BC EB               [ 4]  398 	EX	DE,HL
      0001BD E1               [10]  399 	POP	HL
      0001BE 77               [ 7]  400 	LD	(HL),A
      0001BF 2B               [ 6]  401 	DEC	HL
      0001C0 72               [ 7]  402 	LD	(HL),D
      0001C1 2B               [ 6]  403 	DEC	HL
      0001C2 73               [ 7]  404 	LD	(HL),E
      0001C3 C9               [10]  405 	RET
                                    406 	
      0001C4                        407 bounds_check::
      0001C4 7A               [ 4]  408 	LD		A,D
      0001C5 BC               [ 4]  409 	CP		H
      0001C6 38 04            [12]  410 	JR		C, _bounds_error	; D-H < 0  -> error
      0001C8 C0               [11]  411 	RET		NZ					; D-H > 0  -> no error
      0001C9 7B               [ 4]  412 	LD  	A,E
      0001CA BD               [ 4]  413 	CP		L
      0001CB D0               [11]  414 	RET		NC	; H=D & L<=E  no error
      0001CC                        415 _bounds_error:
      0001CC 21 FF 00         [10]  416 	LD		HL,#0xFF
      0001CF 36 01            [10]  417 	LD		(HL),#1
      0001D1 C9               [10]  418 	RET
ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 9.
Hexadecimal [24-Bits]

Symbol Table

    .__.$$$.=  002710 L   |     .__.ABS.=  000000 G   |     .__.CPU.=  000000 L
    .__.H$L.=  000000 L   |   0 _bounds_   0001CC R   |   0 _div_mod   0001A7 GR
  0 _div_mod   0001B8 R   |   0 _div_mod   0001BA R   |     _globals   ****** GX
  0 _init      000000 GR  |     _input_r   ****** GX  |     _input_w   ****** GX
  0 _loop_di   0001B1 R   |     _main      ****** GX  |   0 bounds_c   0001C4 GR
  0 close_fi   00017A GR  |   0 cls        0000E0 GR  |   0 gpu_bloc   0000EA GR
  0 input_em   000083 GR  |   0 input_re   000090 GR  |   0 isr20      00000D GR
  0 isr22      000035 GR  |   0 isr22_fu   000052 R   |   0 isr24      000059 GR
  0 isr26      00005C GR  |   0 isr28      00005F GR  |   0 isr2a      000062 GR
  0 isr2c      000065 GR  |   0 isr2e      000068 GR  |   0 isr30      00006B GR
  0 isr32      00006E GR  |   0 isr34      000071 GR  |   0 isr36      000074 GR
  0 isr38      000077 GR  |   0 isr3a      00007A GR  |   0 isr3c      00007D GR
  0 isr3e      000080 GR  |   0 list_dir   0000F5 GR  |   0 list_nex   000120 GR
  0 load_spr   000188 GR  |   0 newline    0000E5 GR  |   0 open_fil   00012F GR
  0 print_te   0000B5 GR  |   0 read_fil   00014E GR  |   0 rng        0000C6 GR
  0 seed1      0000C7 R   |   0 seed2      0000D3 R   |   0 strcpy     0000A9 GR
  0 strlen     00009D GR  |   0 timer      0000F1 GR

ASxxxx Assembler V02.00 + NoICE + SDCC mods  (Zilog Z80 / Hitachi HD64180 / ZX-Next / eZ80), page 10.
Hexadecimal [24-Bits]

Area Table

   0 _CODE      size    1D2   flags    0

