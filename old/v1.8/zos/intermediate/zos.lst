                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module zos
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _process_input
                                     13 	.globl _backspace
                                     14 	.globl _print_char
                                     15 	.globl _process_command
                                     16 	.globl _cat_file
                                     17 	.globl _dir
                                     18 	.globl _load_program
                                     19 	.globl _print_prompt
                                     20 	.globl _close_file
                                     21 	.globl _read_file
                                     22 	.globl _open_file
                                     23 	.globl _list_next
                                     24 	.globl _list_dir
                                     25 	.globl _gpu_clear
                                     26 	.globl _gpu_flush
                                     27 	.globl _newline
                                     28 	.globl _strncmp
                                     29 	.globl _strcmp
                                     30 	.globl _input_read
                                     31 	.globl _input_empty
                                     32 	.globl _print_word
                                     33 	.globl _print_text
                                     34 	.globl _cls
                                     35 	.globl _command_pos
                                     36 	.globl _command_buffer
                                     37 ;--------------------------------------------------------
                                     38 ; special function registers
                                     39 ;--------------------------------------------------------
                                     40 ;--------------------------------------------------------
                                     41 ; ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area _DATA
      000000                         44 _command_buffer::
      000000                         45 	.ds 32
      000020                         46 _command_pos::
      000020                         47 	.ds 1
                                     48 ;--------------------------------------------------------
                                     49 ; ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area _INITIALIZED
                                     52 ;--------------------------------------------------------
                                     53 ; absolute external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area _DABS (ABS)
                                     56 ;--------------------------------------------------------
                                     57 ; global & static initialisations
                                     58 ;--------------------------------------------------------
                                     59 	.area _HOME
                                     60 	.area _GSINIT
                                     61 	.area _GSFINAL
                                     62 	.area _GSINIT
                                     63 ;--------------------------------------------------------
                                     64 ; Home
                                     65 ;--------------------------------------------------------
                                     66 	.area _HOME
                                     67 	.area _HOME
                                     68 ;--------------------------------------------------------
                                     69 ; code
                                     70 ;--------------------------------------------------------
                                     71 	.area _CODE
                                     72 ;zos.c:7: void print_prompt()
                                     73 ;	---------------------------------
                                     74 ; Function print_prompt
                                     75 ; ---------------------------------
      000000                         76 _print_prompt::
                                     77 ;zos.c:9: const char* os_prompt="zOS>";
                                     78 ;zos.c:10: print_text(os_prompt);
      000000 21r06r00         [10]   79 	ld	hl, #___str_0
                                     80 ;zos.c:11: }
      000003 C3r00r00         [10]   81 	jp	_print_text
      000006                         82 ___str_0:
      000006 7A 4F 53 3E             83 	.ascii "zOS>"
      00000A 00                      84 	.db 0x00
                                     85 ;zos.c:14: void load_program(const char* filename)
                                     86 ;	---------------------------------
                                     87 ; Function load_program
                                     88 ; ---------------------------------
      00000B                         89 _load_program::
                                     90 ;zos.c:16: byte handle = open_file(filename,0);
      00000B AF               [ 4]   91 	xor	a, a
      00000C F5               [11]   92 	push	af
      00000D 33               [ 6]   93 	inc	sp
      00000E CDr00r00         [17]   94 	call	_open_file
                                     95 ;zos.c:17: if (handle != 0xFF)
      000011 4F               [ 4]   96 	ld	c, a
      000012 3C               [ 4]   97 	inc	a
      000013 28 11            [12]   98 	jr	Z, 00102$
                                     99 ;zos.c:20: read_file(handle, program_buffer, 0xE000);
      000015 C5               [11]  100 	push	bc
      000016 21 00 E0         [10]  101 	ld	hl, #0xe000
      000019 E5               [11]  102 	push	hl
      00001A 11 00 10         [10]  103 	ld	de, #0x1000
      00001D 79               [ 4]  104 	ld	a, c
      00001E CDr00r00         [17]  105 	call	_read_file
      000021 C1               [10]  106 	pop	bc
                                    107 ;zos.c:21: close_file(handle);
      000022 79               [ 4]  108 	ld	a, c
      000023 C3r00r00         [10]  109 	jp	_close_file
      000026                        110 00102$:
                                    111 ;zos.c:25: print_text("File not found");
      000026 21r2Cr00         [10]  112 	ld	hl, #___str_1
                                    113 ;zos.c:27: }
      000029 C3r00r00         [10]  114 	jp	_print_text
      00002C                        115 ___str_1:
      00002C 46 69 6C 65 20 6E 6F   116 	.ascii "File not found"
             74 20 66 6F 75 6E 64
      00003A 00                     117 	.db 0x00
                                    118 ;zos.c:30: void dir()
                                    119 ;	---------------------------------
                                    120 ; Function dir
                                    121 ; ---------------------------------
      00003B                        122 _dir::
      00003B DD E5            [15]  123 	push	ix
      00003D DD 21 00 00      [14]  124 	ld	ix,#0
      000041 DD 39            [15]  125 	add	ix,sp
      000043 F5               [11]  126 	push	af
                                    127 ;zos.c:33: byte rc=list_dir("/",command_buffer,&size);
      000044 21 00 00         [10]  128 	ld	hl, #0
      000047 39               [11]  129 	add	hl, sp
      000048 E5               [11]  130 	push	hl
      000049 11r00r00         [10]  131 	ld	de, #_command_buffer
      00004C 21r82r00         [10]  132 	ld	hl, #___str_2
      00004F CDr00r00         [17]  133 	call	_list_dir
      000052 4F               [ 4]  134 	ld	c, a
                                    135 ;zos.c:34: while (rc==200)
      000053                        136 00101$:
      000053 79               [ 4]  137 	ld	a, c
      000054 D6 C8            [ 7]  138 	sub	a, #0xc8
      000056 20 25            [12]  139 	jr	NZ, 00104$
                                    140 ;zos.c:36: print_text(command_buffer);
      000058 21r00r00         [10]  141 	ld	hl, #_command_buffer
      00005B CDr00r00         [17]  142 	call	_print_text
                                    143 ;zos.c:37: print_text("  ");
      00005E 21r84r00         [10]  144 	ld	hl, #___str_3
      000061 CDr00r00         [17]  145 	call	_print_text
                                    146 ;zos.c:38: print_word(size);
      000064 E1               [10]  147 	pop	hl
      000065 E5               [11]  148 	push	hl
      000066 CDr00r00         [17]  149 	call	_print_word
                                    150 ;zos.c:39: newline();
      000069 CDr00r00         [17]  151 	call	_newline
                                    152 ;zos.c:40: gpu_flush();
      00006C CDr00r00         [17]  153 	call	_gpu_flush
                                    154 ;zos.c:41: rc=list_next(command_buffer,&size);
      00006F 21 00 00         [10]  155 	ld	hl, #0
      000072 39               [11]  156 	add	hl, sp
      000073 EB               [ 4]  157 	ex	de, hl
      000074 21r00r00         [10]  158 	ld	hl, #_command_buffer
      000077 CDr00r00         [17]  159 	call	_list_next
      00007A 4F               [ 4]  160 	ld	c, a
      00007B 18 D6            [12]  161 	jr	00101$
      00007D                        162 00104$:
                                    163 ;zos.c:43: }
      00007D DD F9            [10]  164 	ld	sp, ix
      00007F DD E1            [14]  165 	pop	ix
      000081 C9               [10]  166 	ret
      000082                        167 ___str_2:
      000082 2F                     168 	.ascii "/"
      000083 00                     169 	.db 0x00
      000084                        170 ___str_3:
      000084 20 20                  171 	.ascii "  "
      000086 00                     172 	.db 0x00
                                    173 ;zos.c:45: void cat_file(const char* filename)
                                    174 ;	---------------------------------
                                    175 ; Function cat_file
                                    176 ; ---------------------------------
      000087                        177 _cat_file::
                                    178 ;zos.c:47: byte handle = open_file(filename,0);
      000087 AF               [ 4]  179 	xor	a, a
      000088 F5               [11]  180 	push	af
      000089 33               [ 6]  181 	inc	sp
      00008A CDr00r00         [17]  182 	call	_open_file
                                    183 ;zos.c:48: if (handle != 0xFF)
      00008D 4F               [ 4]  184 	ld	c, a
      00008E 3C               [ 4]  185 	inc	a
      00008F C8               [11]  186 	ret	Z
                                    187 ;zos.c:50: word act=1;
      000090 11 01 00         [10]  188 	ld	de, #0x0001
                                    189 ;zos.c:51: while (act>0)
      000093                        190 00103$:
      000093 7A               [ 4]  191 	ld	a, d
      000094 B3               [ 4]  192 	or	a, e
      000095 28 23            [12]  193 	jr	Z, 00105$
                                    194 ;zos.c:53: act = read_file(handle, command_buffer, 30);
      000097 C5               [11]  195 	push	bc
      000098 21 1E 00         [10]  196 	ld	hl, #0x001e
      00009B E5               [11]  197 	push	hl
      00009C 11r00r00         [10]  198 	ld	de, #_command_buffer
      00009F 79               [ 4]  199 	ld	a, c
      0000A0 CDr00r00         [17]  200 	call	_read_file
      0000A3 C1               [10]  201 	pop	bc
                                    202 ;zos.c:54: if (act>0)
      0000A4 7A               [ 4]  203 	ld	a, d
      0000A5 B3               [ 4]  204 	or	a, e
      0000A6 28 EB            [12]  205 	jr	Z, 00103$
                                    206 ;zos.c:56: command_buffer[act]=0;
      0000A8 21r00r00         [10]  207 	ld	hl, #_command_buffer
      0000AB 19               [11]  208 	add	hl, de
      0000AC 36 00            [10]  209 	ld	(hl), #0x00
                                    210 ;zos.c:57: print_text(command_buffer);
      0000AE C5               [11]  211 	push	bc
      0000AF D5               [11]  212 	push	de
      0000B0 21r00r00         [10]  213 	ld	hl, #_command_buffer
      0000B3 CDr00r00         [17]  214 	call	_print_text
      0000B6 D1               [10]  215 	pop	de
      0000B7 C1               [10]  216 	pop	bc
      0000B8 18 D9            [12]  217 	jr	00103$
      0000BA                        218 00105$:
                                    219 ;zos.c:60: close_file(handle);
      0000BA 79               [ 4]  220 	ld	a, c
      0000BB CDr00r00         [17]  221 	call	_close_file
                                    222 ;zos.c:61: gpu_flush();
                                    223 ;zos.c:63: }
      0000BE C3r00r00         [10]  224 	jp	_gpu_flush
                                    225 ;zos.c:65: void process_command()
                                    226 ;	---------------------------------
                                    227 ; Function process_command
                                    228 ; ---------------------------------
      0000C1                        229 _process_command::
                                    230 ;zos.c:69: if (strcmp(command_buffer, "run") == 0)
      0000C1 11r2Er01         [10]  231 	ld	de, #___str_4
      0000C4 21r00r00         [10]  232 	ld	hl, #_command_buffer
      0000C7 CDr00r00         [17]  233 	call	_strcmp
      0000CA 4F               [ 4]  234 	ld	c, a
      0000CB B7               [ 4]  235 	or	a, a
                                    236 ;zos.c:70: user_program();
      0000CC CA 00 10         [10]  237 	jp	Z,0x1000
                                    238 ;zos.c:72: if (strcmp(command_buffer, "cls") == 0)
      0000CF 11r32r01         [10]  239 	ld	de, #___str_5
      0000D2 21r00r00         [10]  240 	ld	hl, #_command_buffer
      0000D5 CDr00r00         [17]  241 	call	_strcmp
      0000D8 B7               [ 4]  242 	or	a, a
                                    243 ;zos.c:73: cls();
      0000D9 CAr00r00         [10]  244 	jp	Z,_cls
                                    245 ;zos.c:75: if (strcmp(command_buffer, "dir") == 0)
      0000DC 11r36r01         [10]  246 	ld	de, #___str_6
      0000DF 21r00r00         [10]  247 	ld	hl, #_command_buffer
      0000E2 CDr00r00         [17]  248 	call	_strcmp
      0000E5 B7               [ 4]  249 	or	a, a
                                    250 ;zos.c:76: dir();
      0000E6 CAr3Br00         [10]  251 	jp	Z,_dir
                                    252 ;zos.c:78: if (command_pos>4 && strncmp(command_buffer, "cat ", 4)==0)
      0000E9 3E 04            [ 7]  253 	ld	a, #0x04
      0000EB 21r20r00         [10]  254 	ld	hl, #_command_pos
      0000EE 96               [ 7]  255 	sub	a, (hl)
      0000EF 30 16            [12]  256 	jr	NC, 00106$
      0000F1 3E 04            [ 7]  257 	ld	a, #0x04
      0000F3 F5               [11]  258 	push	af
      0000F4 33               [ 6]  259 	inc	sp
      0000F5 11r3Ar01         [10]  260 	ld	de, #___str_7
      0000F8 21r00r00         [10]  261 	ld	hl, #_command_buffer
      0000FB CDr00r00         [17]  262 	call	_strncmp
      0000FE B7               [ 4]  263 	or	a, a
      0000FF 20 06            [12]  264 	jr	NZ, 00106$
                                    265 ;zos.c:79: cat_file(command_buffer+4);
      000101 21r04r00         [10]  266 	ld	hl, #(_command_buffer + 4)
      000104 C3r87r00         [10]  267 	jp	_cat_file
      000107                        268 00106$:
                                    269 ;zos.c:81: if (command_pos>5 && strncmp(command_buffer, "load ", 5)==0)
      000107 3E 05            [ 7]  270 	ld	a, #0x05
      000109 21r20r00         [10]  271 	ld	hl, #_command_pos
      00010C 96               [ 7]  272 	sub	a, (hl)
      00010D 30 16            [12]  273 	jr	NC, 00102$
      00010F 3E 05            [ 7]  274 	ld	a, #0x05
      000111 F5               [11]  275 	push	af
      000112 33               [ 6]  276 	inc	sp
      000113 11r3Fr01         [10]  277 	ld	de, #___str_8
      000116 21r00r00         [10]  278 	ld	hl, #_command_buffer
      000119 CDr00r00         [17]  279 	call	_strncmp
      00011C B7               [ 4]  280 	or	a, a
      00011D 20 06            [12]  281 	jr	NZ, 00102$
                                    282 ;zos.c:82: load_program(command_buffer+5);
      00011F 21r05r00         [10]  283 	ld	hl, #(_command_buffer + 5)
      000122 C3r0Br00         [10]  284 	jp	_load_program
      000125                        285 00102$:
                                    286 ;zos.c:85: print_text("Unknown Command");
      000125 21r45r01         [10]  287 	ld	hl, #___str_9
      000128 CDr00r00         [17]  288 	call	_print_text
                                    289 ;zos.c:86: newline();
                                    290 ;zos.c:88: }
      00012B C3r00r00         [10]  291 	jp	_newline
      00012E                        292 ___str_4:
      00012E 72 75 6E               293 	.ascii "run"
      000131 00                     294 	.db 0x00
      000132                        295 ___str_5:
      000132 63 6C 73               296 	.ascii "cls"
      000135 00                     297 	.db 0x00
      000136                        298 ___str_6:
      000136 64 69 72               299 	.ascii "dir"
      000139 00                     300 	.db 0x00
      00013A                        301 ___str_7:
      00013A 63 61 74 20            302 	.ascii "cat "
      00013E 00                     303 	.db 0x00
      00013F                        304 ___str_8:
      00013F 6C 6F 61 64 20         305 	.ascii "load "
      000144 00                     306 	.db 0x00
      000145                        307 ___str_9:
      000145 55 6E 6B 6E 6F 77 6E   308 	.ascii "Unknown Command"
             20 43 6F 6D 6D 61 6E
             64
      000154 00                     309 	.db 0x00
                                    310 ;zos.c:90: void print_char(byte b)
                                    311 ;	---------------------------------
                                    312 ; Function print_char
                                    313 ; ---------------------------------
      000155                        314 _print_char::
      000155 F5               [11]  315 	push	af
      000156 4F               [ 4]  316 	ld	c, a
                                    317 ;zos.c:93: text[0]=b;
      000157 21 00 00         [10]  318 	ld	hl, #0
      00015A 39               [11]  319 	add	hl, sp
      00015B EB               [ 4]  320 	ex	de, hl
      00015C 79               [ 4]  321 	ld	a, c
      00015D 12               [ 7]  322 	ld	(de), a
                                    323 ;zos.c:94: text[1]=0;
      00015E 4B               [ 4]  324 	ld	c, e
      00015F 42               [ 4]  325 	ld	b, d
      000160 03               [ 6]  326 	inc	bc
      000161 AF               [ 4]  327 	xor	a, a
      000162 02               [ 7]  328 	ld	(bc), a
                                    329 ;zos.c:95: print_text(text);
      000163 EB               [ 4]  330 	ex	de, hl
      000164 CDr00r00         [17]  331 	call	_print_text
                                    332 ;zos.c:96: }
      000167 F1               [10]  333 	pop	af
      000168 C9               [10]  334 	ret
                                    335 ;zos.c:98: void backspace()
                                    336 ;	---------------------------------
                                    337 ; Function backspace
                                    338 ; ---------------------------------
      000169                        339 _backspace::
                                    340 ;zos.c:99: {}
      000169 C9               [10]  341 	ret
                                    342 ;zos.c:101: byte process_input()
                                    343 ;	---------------------------------
                                    344 ; Function process_input
                                    345 ; ---------------------------------
      00016A                        346 _process_input::
                                    347 ;zos.c:103: if (!input_empty())
      00016A CDr00r00         [17]  348 	call	_input_empty
      00016D B7               [ 4]  349 	or	a, a
      00016E 20 5C            [12]  350 	jr	NZ, 00111$
                                    351 ;zos.c:105: byte data = input_read();
      000170 CDr00r00         [17]  352 	call	_input_read
                                    353 ;zos.c:106: if (data==10 || data==13)
      000173 4F               [ 4]  354 	ld	c, a
      000174 D6 0A            [ 7]  355 	sub	a, #0x0a
      000176 28 05            [12]  356 	jr	Z, 00101$
      000178 79               [ 4]  357 	ld	a, c
      000179 D6 0D            [ 7]  358 	sub	a, #0x0d
      00017B 20 0E            [12]  359 	jr	NZ, 00102$
      00017D                        360 00101$:
                                    361 ;zos.c:108: newline();
      00017D CDr00r00         [17]  362 	call	_newline
                                    363 ;zos.c:109: process_command();
      000180 CDrC1r00         [17]  364 	call	_process_command
                                    365 ;zos.c:110: command_pos=0;
      000183 21r20r00         [10]  366 	ld	hl, #_command_pos
      000186 36 00            [10]  367 	ld	(hl), #0x00
                                    368 ;zos.c:111: return 1;
      000188 3E 01            [ 7]  369 	ld	a, #0x01
      00018A C9               [10]  370 	ret
      00018B                        371 00102$:
                                    372 ;zos.c:113: if (data == 8 && command_pos>0)
      00018B 79               [ 4]  373 	ld	a, c
      00018C D6 08            [ 7]  374 	sub	a, #0x08
      00018E 20 0F            [12]  375 	jr	NZ, 00105$
      000190 3Ar20r00         [13]  376 	ld	a, (_command_pos+0)
      000193 B7               [ 4]  377 	or	a, a
      000194 28 09            [12]  378 	jr	Z, 00105$
                                    379 ;zos.c:115: backspace();
      000196 CDr69r01         [17]  380 	call	_backspace
                                    381 ;zos.c:116: --command_pos;
      000199 21r20r00         [10]  382 	ld	hl, #_command_pos
      00019C 35               [11]  383 	dec	(hl)
                                    384 ;zos.c:117: return 0;
      00019D AF               [ 4]  385 	xor	a, a
      00019E C9               [10]  386 	ret
      00019F                        387 00105$:
                                    388 ;zos.c:119: if (data>=32 && command_pos < 30)
      00019F 79               [ 4]  389 	ld	a, c
      0001A0 D6 20            [ 7]  390 	sub	a, #0x20
      0001A2 38 28            [12]  391 	jr	C, 00111$
      0001A4 3Ar20r00         [13]  392 	ld	a, (_command_pos+0)
      0001A7 D6 1E            [ 7]  393 	sub	a, #0x1e
      0001A9 30 21            [12]  394 	jr	NC, 00111$
                                    395 ;zos.c:121: command_buffer[command_pos++]=data;
      0001AB 11r00r00         [10]  396 	ld	de, #_command_buffer+0
      0001AE 3Ar20r00         [13]  397 	ld	a, (_command_pos+0)
      0001B1 47               [ 4]  398 	ld	b, a
      0001B2 21r20r00         [10]  399 	ld	hl, #_command_pos
      0001B5 34               [11]  400 	inc	(hl)
      0001B6 68               [ 4]  401 	ld	l, b
      0001B7 26 00            [ 7]  402 	ld	h, #0x00
      0001B9 19               [11]  403 	add	hl, de
      0001BA 71               [ 7]  404 	ld	(hl), c
                                    405 ;zos.c:122: print_char(data);
      0001BB D5               [11]  406 	push	de
      0001BC 79               [ 4]  407 	ld	a, c
      0001BD CDr55r01         [17]  408 	call	_print_char
      0001C0 CDr00r00         [17]  409 	call	_gpu_flush
      0001C3 D1               [10]  410 	pop	de
                                    411 ;zos.c:124: command_buffer[command_pos]=0;
      0001C4 2Ar20r00         [16]  412 	ld	hl, (_command_pos)
      0001C7 26 00            [ 7]  413 	ld	h, #0x00
      0001C9 19               [11]  414 	add	hl, de
      0001CA 36 00            [10]  415 	ld	(hl), #0x00
      0001CC                        416 00111$:
                                    417 ;zos.c:127: return 0;
      0001CC AF               [ 4]  418 	xor	a, a
                                    419 ;zos.c:128: }
      0001CD C9               [10]  420 	ret
                                    421 ;zos.c:130: void main()
                                    422 ;	---------------------------------
                                    423 ; Function main
                                    424 ; ---------------------------------
      0001CE                        425 _main::
                                    426 ;zos.c:132: gpu_clear();
      0001CE CDr00r00         [17]  427 	call	_gpu_clear
                                    428 ;zos.c:133: command_pos=0;
      0001D1 21r20r00         [10]  429 	ld	hl, #_command_pos
      0001D4 36 00            [10]  430 	ld	(hl), #0x00
                                    431 ;zos.c:134: cls();
      0001D6 CDr00r00         [17]  432 	call	_cls
                                    433 ;zos.c:135: while (1)
      0001D9                        434 00105$:
                                    435 ;zos.c:137: print_prompt();
      0001D9 CDr00r00         [17]  436 	call	_print_prompt
                                    437 ;zos.c:138: gpu_flush();
      0001DC CDr00r00         [17]  438 	call	_gpu_flush
                                    439 ;zos.c:139: while (!process_input());
      0001DF                        440 00101$:
      0001DF CDr6Ar01         [17]  441 	call	_process_input
      0001E2 B7               [ 4]  442 	or	a, a
      0001E3 20 F4            [12]  443 	jr	NZ, 00105$
                                    444 ;zos.c:141: }
      0001E5 18 F8            [12]  445 	jr	00101$
                                    446 	.area _CODE
                                    447 	.area _INITIALIZER
                                    448 	.area _CABS (ABS)
