                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.2 #13407 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module zos
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _receive
                                     12 	.globl _process_command
                                     13 	.globl _main
                                     14 	.globl _service1
                                     15 	.globl _rng
                                     16 	.globl _cls
                                     17 	.globl _println
                                     18 	.globl _print
                                     19 	.globl _printc
                                     20 	.globl _strcmp
                                     21 	.globl _user_program
                                     22 	.globl _g
                                     23 	.globl _scan_input
                                     24 	.globl _get_key
                                     25 	.globl _send_prompt
                                     26 ;--------------------------------------------------------
                                     27 ; special function registers
                                     28 ;--------------------------------------------------------
                                     29 ;--------------------------------------------------------
                                     30 ; ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area _DATA
                           001000    33 _g	=	0x1000
      000000                         34 _user_program::
      000000                         35 	.ds 2
                                     36 ;--------------------------------------------------------
                                     37 ; ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area _INITIALIZED
                                     40 ;--------------------------------------------------------
                                     41 ; absolute external ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area _DABS (ABS)
                                     44 ;--------------------------------------------------------
                                     45 ; global & static initialisations
                                     46 ;--------------------------------------------------------
                                     47 	.area _HOME
                                     48 	.area _GSINIT
                                     49 	.area _GSFINAL
                                     50 	.area _GSINIT
                                     51 ;--------------------------------------------------------
                                     52 ; Home
                                     53 ;--------------------------------------------------------
                                     54 	.area _HOME
                                     55 	.area _HOME
                                     56 ;--------------------------------------------------------
                                     57 ; code
                                     58 ;--------------------------------------------------------
                                     59 	.area _CODE
                                     60 ;zos.c:15: word service1(byte call_type)
                                     61 ;	---------------------------------
                                     62 ; Function service1
                                     63 ; ---------------------------------
      000000                         64 _service1::
                                     65 ;zos.c:17: switch (call_type)
      000000 4F               [ 4]   66 	ld	c,a
      000001 B7               [ 4]   67 	or	a,a
      000002 CAr00r00         [10]   68 	jp	Z,_rng
      000005 3D               [ 4]   69 	dec	a
      000006 CArD6r00         [10]   70 	jp	Z,_get_key
      000009 79               [ 4]   71 	ld	a, c
      00000A D6 02            [ 7]   72 	sub	a, #0x02
                                     73 ;zos.c:19: case 0:		return rng();
                                     74 ;zos.c:20: case 1:		return get_key();
                                     75 ;zos.c:21: case 2:		return g.timer;
      00000C 20 05            [12]   76 	jr	NZ, 00104$
      00000E ED 5B 24 11      [20]   77 	ld	de, (#(_g + 292) + 0)
      000012 C9               [10]   78 	ret
                                     79 ;zos.c:22: }
      000013                         80 00104$:
                                     81 ;zos.c:23: return 0;
      000013 11 00 00         [10]   82 	ld	de, #0x0000
                                     83 ;zos.c:24: }
      000016 C9               [10]   84 	ret
                                     85 ;zos.c:48: void main()
                                     86 ;	---------------------------------
                                     87 ; Function main
                                     88 ; ---------------------------------
      000017                         89 _main::
                                     90 ;zos.c:50: g.in_write=0;
      000017 21 20 11         [10]   91 	ld	hl, #(_g + 288)
      00001A 36 00            [10]   92 	ld	(hl), #0x00
                                     93 ;zos.c:51: g.in_read=0;
      00001C 21 21 11         [10]   94 	ld	hl, #(_g + 289)
      00001F 36 00            [10]   95 	ld	(hl), #0x00
                                     96 ;zos.c:52: g.cmd_pos=0;
      000021 21 22 11         [10]   97 	ld	hl, #(_g + 290)
      000024 36 00            [10]   98 	ld	(hl), #0x00
                                     99 ;zos.c:53: g.timer=0;
      000026 21 00 00         [10]  100 	ld	hl, #0x0000
      000029 22 24 11         [16]  101 	ld	((_g + 292)), hl
                                    102 ;zos.c:54: user_program = (func_ptr)USER_AREA;
      00002C 26 12            [ 7]  103 	ld	h, #0x12
      00002E 22r00r00         [16]  104 	ld	(_user_program), hl
                                    105 ;zos.c:59: __endasm;
      000031 31 00 FF         [10]  106 	LD	SP,#0xFF00
      000034 ED 56            [ 8]  107 	IM	1
      000036 FB               [ 4]  108 	EI
                                    109 ;zos.c:60: cls();
      000037 CDr00r00         [17]  110 	call	_cls
                                    111 ;zos.c:61: send_prompt();
      00003A CDr12r01         [17]  112 	call	_send_prompt
                                    113 ;zos.c:62: while (1) scan_input();
      00003D                        114 00102$:
      00003D CDr6Cr00         [17]  115 	call	_scan_input
                                    116 ;zos.c:63: }
      000040 18 FB            [12]  117 	jr	00102$
                                    118 ;zos.c:65: void process_command()
                                    119 ;	---------------------------------
                                    120 ; Function process_command
                                    121 ; ---------------------------------
      000042                        122 _process_command::
                                    123 ;zos.c:74: if (strcmp(g.cmd_buffer,"run") == 0)
      000042 11r58r00         [10]  124 	ld	de, #___str_0
      000045 21 00 11         [10]  125 	ld	hl, #(_g + 256)
      000048 CDr00r00         [17]  126 	call	_strcmp
      00004B B7               [ 4]  127 	or	a, a
      00004C 20 04            [12]  128 	jr	NZ, 00102$
                                    129 ;zos.c:76: user_program();
      00004E 2Ar00r00         [16]  130 	ld	hl, (_user_program)
      000051 E9               [ 4]  131 	jp	(hl)
      000052                        132 00102$:
                                    133 ;zos.c:79: println("Invalid command");
      000052 21r5Cr00         [10]  134 	ld	hl, #___str_1
                                    135 ;zos.c:80: }
      000055 C3r00r00         [10]  136 	jp	_println
      000058                        137 ___str_0:
      000058 72 75 6E               138 	.ascii "run"
      00005B 00                     139 	.db 0x00
      00005C                        140 ___str_1:
      00005C 49 6E 76 61 6C 69 64   141 	.ascii "Invalid command"
             20 63 6F 6D 6D 61 6E
             64
      00006B 00                     142 	.db 0x00
                                    143 ;zos.c:82: void scan_input()
                                    144 ;	---------------------------------
                                    145 ; Function scan_input
                                    146 ; ---------------------------------
      00006C                        147 _scan_input::
                                    148 ;zos.c:85: if (g.in_write==g.in_read) return;
      00006C 21 20 11         [10]  149 	ld	hl, #_g+288
      00006F 4E               [ 7]  150 	ld	c, (hl)
      000070 3A 21 11         [13]  151 	ld	a, (#(_g + 289) + 0)
      000073 91               [ 4]  152 	sub	a, c
      000074 C8               [11]  153 	ret	Z
                                    154 ;zos.c:86: cur=g.input_buffer[g.in_read++];
      000075 21 21 11         [10]  155 	ld	hl, #_g+289
      000078 4E               [ 7]  156 	ld	c, (hl)
      000079 79               [ 4]  157 	ld	a, c
      00007A 3C               [ 4]  158 	inc	a
      00007B 77               [ 7]  159 	ld	(hl), a
      00007C 06 00            [ 7]  160 	ld	b, #0x00
      00007E 21 00 10         [10]  161 	ld	hl, #_g
      000081 09               [11]  162 	add	hl, bc
      000082 4E               [ 7]  163 	ld	c, (hl)
                                    164 ;zos.c:87: printc(cur);
      000083 C5               [11]  165 	push	bc
      000084 79               [ 4]  166 	ld	a, c
      000085 CDr00r00         [17]  167 	call	_printc
      000088 C1               [10]  168 	pop	bc
                                    169 ;zos.c:88: if (cur == 8)
      000089 79               [ 4]  170 	ld	a, c
      00008A D6 08            [ 7]  171 	sub	a, #0x08
      00008C 20 0C            [12]  172 	jr	NZ, 00114$
                                    173 ;zos.c:90: if (g.cmd_pos>0) --g.cmd_pos;
      00008E 3A 22 11         [13]  174 	ld	a, (#(_g + 290) + 0)
      000091 B7               [ 4]  175 	or	a, a
      000092 C8               [11]  176 	ret	Z
      000093 01 22 11         [10]  177 	ld	bc, #_g+290
      000096 0A               [ 7]  178 	ld	a, (bc)
      000097 3D               [ 4]  179 	dec	a
      000098 02               [ 7]  180 	ld	(bc), a
      000099 C9               [10]  181 	ret
      00009A                        182 00114$:
                                    183 ;zos.c:93: if (cur==10 || cur==13)
      00009A 79               [ 4]  184 	ld	a,c
      00009B FE 0A            [ 7]  185 	cp	a,#0x0a
      00009D 28 04            [12]  186 	jr	Z, 00109$
      00009F D6 0D            [ 7]  187 	sub	a, #0x0d
      0000A1 20 1E            [12]  188 	jr	NZ, 00110$
      0000A3                        189 00109$:
                                    190 ;zos.c:95: if (g.cmd_pos>0)
      0000A3 3A 22 11         [13]  191 	ld	a, (#(_g + 290) + 0)
      0000A6 B7               [ 4]  192 	or	a, a
      0000A7 CAr12r01         [10]  193 	jp	Z,_send_prompt
                                    194 ;zos.c:97: g.cmd_buffer[g.cmd_pos]=0;
      0000AA 21 22 11         [10]  195 	ld	hl, #(_g + 290)
      0000AD 4E               [ 7]  196 	ld	c, (hl)
      0000AE 21 00 11         [10]  197 	ld	hl, #(_g + 256)
      0000B1 06 00            [ 7]  198 	ld	b, #0x00
      0000B3 09               [11]  199 	add	hl, bc
      0000B4 36 00            [10]  200 	ld	(hl), #0x00
                                    201 ;zos.c:98: process_command();
      0000B6 CDr42r00         [17]  202 	call	_process_command
                                    203 ;zos.c:99: g.cmd_pos=0;
      0000B9 21 22 11         [10]  204 	ld	hl, #(_g + 290)
                                    205 ;zos.c:101: send_prompt();
      0000BC 36 00            [10]  206 	ld	(hl), #0x00
      0000BE C3r12r01         [10]  207 	jp	_send_prompt
      0000C1                        208 00110$:
                                    209 ;zos.c:104: if (g.cmd_pos < (CMD_BUFFER_SIZE-1))
      0000C1 3A 22 11         [13]  210 	ld	a, (#(_g + 290) + 0)
      0000C4 D6 1F            [ 7]  211 	sub	a, #0x1f
      0000C6 D0               [11]  212 	ret	NC
                                    213 ;zos.c:105: g.cmd_buffer[g.cmd_pos++]=cur;
      0000C7 21 22 11         [10]  214 	ld	hl, #_g+290
      0000CA 5E               [ 7]  215 	ld	e, (hl)
      0000CB 7B               [ 4]  216 	ld	a, e
      0000CC 3C               [ 4]  217 	inc	a
      0000CD 77               [ 7]  218 	ld	(hl), a
      0000CE 21 00 11         [10]  219 	ld	hl, #(_g + 256)
      0000D1 16 00            [ 7]  220 	ld	d, #0x00
      0000D3 19               [11]  221 	add	hl, de
      0000D4 71               [ 7]  222 	ld	(hl), c
                                    223 ;zos.c:106: }
      0000D5 C9               [10]  224 	ret
                                    225 ;zos.c:108: word get_key()
                                    226 ;	---------------------------------
                                    227 ; Function get_key
                                    228 ; ---------------------------------
      0000D6                        229 _get_key::
                                    230 ;zos.c:110: word res=0x100;
      0000D6 11 00 01         [10]  231 	ld	de, #0x0100
                                    232 ;zos.c:111: if (g.in_write!=g.in_read)
      0000D9 21 20 11         [10]  233 	ld	hl, #_g+288
      0000DC 4E               [ 7]  234 	ld	c, (hl)
      0000DD 3A 21 11         [13]  235 	ld	a, (#(_g + 289) + 0)
      0000E0 91               [ 4]  236 	sub	a, c
      0000E1 C8               [11]  237 	ret	Z
                                    238 ;zos.c:113: word key = g.input_buffer[g.in_read++];
      0000E2 21 21 11         [10]  239 	ld	hl, #_g+289
      0000E5 4E               [ 7]  240 	ld	c, (hl)
      0000E6 79               [ 4]  241 	ld	a, c
      0000E7 3C               [ 4]  242 	inc	a
      0000E8 77               [ 7]  243 	ld	(hl), a
      0000E9 06 00            [ 7]  244 	ld	b, #0x00
      0000EB 21 00 10         [10]  245 	ld	hl, #_g
      0000EE 09               [11]  246 	add	hl, bc
      0000EF 5E               [ 7]  247 	ld	e, (hl)
      0000F0 16 00            [ 7]  248 	ld	d, #0x00
                                    249 ;zos.c:114: res=key;
                                    250 ;zos.c:116: return res;
                                    251 ;zos.c:117: }
      0000F2 C9               [10]  252 	ret
                                    253 ;zos.c:119: byte receive(byte* data)
                                    254 ;	---------------------------------
                                    255 ; Function receive
                                    256 ; ---------------------------------
      0000F3                        257 _receive::
      0000F3 EB               [ 4]  258 	ex	de, hl
                                    259 ;zos.c:121: if (g.in_write==g.in_read) return 0;
      0000F4 21 20 11         [10]  260 	ld	hl, #_g+288
      0000F7 4E               [ 7]  261 	ld	c, (hl)
      0000F8 3A 21 11         [13]  262 	ld	a, (#(_g + 289) + 0)
      0000FB 91               [ 4]  263 	sub	a, c
      0000FC 20 02            [12]  264 	jr	NZ, 00102$
      0000FE AF               [ 4]  265 	xor	a, a
      0000FF C9               [10]  266 	ret
      000100                        267 00102$:
                                    268 ;zos.c:122: *data = g.input_buffer[g.in_read++];
      000100 21 21 11         [10]  269 	ld	hl, #_g+289
      000103 4E               [ 7]  270 	ld	c, (hl)
      000104 79               [ 4]  271 	ld	a, c
      000105 3C               [ 4]  272 	inc	a
      000106 77               [ 7]  273 	ld	(hl), a
      000107 06 00            [ 7]  274 	ld	b, #0x00
      000109 21 00 10         [10]  275 	ld	hl, #_g
      00010C 09               [11]  276 	add	hl, bc
      00010D 7E               [ 7]  277 	ld	a, (hl)
      00010E 12               [ 7]  278 	ld	(de), a
                                    279 ;zos.c:123: return 1;
      00010F 3E 01            [ 7]  280 	ld	a, #0x01
                                    281 ;zos.c:124: }
      000111 C9               [10]  282 	ret
                                    283 ;zos.c:126: void send_prompt()
                                    284 ;	---------------------------------
                                    285 ; Function send_prompt
                                    286 ; ---------------------------------
      000112                        287 _send_prompt::
                                    288 ;zos.c:128: print("zOS>");
      000112 21r18r01         [10]  289 	ld	hl, #___str_2
                                    290 ;zos.c:129: }
      000115 C3r00r00         [10]  291 	jp	_print
      000118                        292 ___str_2:
      000118 7A 4F 53 3E            293 	.ascii "zOS>"
      00011C 00                     294 	.db 0x00
                                    295 	.area _CODE
                                    296 	.area _INITIALIZER
                                    297 	.area _CABS (ABS)
