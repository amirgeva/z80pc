                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.2 #13407 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module tetris
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _game
                                     12 	.globl _draw_frame
                                     13 	.globl _rotate_piece
                                     14 	.globl _move_piece
                                     15 	.globl _draw_piece
                                     16 	.globl _generate_piece
                                     17 	.globl _place_piece
                                     18 	.globl _remove_full_rows
                                     19 	.globl _board_position_free
                                     20 	.globl _initialize_board
                                     21 	.globl _wait_key
                                     22 	.globl _initialize_cubes
                                     23 	.globl _draw_cube
                                     24 	.globl _pixel_cursor
                                     25 	.globl _nop
                                     26 	.globl _cls
                                     27 	.globl _send_command
                                     28 	.globl _random
                                     29 	.globl _system_call
                                     30 	.globl _offsets
                                     31 ;--------------------------------------------------------
                                     32 ; special function registers
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area _DATA
                                     38 ;--------------------------------------------------------
                                     39 ; ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area _INITIALIZED
                                     42 ;--------------------------------------------------------
                                     43 ; absolute external ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area _DABS (ABS)
                                     46 ;--------------------------------------------------------
                                     47 ; global & static initialisations
                                     48 ;--------------------------------------------------------
                                     49 	.area _HOME
                                     50 	.area _GSINIT
                                     51 	.area _GSFINAL
                                     52 	.area _GSINIT
                                     53 ;--------------------------------------------------------
                                     54 ; Home
                                     55 ;--------------------------------------------------------
                                     56 	.area _HOME
                                     57 	.area _HOME
                                     58 ;--------------------------------------------------------
                                     59 ; code
                                     60 ;--------------------------------------------------------
                                     61 	.area _APP
                                     62 ;tetris.c:12: word system_call(byte call_type)
                                     63 ;	---------------------------------
                                     64 ; Function system_call
                                     65 ; ---------------------------------
      000000                         66 _system_call::
                                     67 ;tetris.c:17: __endasm;
      000000 CF               [11]   68 	rst	#8
                                     69 ;tetris.c:18: }
      000001 C9               [10]   70 	ret
                                     71 ;tetris.c:20: word random()
                                     72 ;	---------------------------------
                                     73 ; Function random
                                     74 ; ---------------------------------
      000002                         75 _random::
                                     76 ;tetris.c:22: return system_call(0);
      000002 AF               [ 4]   77 	xor	a, a
                                     78 ;tetris.c:23: }
      000003 C3r00r00         [10]   79 	jp	_system_call
                                     80 ;tetris.c:25: void send_command(const byte* data, byte len)
                                     81 ;	---------------------------------
                                     82 ; Function send_command
                                     83 ; ---------------------------------
      000006                         84 _send_command::
                                     85 ;tetris.c:32: __endasm;
      000006 47               [ 4]   86 	ld	b,a
      000007 ED B3            [21]   87 	otir
                                     88 ;tetris.c:33: }
      000009 E1               [10]   89 	pop	hl
      00000A 33               [ 6]   90 	inc	sp
      00000B E9               [ 4]   91 	jp	(hl)
                                     92 ;tetris.c:35: void cls()
                                     93 ;	---------------------------------
                                     94 ; Function cls
                                     95 ; ---------------------------------
      00000C                         96 _cls::
                                     97 ;tetris.c:40: __endasm;
      00000C 3E 01            [ 7]   98 	ld	a,#1
      00000E D3 00            [11]   99 	out	(0),a
                                    100 ;tetris.c:41: }
      000010 C9               [10]  101 	ret
                                    102 ;tetris.c:43: void nop()
                                    103 ;	---------------------------------
                                    104 ; Function nop
                                    105 ; ---------------------------------
      000011                        106 _nop::
                                    107 ;tetris.c:48: __endasm;
      000011 3E 00            [ 7]  108 	ld	a,#0
      000013 D3 00            [11]  109 	out	(0),a
                                    110 ;tetris.c:49: }
      000015 C9               [10]  111 	ret
                                    112 ;tetris.c:52: void pixel_cursor(word x, word y)
                                    113 ;	---------------------------------
                                    114 ; Function pixel_cursor
                                    115 ; ---------------------------------
      000016                        116 _pixel_cursor::
      000016 DD E5            [15]  117 	push	ix
      000018 DD 21 00 00      [14]  118 	ld	ix,#0
      00001C DD 39            [15]  119 	add	ix,sp
      00001E F5               [11]  120 	push	af
      00001F F5               [11]  121 	push	af
      000020 3B               [ 6]  122 	dec	sp
      000021 4D               [ 4]  123 	ld	c, l
      000022 44               [ 4]  124 	ld	b, h
                                    125 ;tetris.c:55: cmd[0]=5;
      000023 DD 36 FB 05      [19]  126 	ld	-5 (ix), #0x05
                                    127 ;tetris.c:56: cmd[1]=x&0xFF;
      000027 DD 71 FC         [19]  128 	ld	-4 (ix), c
                                    129 ;tetris.c:57: cmd[2]=(x>>8)&0xFF;
      00002A DD 70 FD         [19]  130 	ld	-3 (ix), b
                                    131 ;tetris.c:58: cmd[3]=y&0xFF;
      00002D DD 73 FE         [19]  132 	ld	-2 (ix), e
                                    133 ;tetris.c:59: cmd[4]=(y>>8)&0xFF;
      000030 DD 72 FF         [19]  134 	ld	-1 (ix), d
                                    135 ;tetris.c:60: send_command(cmd,5);
      000033 3E 05            [ 7]  136 	ld	a, #0x05
      000035 F5               [11]  137 	push	af
      000036 33               [ 6]  138 	inc	sp
      000037 21 01 00         [10]  139 	ld	hl, #1
      00003A 39               [11]  140 	add	hl, sp
      00003B CDr06r00         [17]  141 	call	_send_command
                                    142 ;tetris.c:61: }
      00003E DD F9            [10]  143 	ld	sp, ix
      000040 DD E1            [14]  144 	pop	ix
      000042 C9               [10]  145 	ret
                                    146 ;tetris.c:63: void draw_cube(word x, word y, uint8_t color)
                                    147 ;	---------------------------------
                                    148 ; Function draw_cube
                                    149 ; ---------------------------------
      000043                        150 _draw_cube::
      000043 F5               [11]  151 	push	af
                                    152 ;tetris.c:66: pixel_cursor(x,y);
      000044 CDr16r00         [17]  153 	call	_pixel_cursor
                                    154 ;tetris.c:67: cmd[0]=41;
      000047 21 00 00         [10]  155 	ld	hl, #0
      00004A 39               [11]  156 	add	hl, sp
      00004B EB               [ 4]  157 	ex	de, hl
      00004C 3E 29            [ 7]  158 	ld	a, #0x29
      00004E 12               [ 7]  159 	ld	(de), a
                                    160 ;tetris.c:68: cmd[1]=color;
      00004F 4B               [ 4]  161 	ld	c, e
      000050 42               [ 4]  162 	ld	b, d
      000051 03               [ 6]  163 	inc	bc
      000052 FD 21 04 00      [14]  164 	ld	iy, #4
      000056 FD 39            [15]  165 	add	iy, sp
      000058 FD 7E 00         [19]  166 	ld	a, 0 (iy)
      00005B 02               [ 7]  167 	ld	(bc), a
                                    168 ;tetris.c:69: send_command(cmd,2);
      00005C 3E 02            [ 7]  169 	ld	a, #0x02
      00005E F5               [11]  170 	push	af
      00005F 33               [ 6]  171 	inc	sp
      000060 EB               [ 4]  172 	ex	de, hl
      000061 CDr06r00         [17]  173 	call	_send_command
                                    174 ;tetris.c:70: }
      000064 F1               [10]  175 	pop	af
      000065 E1               [10]  176 	pop	hl
      000066 33               [ 6]  177 	inc	sp
      000067 E9               [ 4]  178 	jp	(hl)
                                    179 ;tetris.c:72: void initialize_cubes()
                                    180 ;	---------------------------------
                                    181 ; Function initialize_cubes
                                    182 ; ---------------------------------
      000068                        183 _initialize_cubes::
      000068 DD E5            [15]  184 	push	ix
      00006A DD 21 00 00      [14]  185 	ld	ix,#0
      00006E DD 39            [15]  186 	add	ix,sp
      000070 21 FE FE         [10]  187 	ld	hl, #-258
      000073 39               [11]  188 	add	hl, sp
      000074 F9               [ 6]  189 	ld	sp, hl
                                    190 ;tetris.c:75: cmd[0]=40;
      000075 FD 21 00 00      [14]  191 	ld	iy, #0
      000079 FD 39            [15]  192 	add	iy, sp
      00007B FD 36 00 28      [19]  193 	ld	0 (iy), #0x28
                                    194 ;tetris.c:76: for(uint8_t i=0;i<64;++i)
      00007F 0E 00            [ 7]  195 	ld	c, #0x00
      000081                        196 00107$:
      000081 79               [ 4]  197 	ld	a, c
      000082 D6 40            [ 7]  198 	sub	a, #0x40
      000084 30 3A            [12]  199 	jr	NC, 00109$
                                    200 ;tetris.c:78: cmd[1]=i;
      000086 21 01 00         [10]  201 	ld	hl,#0x1
      000089 39               [11]  202 	add	hl,sp
      00008A 71               [ 7]  203 	ld	(hl), c
                                    204 ;tetris.c:79: for(word j=0;j<0x100;++j)
      00008B 11 00 00         [10]  205 	ld	de, #0x0000
      00008E                        206 00104$:
      00008E 6B               [ 4]  207 	ld	l, e
                                    208 ;	spillPairReg hl
                                    209 ;	spillPairReg hl
      00008F 62               [ 4]  210 	ld	h, d
                                    211 ;	spillPairReg hl
                                    212 ;	spillPairReg hl
      000090 7C               [ 4]  213 	ld	a, h
      000091 D6 01            [ 7]  214 	sub	a, #0x01
      000093 30 10            [12]  215 	jr	NC, 00101$
                                    216 ;tetris.c:80: cmd[2+j]=i;
      000095 23               [ 6]  217 	inc	hl
      000096 23               [ 6]  218 	inc	hl
      000097 44               [ 4]  219 	ld	b, h
      000098 D5               [11]  220 	push	de
      000099 5D               [ 4]  221 	ld	e, l
      00009A 50               [ 4]  222 	ld	d, b
      00009B 21 02 00         [10]  223 	ld	hl, #2
      00009E 39               [11]  224 	add	hl, sp
      00009F 19               [11]  225 	add	hl, de
      0000A0 D1               [10]  226 	pop	de
      0000A1 71               [ 7]  227 	ld	(hl), c
                                    228 ;tetris.c:79: for(word j=0;j<0x100;++j)
      0000A2 13               [ 6]  229 	inc	de
      0000A3 18 E9            [12]  230 	jr	00104$
      0000A5                        231 00101$:
                                    232 ;tetris.c:81: send_command(cmd,4);
      0000A5 C5               [11]  233 	push	bc
      0000A6 3E 04            [ 7]  234 	ld	a, #0x04
      0000A8 F5               [11]  235 	push	af
      0000A9 33               [ 6]  236 	inc	sp
      0000AA 21 03 00         [10]  237 	ld	hl, #3
      0000AD 39               [11]  238 	add	hl, sp
      0000AE CDr06r00         [17]  239 	call	_send_command
      0000B1 3E FE            [ 7]  240 	ld	a, #0xfe
      0000B3 F5               [11]  241 	push	af
      0000B4 33               [ 6]  242 	inc	sp
      0000B5 21 07 00         [10]  243 	ld	hl, #7
      0000B8 39               [11]  244 	add	hl, sp
      0000B9 CDr06r00         [17]  245 	call	_send_command
      0000BC C1               [10]  246 	pop	bc
                                    247 ;tetris.c:76: for(uint8_t i=0;i<64;++i)
      0000BD 0C               [ 4]  248 	inc	c
      0000BE 18 C1            [12]  249 	jr	00107$
      0000C0                        250 00109$:
                                    251 ;tetris.c:84: }
      0000C0 DD F9            [10]  252 	ld	sp, ix
      0000C2 DD E1            [14]  253 	pop	ix
      0000C4 C9               [10]  254 	ret
                                    255 ;tetris.c:86: uint8_t wait_key()
                                    256 ;	---------------------------------
                                    257 ; Function wait_key
                                    258 ; ---------------------------------
      0000C5                        259 _wait_key::
                                    260 ;tetris.c:88: word key = system_call(1);
      0000C5 3E 01            [ 7]  261 	ld	a, #0x01
      0000C7 CDr00r00         [17]  262 	call	_system_call
                                    263 ;tetris.c:89: if (key&0xFF00)
      0000CA 7A               [ 4]  264 	ld	a, d
      0000CB B7               [ 4]  265 	or	a, a
      0000CC 28 03            [12]  266 	jr	Z, 00102$
                                    267 ;tetris.c:90: return 0xFF;
      0000CE 3E FF            [ 7]  268 	ld	a, #0xff
      0000D0 C9               [10]  269 	ret
      0000D1                        270 00102$:
                                    271 ;tetris.c:91: return key&0xFF;
      0000D1 7B               [ 4]  272 	ld	a, e
                                    273 ;tetris.c:92: }
      0000D2 C9               [10]  274 	ret
                                    275 ;tetris.c:103: void initialize_board(Board* board)
                                    276 ;	---------------------------------
                                    277 ; Function initialize_board
                                    278 ; ---------------------------------
      0000D3                        279 _initialize_board::
      0000D3 EB               [ 4]  280 	ex	de, hl
                                    281 ;tetris.c:105: for (uint8_t i = 0; i < (W * H); ++i)
      0000D4 0E 00            [ 7]  282 	ld	c, #0x00
      0000D6                        283 00103$:
      0000D6 79               [ 4]  284 	ld	a, c
      0000D7 D6 B0            [ 7]  285 	sub	a, #0xb0
      0000D9 D0               [11]  286 	ret	NC
                                    287 ;tetris.c:106: board->grid[i] = 0;
      0000DA 69               [ 4]  288 	ld	l, c
      0000DB 26 00            [ 7]  289 	ld	h, #0x00
      0000DD 19               [11]  290 	add	hl, de
      0000DE 36 00            [10]  291 	ld	(hl), #0x00
                                    292 ;tetris.c:105: for (uint8_t i = 0; i < (W * H); ++i)
      0000E0 0C               [ 4]  293 	inc	c
                                    294 ;tetris.c:107: }
      0000E1 18 F3            [12]  295 	jr	00103$
                                    296 ;tetris.c:109: uint8_t board_position_free(Board* board, uint8_t x, uint8_t y)
                                    297 ;	---------------------------------
                                    298 ; Function board_position_free
                                    299 ; ---------------------------------
      0000E3                        300 _board_position_free::
      0000E3 DD E5            [15]  301 	push	ix
      0000E5 DD 21 00 00      [14]  302 	ld	ix,#0
      0000E9 DD 39            [15]  303 	add	ix,sp
      0000EB EB               [ 4]  304 	ex	de, hl
                                    305 ;tetris.c:111: if (x >= W || y >= H) return 0;
      0000EC DD 7E 04         [19]  306 	ld	a, 4 (ix)
      0000EF D6 0B            [ 7]  307 	sub	a, #0x0b
      0000F1 30 07            [12]  308 	jr	NC, 00101$
      0000F3 DD 7E 05         [19]  309 	ld	a, 5 (ix)
      0000F6 D6 10            [ 7]  310 	sub	a, #0x10
      0000F8 38 03            [12]  311 	jr	C, 00102$
      0000FA                        312 00101$:
      0000FA AF               [ 4]  313 	xor	a, a
      0000FB 18 1A            [12]  314 	jr	00104$
      0000FD                        315 00102$:
                                    316 ;tetris.c:112: return board->grid[y * W + x] == 0;
      0000FD DD 4E 05         [19]  317 	ld	c, 5 (ix)
      000100 06 00            [ 7]  318 	ld	b, #0x00
      000102 69               [ 4]  319 	ld	l, c
      000103 60               [ 4]  320 	ld	h, b
      000104 29               [11]  321 	add	hl, hl
      000105 29               [11]  322 	add	hl, hl
      000106 09               [11]  323 	add	hl, bc
      000107 29               [11]  324 	add	hl, hl
      000108 09               [11]  325 	add	hl, bc
      000109 DD 4E 04         [19]  326 	ld	c, 4 (ix)
      00010C 06 00            [ 7]  327 	ld	b, #0x00
      00010E 09               [11]  328 	add	hl, bc
      00010F 19               [11]  329 	add	hl, de
      000110 7E               [ 7]  330 	ld	a, (hl)
      000111 B7               [ 4]  331 	or	a, a
      000112 3E 01            [ 7]  332 	ld	a, #0x01
      000114 28 01            [12]  333 	jr	Z, 00112$
      000116 AF               [ 4]  334 	xor	a, a
      000117                        335 00112$:
      000117                        336 00104$:
                                    337 ;tetris.c:113: }
      000117 DD E1            [14]  338 	pop	ix
      000119 E1               [10]  339 	pop	hl
      00011A C1               [10]  340 	pop	bc
      00011B E9               [ 4]  341 	jp	(hl)
                                    342 ;tetris.c:115: void remove_full_rows(Board* board)
                                    343 ;	---------------------------------
                                    344 ; Function remove_full_rows
                                    345 ; ---------------------------------
      00011C                        346 _remove_full_rows::
      00011C DD E5            [15]  347 	push	ix
      00011E DD 21 00 00      [14]  348 	ld	ix,#0
      000122 DD 39            [15]  349 	add	ix,sp
      000124 F5               [11]  350 	push	af
      000125 F5               [11]  351 	push	af
      000126 F5               [11]  352 	push	af
      000127 4D               [ 4]  353 	ld	c, l
      000128 44               [ 4]  354 	ld	b, h
                                    355 ;tetris.c:118: uint8_t ofs = (H - 1) * W;
      000129 1E A5            [ 7]  356 	ld	e, #0xa5
                                    357 ;tetris.c:119: for (uint8_t y = H - 1; y > 0; --y, ofs-=W)
      00012B DD 36 FC 0F      [19]  358 	ld	-4 (ix), #0x0f
      00012F DD 36 FD 00      [19]  359 	ld	-3 (ix), #0x00
      000133                        360 00127$:
      000133 DD 7E FC         [19]  361 	ld	a, -4 (ix)
      000136 B7               [ 4]  362 	or	a, a
      000137 CArE0r01         [10]  363 	jp	Z, 00109$
                                    364 ;tetris.c:122: for (uint8_t x = 0; x < W; ++x)
      00013A DD 36 FE 00      [19]  365 	ld	-2 (ix), #0x00
      00013E DD 36 FF 00      [19]  366 	ld	-1 (ix), #0x00
      000142                        367 00115$:
      000142 DD 7E FF         [19]  368 	ld	a, -1 (ix)
      000145 D6 0B            [ 7]  369 	sub	a, #0x0b
      000147 30 1A            [12]  370 	jr	NC, 00103$
                                    371 ;tetris.c:123: if (board->grid[ofs + x] != 0)
      000149 7B               [ 4]  372 	ld	a, e
      00014A 16 00            [ 7]  373 	ld	d, #0x00
      00014C DD 6E FF         [19]  374 	ld	l, -1 (ix)
                                    375 ;	spillPairReg hl
                                    376 ;	spillPairReg hl
      00014F 26 00            [ 7]  377 	ld	h, #0x00
                                    378 ;	spillPairReg hl
                                    379 ;	spillPairReg hl
      000151 85               [ 4]  380 	add	a, l
      000152 6F               [ 4]  381 	ld	l, a
                                    382 ;	spillPairReg hl
                                    383 ;	spillPairReg hl
      000153 7A               [ 4]  384 	ld	a, d
      000154 8C               [ 4]  385 	adc	a, h
      000155 67               [ 4]  386 	ld	h, a
                                    387 ;	spillPairReg hl
                                    388 ;	spillPairReg hl
      000156 09               [11]  389 	add	hl, bc
      000157 7E               [ 7]  390 	ld	a, (hl)
      000158 B7               [ 4]  391 	or	a, a
      000159 28 03            [12]  392 	jr	Z, 00116$
                                    393 ;tetris.c:124: ++count;
      00015B DD 34 FE         [23]  394 	inc	-2 (ix)
      00015E                        395 00116$:
                                    396 ;tetris.c:122: for (uint8_t x = 0; x < W; ++x)
      00015E DD 34 FF         [23]  397 	inc	-1 (ix)
      000161 18 DF            [12]  398 	jr	00115$
      000163                        399 00103$:
                                    400 ;tetris.c:125: if (count == W)
      000163 DD 7E FE         [19]  401 	ld	a, -2 (ix)
      000166 D6 0B            [ 7]  402 	sub	a, #0x0b
      000168 20 6C            [12]  403 	jr	NZ, 00128$
                                    404 ;tetris.c:127: full_rows++;
      00016A DD 34 FD         [23]  405 	inc	-3 (ix)
                                    406 ;tetris.c:128: uint8_t aofs = ofs;
      00016D 53               [ 4]  407 	ld	d, e
                                    408 ;tetris.c:129: for (uint8_t ay = y; ay > 0; --ay)
      00016E DD 7E FC         [19]  409 	ld	a, -4 (ix)
      000171 DD 77 FE         [19]  410 	ld	-2 (ix), a
      000174                        411 00121$:
      000174 DD 7E FE         [19]  412 	ld	a, -2 (ix)
      000177 B7               [ 4]  413 	or	a, a
      000178 28 45            [12]  414 	jr	Z, 00151$
                                    415 ;tetris.c:131: for (uint8_t x = 0; x < W; ++x)
      00017A DD 36 FF 00      [19]  416 	ld	-1 (ix), #0x00
      00017E                        417 00118$:
      00017E DD 7E FF         [19]  418 	ld	a, -1 (ix)
      000181 D6 0B            [ 7]  419 	sub	a, #0x0b
      000183 30 31            [12]  420 	jr	NC, 00104$
                                    421 ;tetris.c:132: board->grid[aofs + x] = board->grid[aofs + x - W];
      000185 DD 72 FA         [19]  422 	ld	-6 (ix), d
      000188 DD 36 FB 00      [19]  423 	ld	-5 (ix), #0x00
      00018C DD 7E FF         [19]  424 	ld	a, -1 (ix)
      00018F 26 00            [ 7]  425 	ld	h, #0x00
                                    426 ;	spillPairReg hl
                                    427 ;	spillPairReg hl
      000191 DD 86 FA         [19]  428 	add	a, -6 (ix)
      000194 6F               [ 4]  429 	ld	l, a
                                    430 ;	spillPairReg hl
                                    431 ;	spillPairReg hl
      000195 7C               [ 4]  432 	ld	a, h
      000196 DD 8E FB         [19]  433 	adc	a, -5 (ix)
      000199 67               [ 4]  434 	ld	h, a
                                    435 ;	spillPairReg hl
                                    436 ;	spillPairReg hl
      00019A 79               [ 4]  437 	ld	a, c
      00019B 85               [ 4]  438 	add	a, l
      00019C DD 77 FA         [19]  439 	ld	-6 (ix), a
      00019F 78               [ 4]  440 	ld	a, b
      0001A0 8C               [ 4]  441 	adc	a, h
      0001A1 DD 77 FB         [19]  442 	ld	-5 (ix), a
      0001A4 7D               [ 4]  443 	ld	a, l
      0001A5 C6 F5            [ 7]  444 	add	a, #0xf5
      0001A7 6F               [ 4]  445 	ld	l, a
                                    446 ;	spillPairReg hl
                                    447 ;	spillPairReg hl
      0001A8 7C               [ 4]  448 	ld	a, h
      0001A9 CE FF            [ 7]  449 	adc	a, #0xff
      0001AB 67               [ 4]  450 	ld	h, a
                                    451 ;	spillPairReg hl
                                    452 ;	spillPairReg hl
      0001AC 09               [11]  453 	add	hl, bc
      0001AD 7E               [ 7]  454 	ld	a, (hl)
      0001AE E1               [10]  455 	pop	hl
      0001AF E5               [11]  456 	push	hl
      0001B0 77               [ 7]  457 	ld	(hl), a
                                    458 ;tetris.c:131: for (uint8_t x = 0; x < W; ++x)
      0001B1 DD 34 FF         [23]  459 	inc	-1 (ix)
      0001B4 18 C8            [12]  460 	jr	00118$
      0001B6                        461 00104$:
                                    462 ;tetris.c:133: aofs -= W;
      0001B6 7A               [ 4]  463 	ld	a, d
      0001B7 C6 F5            [ 7]  464 	add	a, #0xf5
      0001B9 57               [ 4]  465 	ld	d, a
                                    466 ;tetris.c:129: for (uint8_t ay = y; ay > 0; --ay)
      0001BA DD 35 FE         [23]  467 	dec	-2 (ix)
      0001BD 18 B5            [12]  468 	jr	00121$
                                    469 ;tetris.c:135: for (uint8_t x = 0; x < W; ++x)
      0001BF                        470 00151$:
      0001BF 16 00            [ 7]  471 	ld	d, #0x00
      0001C1                        472 00124$:
      0001C1 7A               [ 4]  473 	ld	a, d
      0001C2 D6 0B            [ 7]  474 	sub	a, #0x0b
      0001C4 30 09            [12]  475 	jr	NC, 00106$
                                    476 ;tetris.c:136: board->grid[x] = 0;
      0001C6 6A               [ 4]  477 	ld	l, d
      0001C7 26 00            [ 7]  478 	ld	h, #0x00
      0001C9 09               [11]  479 	add	hl, bc
      0001CA 36 00            [10]  480 	ld	(hl), #0x00
                                    481 ;tetris.c:135: for (uint8_t x = 0; x < W; ++x)
      0001CC 14               [ 4]  482 	inc	d
      0001CD 18 F2            [12]  483 	jr	00124$
      0001CF                        484 00106$:
                                    485 ;tetris.c:138: ++y;
      0001CF DD 34 FC         [23]  486 	inc	-4 (ix)
                                    487 ;tetris.c:139: ofs += W;
      0001D2 7B               [ 4]  488 	ld	a, e
      0001D3 C6 0B            [ 7]  489 	add	a, #0x0b
      0001D5 5F               [ 4]  490 	ld	e, a
      0001D6                        491 00128$:
                                    492 ;tetris.c:119: for (uint8_t y = H - 1; y > 0; --y, ofs-=W)
      0001D6 DD 35 FC         [23]  493 	dec	-4 (ix)
      0001D9 7B               [ 4]  494 	ld	a, e
      0001DA C6 F5            [ 7]  495 	add	a, #0xf5
      0001DC 5F               [ 4]  496 	ld	e, a
      0001DD C3r33r01         [10]  497 	jp	00127$
      0001E0                        498 00109$:
                                    499 ;tetris.c:142: if (full_rows > 0)
      0001E0 DD 7E FD         [19]  500 	ld	a, -3 (ix)
      0001E3 B7               [ 4]  501 	or	a, a
      0001E4 28 5E            [12]  502 	jr	Z, 00135$
                                    503 ;tetris.c:144: uint8_t ofs = 0;
      0001E6 1E 00            [ 7]  504 	ld	e, #0x00
                                    505 ;tetris.c:145: for (uint8_t by = 0; by < H; ++by)
      0001E8 DD 36 FD 00      [19]  506 	ld	-3 (ix), #0x00
      0001EC                        507 00133$:
      0001EC DD 7E FD         [19]  508 	ld	a, -3 (ix)
      0001EF D6 10            [ 7]  509 	sub	a, #0x10
      0001F1 30 51            [12]  510 	jr	NC, 00135$
                                    511 ;tetris.c:147: word y= ((word)by) << 4;
      0001F3 DD 6E FD         [19]  512 	ld	l, -3 (ix)
                                    513 ;	spillPairReg hl
                                    514 ;	spillPairReg hl
      0001F6 26 00            [ 7]  515 	ld	h, #0x00
                                    516 ;	spillPairReg hl
                                    517 ;	spillPairReg hl
      0001F8 29               [11]  518 	add	hl, hl
      0001F9 29               [11]  519 	add	hl, hl
      0001FA 29               [11]  520 	add	hl, hl
      0001FB 29               [11]  521 	add	hl, hl
      0001FC DD 75 FB         [19]  522 	ld	-5 (ix), l
      0001FF DD 74 FC         [19]  523 	ld	-4 (ix), h
                                    524 ;tetris.c:148: for (uint8_t bx = 0; bx < W; ++bx, ++ofs)
      000202 DD 36 FE 00      [19]  525 	ld	-2 (ix), #0x00
      000206 DD 73 FF         [19]  526 	ld	-1 (ix), e
      000209                        527 00130$:
      000209 DD 7E FE         [19]  528 	ld	a, -2 (ix)
      00020C D6 0B            [ 7]  529 	sub	a, #0x0b
      00020E 30 2C            [12]  530 	jr	NC, 00161$
                                    531 ;tetris.c:150: word x = ((word)(bx + L)) << 4;
      000210 DD 5E FE         [19]  532 	ld	e, -2 (ix)
      000213 16 00            [ 7]  533 	ld	d, #0x00
      000215 21 07 00         [10]  534 	ld	hl, #0x0007
      000218 19               [11]  535 	add	hl, de
      000219 29               [11]  536 	add	hl, hl
      00021A 29               [11]  537 	add	hl, hl
      00021B 29               [11]  538 	add	hl, hl
      00021C 29               [11]  539 	add	hl, hl
                                    540 ;tetris.c:151: draw_cube(x, y, board->grid[ofs]);
      00021D DD 7E FF         [19]  541 	ld	a, -1 (ix)
      000220 81               [ 4]  542 	add	a, c
      000221 5F               [ 4]  543 	ld	e, a
      000222 3E 00            [ 7]  544 	ld	a, #0x00
      000224 88               [ 4]  545 	adc	a, b
      000225 57               [ 4]  546 	ld	d, a
      000226 1A               [ 7]  547 	ld	a, (de)
      000227 C5               [11]  548 	push	bc
      000228 F5               [11]  549 	push	af
      000229 33               [ 6]  550 	inc	sp
      00022A DD 5E FB         [19]  551 	ld	e, -5 (ix)
      00022D DD 56 FC         [19]  552 	ld	d, -4 (ix)
      000230 CDr43r00         [17]  553 	call	_draw_cube
      000233 C1               [10]  554 	pop	bc
                                    555 ;tetris.c:148: for (uint8_t bx = 0; bx < W; ++bx, ++ofs)
      000234 DD 34 FE         [23]  556 	inc	-2 (ix)
      000237 DD 34 FF         [23]  557 	inc	-1 (ix)
      00023A 18 CD            [12]  558 	jr	00130$
      00023C                        559 00161$:
      00023C DD 5E FF         [19]  560 	ld	e, -1 (ix)
                                    561 ;tetris.c:145: for (uint8_t by = 0; by < H; ++by)
      00023F DD 34 FD         [23]  562 	inc	-3 (ix)
      000242 18 A8            [12]  563 	jr	00133$
      000244                        564 00135$:
                                    565 ;tetris.c:155: }
      000244 DD F9            [10]  566 	ld	sp, ix
      000246 DD E1            [14]  567 	pop	ix
      000248 C9               [10]  568 	ret
                                    569 ;tetris.c:176: void place_piece(Board* board, Piece* piece)
                                    570 ;	---------------------------------
                                    571 ; Function place_piece
                                    572 ; ---------------------------------
      000249                        573 _place_piece::
      000249 DD E5            [15]  574 	push	ix
      00024B DD 21 00 00      [14]  575 	ld	ix,#0
      00024F DD 39            [15]  576 	add	ix,sp
      000251 FD 21 F6 FF      [14]  577 	ld	iy, #-10
      000255 FD 39            [15]  578 	add	iy, sp
      000257 FD F9            [10]  579 	ld	sp, iy
      000259 DD 75 FD         [19]  580 	ld	-3 (ix), l
      00025C DD 74 FE         [19]  581 	ld	-2 (ix), h
                                    582 ;tetris.c:178: for (uint8_t i = 0; i < 4; ++i)
      00025F 21 02 00         [10]  583 	ld	hl, #0x0002
      000262 19               [11]  584 	add	hl, de
      000263 E3               [19]  585 	ex	(sp), hl
      000264 DD 73 F8         [19]  586 	ld	-8 (ix), e
      000267 DD 72 F9         [19]  587 	ld	-7 (ix), d
      00026A DD 73 FA         [19]  588 	ld	-6 (ix), e
      00026D DD 72 FB         [19]  589 	ld	-5 (ix), d
      000270 DD 36 FF 00      [19]  590 	ld	-1 (ix), #0x00
      000274                        591 00103$:
      000274 DD 7E FF         [19]  592 	ld	a, -1 (ix)
      000277 D6 04            [ 7]  593 	sub	a, #0x04
      000279 30 53            [12]  594 	jr	NC, 00101$
                                    595 ;tetris.c:180: uint8_t x = piece->offsets[i * 2 + 0] + piece->cx;
      00027B DD 7E FF         [19]  596 	ld	a, -1 (ix)
      00027E 87               [ 4]  597 	add	a, a
      00027F 4F               [ 4]  598 	ld	c, a
      000280 E1               [10]  599 	pop	hl
      000281 E5               [11]  600 	push	hl
      000282 06 00            [ 7]  601 	ld	b, #0x00
      000284 09               [11]  602 	add	hl, bc
      000285 1A               [ 7]  603 	ld	a, (de)
      000286 46               [ 7]  604 	ld	b, (hl)
      000287 80               [ 4]  605 	add	a, b
      000288 DD 77 FC         [19]  606 	ld	-4 (ix), a
                                    607 ;tetris.c:181: uint8_t y = piece->offsets[i * 2 + 1] + piece->cy;
      00028B 79               [ 4]  608 	ld	a, c
      00028C 3C               [ 4]  609 	inc	a
      00028D DD 86 F6         [19]  610 	add	a, -10 (ix)
      000290 4F               [ 4]  611 	ld	c, a
      000291 3E 00            [ 7]  612 	ld	a, #0x00
      000293 DD 8E F7         [19]  613 	adc	a, -9 (ix)
      000296 47               [ 4]  614 	ld	b, a
      000297 DD 6E F8         [19]  615 	ld	l, -8 (ix)
      00029A DD 66 F9         [19]  616 	ld	h, -7 (ix)
      00029D 23               [ 6]  617 	inc	hl
      00029E 6E               [ 7]  618 	ld	l, (hl)
                                    619 ;	spillPairReg hl
      00029F 0A               [ 7]  620 	ld	a, (bc)
      0002A0 85               [ 4]  621 	add	a, l
                                    622 ;tetris.c:182: board->grid[y * W + x] = piece->color;
      0002A1 4F               [ 4]  623 	ld	c, a
      0002A2 06 00            [ 7]  624 	ld	b, #0x00
      0002A4 69               [ 4]  625 	ld	l, c
      0002A5 60               [ 4]  626 	ld	h, b
      0002A6 29               [11]  627 	add	hl, hl
      0002A7 29               [11]  628 	add	hl, hl
      0002A8 09               [11]  629 	add	hl, bc
      0002A9 29               [11]  630 	add	hl, hl
      0002AA 09               [11]  631 	add	hl, bc
      0002AB DD 4E FC         [19]  632 	ld	c, -4 (ix)
      0002AE 06 00            [ 7]  633 	ld	b, #0x00
      0002B0 09               [11]  634 	add	hl, bc
      0002B1 7D               [ 4]  635 	ld	a, l
      0002B2 DD 86 FD         [19]  636 	add	a, -3 (ix)
      0002B5 4F               [ 4]  637 	ld	c, a
      0002B6 7C               [ 4]  638 	ld	a, h
      0002B7 DD 8E FE         [19]  639 	adc	a, -2 (ix)
      0002BA 47               [ 4]  640 	ld	b, a
      0002BB DD 6E FA         [19]  641 	ld	l, -6 (ix)
      0002BE DD 66 FB         [19]  642 	ld	h, -5 (ix)
      0002C1 C5               [11]  643 	push	bc
      0002C2 01 0A 00         [10]  644 	ld	bc, #0x000a
      0002C5 09               [11]  645 	add	hl, bc
      0002C6 C1               [10]  646 	pop	bc
      0002C7 7E               [ 7]  647 	ld	a, (hl)
      0002C8 02               [ 7]  648 	ld	(bc), a
                                    649 ;tetris.c:178: for (uint8_t i = 0; i < 4; ++i)
      0002C9 DD 34 FF         [23]  650 	inc	-1 (ix)
      0002CC 18 A6            [12]  651 	jr	00103$
      0002CE                        652 00101$:
                                    653 ;tetris.c:184: piece->valid = 0;
      0002CE 21 0B 00         [10]  654 	ld	hl, #0x000b
      0002D1 19               [11]  655 	add	hl, de
      0002D2 36 00            [10]  656 	ld	(hl), #0x00
                                    657 ;tetris.c:185: }
      0002D4 DD F9            [10]  658 	ld	sp, ix
      0002D6 DD E1            [14]  659 	pop	ix
      0002D8 C9               [10]  660 	ret
      0002D9                        661 _offsets:
      0002D9 FE                     662 	.db #0xfe	; 254
      0002DA 00                     663 	.db #0x00	; 0
      0002DB FF                     664 	.db #0xff	; 255
      0002DC 00                     665 	.db #0x00	; 0
      0002DD 00                     666 	.db #0x00	; 0
      0002DE 00                     667 	.db #0x00	; 0
      0002DF 01                     668 	.db #0x01	; 1
      0002E0 00                     669 	.db #0x00	; 0
      0002E1 FF                     670 	.db #0xff	; 255
      0002E2 00                     671 	.db #0x00	; 0
      0002E3 00                     672 	.db #0x00	; 0
      0002E4 00                     673 	.db #0x00	; 0
      0002E5 01                     674 	.db #0x01	; 1
      0002E6 00                     675 	.db #0x00	; 0
      0002E7 01                     676 	.db #0x01	; 1
      0002E8 01                     677 	.db #0x01	; 1
      0002E9 FF                     678 	.db #0xff	; 255
      0002EA 00                     679 	.db #0x00	; 0
      0002EB 00                     680 	.db #0x00	; 0
      0002EC 00                     681 	.db #0x00	; 0
      0002ED 01                     682 	.db #0x01	; 1
      0002EE 00                     683 	.db #0x00	; 0
      0002EF 01                     684 	.db #0x01	; 1
      0002F0 FF                     685 	.db #0xff	; 255
      0002F1 FF                     686 	.db #0xff	; 255
      0002F2 00                     687 	.db #0x00	; 0
      0002F3 00                     688 	.db #0x00	; 0
      0002F4 00                     689 	.db #0x00	; 0
      0002F5 01                     690 	.db #0x01	; 1
      0002F6 00                     691 	.db #0x00	; 0
      0002F7 00                     692 	.db #0x00	; 0
      0002F8 01                     693 	.db #0x01	; 1
      0002F9 FF                     694 	.db #0xff	; 255
      0002FA 00                     695 	.db #0x00	; 0
      0002FB 00                     696 	.db #0x00	; 0
      0002FC 00                     697 	.db #0x00	; 0
      0002FD 00                     698 	.db #0x00	; 0
      0002FE FF                     699 	.db #0xff	; 255
      0002FF 01                     700 	.db #0x01	; 1
      000300 FF                     701 	.db #0xff	; 255
      000301 FF                     702 	.db #0xff	; 255
      000302 00                     703 	.db #0x00	; 0
      000303 00                     704 	.db #0x00	; 0
      000304 00                     705 	.db #0x00	; 0
      000305 00                     706 	.db #0x00	; 0
      000306 01                     707 	.db #0x01	; 1
      000307 01                     708 	.db #0x01	; 1
      000308 01                     709 	.db #0x01	; 1
      000309 FF                     710 	.db #0xff	; 255
      00030A 00                     711 	.db #0x00	; 0
      00030B 00                     712 	.db #0x00	; 0
      00030C 00                     713 	.db #0x00	; 0
      00030D FF                     714 	.db #0xff	; 255
      00030E 01                     715 	.db #0x01	; 1
      00030F 00                     716 	.db #0x00	; 0
      000310 01                     717 	.db #0x01	; 1
                                    718 ;tetris.c:187: uint8_t generate_piece(Piece* piece)
                                    719 ;	---------------------------------
                                    720 ; Function generate_piece
                                    721 ; ---------------------------------
      000311                        722 _generate_piece::
      000311 DD E5            [15]  723 	push	ix
      000313 DD 21 00 00      [14]  724 	ld	ix,#0
      000317 DD 39            [15]  725 	add	ix,sp
      000319 F5               [11]  726 	push	af
      00031A F5               [11]  727 	push	af
      00031B 3B               [ 6]  728 	dec	sp
                                    729 ;tetris.c:190: piece->cx = W/2;
      00031C 4D               [ 4]  730 	ld	c, l
      00031D 44               [ 4]  731 	ld	b, h
      00031E 36 05            [10]  732 	ld	(hl), #0x05
                                    733 ;tetris.c:191: piece->cy = 2;
      000320 69               [ 4]  734 	ld	l, c
                                    735 ;	spillPairReg hl
                                    736 ;	spillPairReg hl
      000321 60               [ 4]  737 	ld	h, b
                                    738 ;	spillPairReg hl
                                    739 ;	spillPairReg hl
      000322 23               [ 6]  740 	inc	hl
      000323 36 02            [10]  741 	ld	(hl), #0x02
                                    742 ;tetris.c:192: uint8_t type = random() & 7;
      000325 C5               [11]  743 	push	bc
      000326 CDr02r00         [17]  744 	call	_random
      000329 C1               [10]  745 	pop	bc
      00032A 7B               [ 4]  746 	ld	a, e
      00032B E6 07            [ 7]  747 	and	a, #0x07
                                    748 ;tetris.c:193: if (type < 7)
      00032D FE 07            [ 7]  749 	cp	a, #0x07
      00032F 30 4B            [12]  750 	jr	NC, 00103$
                                    751 ;tetris.c:195: uint8_t base = type << 3;
      000331 5F               [ 4]  752 	ld	e, a
      000332 87               [ 4]  753 	add	a, a
      000333 87               [ 4]  754 	add	a, a
      000334 87               [ 4]  755 	add	a, a
      000335 DD 77 FB         [19]  756 	ld	-5 (ix), a
                                    757 ;tetris.c:196: for (i = 0; i < 8; ++i)
      000338 21 02 00         [10]  758 	ld	hl, #0x0002
      00033B 09               [11]  759 	add	hl, bc
      00033C DD 75 FC         [19]  760 	ld	-4 (ix), l
      00033F DD 74 FD         [19]  761 	ld	-3 (ix), h
      000342 16 00            [ 7]  762 	ld	d, #0x00
      000344                        763 00104$:
                                    764 ;tetris.c:197: piece->offsets[i] = offsets[base + i];
      000344 DD 7E FC         [19]  765 	ld	a, -4 (ix)
      000347 82               [ 4]  766 	add	a, d
      000348 DD 77 FE         [19]  767 	ld	-2 (ix), a
      00034B DD 7E FD         [19]  768 	ld	a, -3 (ix)
      00034E CE 00            [ 7]  769 	adc	a, #0x00
      000350 DD 77 FF         [19]  770 	ld	-1 (ix), a
      000353 DD 7E FB         [19]  771 	ld	a, -5 (ix)
      000356 82               [ 4]  772 	add	a, d
      000357 C6rD9            [ 7]  773 	add	a, #<(_offsets)
      000359 6F               [ 4]  774 	ld	l, a
                                    775 ;	spillPairReg hl
                                    776 ;	spillPairReg hl
      00035A 3E 00            [ 7]  777 	ld	a, #0x00
      00035C CEs02            [ 7]  778 	adc	a, #>(_offsets)
      00035E 67               [ 4]  779 	ld	h, a
      00035F 7E               [ 7]  780 	ld	a, (hl)
      000360 DD 6E FE         [19]  781 	ld	l, -2 (ix)
      000363 DD 66 FF         [19]  782 	ld	h, -1 (ix)
      000366 77               [ 7]  783 	ld	(hl), a
                                    784 ;tetris.c:196: for (i = 0; i < 8; ++i)
      000367 14               [ 4]  785 	inc	d
      000368 7A               [ 4]  786 	ld	a, d
      000369 D6 08            [ 7]  787 	sub	a, #0x08
      00036B 38 D7            [12]  788 	jr	C, 00104$
                                    789 ;tetris.c:198: piece->color = type+1;
      00036D 21 0A 00         [10]  790 	ld	hl, #0x000a
      000370 09               [11]  791 	add	hl, bc
      000371 1C               [ 4]  792 	inc	e
      000372 73               [ 7]  793 	ld	(hl), e
                                    794 ;tetris.c:199: piece->valid = 1;
      000373 21 0B 00         [10]  795 	ld	hl, #0x000b
      000376 09               [11]  796 	add	hl, bc
                                    797 ;tetris.c:200: return 1;
      000377 3E 01            [ 7]  798 	ld	a,#0x01
      000379 77               [ 7]  799 	ld	(hl),a
      00037A 18 01            [12]  800 	jr	00106$
      00037C                        801 00103$:
                                    802 ;tetris.c:202: return 0;
      00037C AF               [ 4]  803 	xor	a, a
      00037D                        804 00106$:
                                    805 ;tetris.c:203: }
      00037D DD F9            [10]  806 	ld	sp, ix
      00037F DD E1            [14]  807 	pop	ix
      000381 C9               [10]  808 	ret
                                    809 ;tetris.c:205: void draw_piece(Piece* piece, uint8_t erase)
                                    810 ;	---------------------------------
                                    811 ; Function draw_piece
                                    812 ; ---------------------------------
      000382                        813 _draw_piece::
      000382 DD E5            [15]  814 	push	ix
      000384 DD 21 00 00      [14]  815 	ld	ix,#0
      000388 DD 39            [15]  816 	add	ix,sp
      00038A F5               [11]  817 	push	af
      00038B F5               [11]  818 	push	af
      00038C F5               [11]  819 	push	af
      00038D 3B               [ 6]  820 	dec	sp
      00038E 4D               [ 4]  821 	ld	c, l
      00038F 44               [ 4]  822 	ld	b, h
                                    823 ;tetris.c:207: uint8_t color = erase ? 0 : piece->color;
      000390 DD 7E 04         [19]  824 	ld	a, 4 (ix)
      000393 B7               [ 4]  825 	or	a, a
      000394 28 04            [12]  826 	jr	Z, 00107$
      000396 AF               [ 4]  827 	xor	a, a
      000397 5F               [ 4]  828 	ld	e, a
      000398 18 08            [12]  829 	jr	00108$
      00039A                        830 00107$:
      00039A C5               [11]  831 	push	bc
      00039B FD E1            [14]  832 	pop	iy
      00039D FD 7E 0A         [19]  833 	ld	a, 10 (iy)
      0003A0 1E 00            [ 7]  834 	ld	e, #0x00
      0003A2                        835 00108$:
      0003A2 DD 77 F9         [19]  836 	ld	-7 (ix), a
                                    837 ;tetris.c:208: for (uint8_t i = 0; i < 4; ++i)
      0003A5 21 02 00         [10]  838 	ld	hl, #0x0002
      0003A8 09               [11]  839 	add	hl, bc
      0003A9 DD 75 FA         [19]  840 	ld	-6 (ix), l
      0003AC DD 74 FB         [19]  841 	ld	-5 (ix), h
      0003AF DD 71 FC         [19]  842 	ld	-4 (ix), c
      0003B2 DD 70 FD         [19]  843 	ld	-3 (ix), b
      0003B5 DD 36 FF 00      [19]  844 	ld	-1 (ix), #0x00
      0003B9                        845 00103$:
      0003B9 DD 7E FF         [19]  846 	ld	a, -1 (ix)
      0003BC D6 04            [ 7]  847 	sub	a, #0x04
      0003BE 30 50            [12]  848 	jr	NC, 00105$
                                    849 ;tetris.c:210: uint8_t bx = piece->cx + piece->offsets[i * 2 + 0];
      0003C0 0A               [ 7]  850 	ld	a, (bc)
      0003C1 57               [ 4]  851 	ld	d, a
      0003C2 DD 7E FF         [19]  852 	ld	a, -1 (ix)
      0003C5 87               [ 4]  853 	add	a, a
      0003C6 5F               [ 4]  854 	ld	e, a
      0003C7 DD 86 FA         [19]  855 	add	a, -6 (ix)
      0003CA 6F               [ 4]  856 	ld	l, a
                                    857 ;	spillPairReg hl
                                    858 ;	spillPairReg hl
      0003CB 3E 00            [ 7]  859 	ld	a, #0x00
      0003CD DD 8E FB         [19]  860 	adc	a, -5 (ix)
      0003D0 67               [ 4]  861 	ld	h, a
      0003D1 7E               [ 7]  862 	ld	a, (hl)
      0003D2 82               [ 4]  863 	add	a, d
      0003D3 DD 77 FE         [19]  864 	ld	-2 (ix), a
                                    865 ;tetris.c:211: uint8_t by = piece->cy + piece->offsets[i * 2 + 1];
      0003D6 DD 6E FC         [19]  866 	ld	l, -4 (ix)
      0003D9 DD 66 FD         [19]  867 	ld	h, -3 (ix)
      0003DC 23               [ 6]  868 	inc	hl
      0003DD 6E               [ 7]  869 	ld	l, (hl)
                                    870 ;	spillPairReg hl
      0003DE 7B               [ 4]  871 	ld	a, e
      0003DF 3C               [ 4]  872 	inc	a
      0003E0 DD 86 FA         [19]  873 	add	a, -6 (ix)
      0003E3 5F               [ 4]  874 	ld	e, a
      0003E4 3E 00            [ 7]  875 	ld	a, #0x00
      0003E6 DD 8E FB         [19]  876 	adc	a, -5 (ix)
      0003E9 57               [ 4]  877 	ld	d, a
      0003EA 1A               [ 7]  878 	ld	a, (de)
      0003EB 85               [ 4]  879 	add	a, l
      0003EC 5F               [ 4]  880 	ld	e, a
                                    881 ;tetris.c:212: bx += L;
      0003ED DD 7E FE         [19]  882 	ld	a, -2 (ix)
      0003F0 C6 07            [ 7]  883 	add	a, #0x07
                                    884 ;tetris.c:213: word x = bx << 4;
      0003F2 26 00            [ 7]  885 	ld	h, #0x00
                                    886 ;	spillPairReg hl
                                    887 ;	spillPairReg hl
      0003F4 6F               [ 4]  888 	ld	l, a
      0003F5 29               [11]  889 	add	hl, hl
      0003F6 29               [11]  890 	add	hl, hl
      0003F7 29               [11]  891 	add	hl, hl
      0003F8 29               [11]  892 	add	hl, hl
                                    893 ;tetris.c:214: word y = by << 4;
      0003F9 16 00            [ 7]  894 	ld	d, #0x00
      0003FB EB               [ 4]  895 	ex	de, hl
      0003FC 29               [11]  896 	add	hl, hl
      0003FD 29               [11]  897 	add	hl, hl
      0003FE 29               [11]  898 	add	hl, hl
      0003FF 29               [11]  899 	add	hl, hl
                                    900 ;tetris.c:215: draw_cube(x, y, color);
      000400 C5               [11]  901 	push	bc
      000401 EB               [ 4]  902 	ex	de, hl
      000402 DD 7E F9         [19]  903 	ld	a, -7 (ix)
      000405 F5               [11]  904 	push	af
      000406 33               [ 6]  905 	inc	sp
      000407 CDr43r00         [17]  906 	call	_draw_cube
      00040A C1               [10]  907 	pop	bc
                                    908 ;tetris.c:208: for (uint8_t i = 0; i < 4; ++i)
      00040B DD 34 FF         [23]  909 	inc	-1 (ix)
      00040E 18 A9            [12]  910 	jr	00103$
      000410                        911 00105$:
                                    912 ;tetris.c:217: }
      000410 DD F9            [10]  913 	ld	sp, ix
      000412 DD E1            [14]  914 	pop	ix
      000414 E1               [10]  915 	pop	hl
      000415 33               [ 6]  916 	inc	sp
      000416 E9               [ 4]  917 	jp	(hl)
                                    918 ;tetris.c:219: uint8_t move_piece(Board* board, Piece* piece, uint8_t dx, uint8_t dy)
                                    919 ;	---------------------------------
                                    920 ; Function move_piece
                                    921 ; ---------------------------------
      000417                        922 _move_piece::
      000417 DD E5            [15]  923 	push	ix
      000419 DD 21 00 00      [14]  924 	ld	ix,#0
      00041D DD 39            [15]  925 	add	ix,sp
      00041F FD 21 F6 FF      [14]  926 	ld	iy, #-10
      000423 FD 39            [15]  927 	add	iy, sp
      000425 FD F9            [10]  928 	ld	sp, iy
      000427 4D               [ 4]  929 	ld	c, l
      000428 44               [ 4]  930 	ld	b, h
                                    931 ;tetris.c:221: for (uint8_t i = 0; i < 4; ++i)
      000429 21 02 00         [10]  932 	ld	hl, #0x0002
      00042C 19               [11]  933 	add	hl, de
      00042D E3               [19]  934 	ex	(sp), hl
      00042E 6B               [ 4]  935 	ld	l, e
      00042F 62               [ 4]  936 	ld	h, d
      000430 23               [ 6]  937 	inc	hl
      000431 DD 75 F8         [19]  938 	ld	-8 (ix), l
      000434 DD 74 F9         [19]  939 	ld	-7 (ix), h
      000437 DD 7E F8         [19]  940 	ld	a, -8 (ix)
      00043A DD 77 FA         [19]  941 	ld	-6 (ix), a
      00043D DD 7E F9         [19]  942 	ld	a, -7 (ix)
      000440 DD 77 FB         [19]  943 	ld	-5 (ix), a
      000443 DD 36 FF 00      [19]  944 	ld	-1 (ix), #0x00
      000447                        945 00105$:
      000447 DD 7E FF         [19]  946 	ld	a, -1 (ix)
      00044A D6 04            [ 7]  947 	sub	a, #0x04
      00044C 30 59            [12]  948 	jr	NC, 00103$
                                    949 ;tetris.c:223: uint8_t x = piece->offsets[i * 2 + 0] + piece->cx + dx;
      00044E DD 7E FF         [19]  950 	ld	a, -1 (ix)
      000451 87               [ 4]  951 	add	a, a
      000452 DD 77 FE         [19]  952 	ld	-2 (ix), a
      000455 DD 86 F6         [19]  953 	add	a, -10 (ix)
      000458 6F               [ 4]  954 	ld	l, a
                                    955 ;	spillPairReg hl
                                    956 ;	spillPairReg hl
      000459 3E 00            [ 7]  957 	ld	a, #0x00
      00045B DD 8E F7         [19]  958 	adc	a, -9 (ix)
      00045E 67               [ 4]  959 	ld	h, a
                                    960 ;	spillPairReg hl
                                    961 ;	spillPairReg hl
      00045F 1A               [ 7]  962 	ld	a, (de)
      000460 6E               [ 7]  963 	ld	l, (hl)
                                    964 ;	spillPairReg hl
      000461 85               [ 4]  965 	add	a, l
      000462 DD 86 04         [19]  966 	add	a, 4 (ix)
      000465 DD 77 FC         [19]  967 	ld	-4 (ix), a
                                    968 ;tetris.c:224: uint8_t y = piece->offsets[i * 2 + 1] + piece->cy + dy;
      000468 DD 7E FE         [19]  969 	ld	a, -2 (ix)
      00046B 3C               [ 4]  970 	inc	a
      00046C DD 86 F6         [19]  971 	add	a, -10 (ix)
      00046F DD 77 FD         [19]  972 	ld	-3 (ix), a
      000472 3E 00            [ 7]  973 	ld	a, #0x00
      000474 DD 8E F7         [19]  974 	adc	a, -9 (ix)
      000477 DD 77 FE         [19]  975 	ld	-2 (ix), a
      00047A DD 6E FA         [19]  976 	ld	l, -6 (ix)
      00047D DD 66 FB         [19]  977 	ld	h, -5 (ix)
      000480 7E               [ 7]  978 	ld	a, (hl)
      000481 DD 6E FD         [19]  979 	ld	l, -3 (ix)
      000484 DD 66 FE         [19]  980 	ld	h, -2 (ix)
      000487 6E               [ 7]  981 	ld	l, (hl)
                                    982 ;	spillPairReg hl
      000488 85               [ 4]  983 	add	a, l
      000489 DD 86 05         [19]  984 	add	a, 5 (ix)
                                    985 ;tetris.c:225: if (!board_position_free(board, x, y))
      00048C C5               [11]  986 	push	bc
      00048D D5               [11]  987 	push	de
      00048E F5               [11]  988 	push	af
      00048F 33               [ 6]  989 	inc	sp
      000490 DD 7E FC         [19]  990 	ld	a, -4 (ix)
      000493 F5               [11]  991 	push	af
      000494 33               [ 6]  992 	inc	sp
      000495 69               [ 4]  993 	ld	l, c
                                    994 ;	spillPairReg hl
                                    995 ;	spillPairReg hl
      000496 60               [ 4]  996 	ld	h, b
                                    997 ;	spillPairReg hl
                                    998 ;	spillPairReg hl
      000497 CDrE3r00         [17]  999 	call	_board_position_free
      00049A D1               [10] 1000 	pop	de
      00049B C1               [10] 1001 	pop	bc
      00049C B7               [ 4] 1002 	or	a, a
      00049D 20 03            [12] 1003 	jr	NZ, 00106$
                                   1004 ;tetris.c:226: return 0;
      00049F AF               [ 4] 1005 	xor	a, a
      0004A0 18 2C            [12] 1006 	jr	00107$
      0004A2                       1007 00106$:
                                   1008 ;tetris.c:221: for (uint8_t i = 0; i < 4; ++i)
      0004A2 DD 34 FF         [23] 1009 	inc	-1 (ix)
      0004A5 18 A0            [12] 1010 	jr	00105$
      0004A7                       1011 00103$:
                                   1012 ;tetris.c:228: draw_piece(piece, 1);
      0004A7 D5               [11] 1013 	push	de
      0004A8 3E 01            [ 7] 1014 	ld	a, #0x01
      0004AA F5               [11] 1015 	push	af
      0004AB 33               [ 6] 1016 	inc	sp
                                   1017 ;	spillPairReg hl
                                   1018 ;	spillPairReg hl
      0004AC EB               [ 4] 1019 	ex	de,hl
                                   1020 ;	spillPairReg hl
                                   1021 ;	spillPairReg hl
      0004AD CDr82r03         [17] 1022 	call	_draw_piece
      0004B0 D1               [10] 1023 	pop	de
                                   1024 ;tetris.c:229: piece->cx += dx;
      0004B1 1A               [ 7] 1025 	ld	a, (de)
      0004B2 DD 86 04         [19] 1026 	add	a, 4 (ix)
      0004B5 12               [ 7] 1027 	ld	(de), a
                                   1028 ;tetris.c:230: piece->cy += dy;
      0004B6 DD 6E F8         [19] 1029 	ld	l, -8 (ix)
      0004B9 DD 66 F9         [19] 1030 	ld	h, -7 (ix)
      0004BC 7E               [ 7] 1031 	ld	a, (hl)
      0004BD DD 86 05         [19] 1032 	add	a, 5 (ix)
      0004C0 C1               [10] 1033 	pop	bc
      0004C1 E1               [10] 1034 	pop	hl
      0004C2 E5               [11] 1035 	push	hl
      0004C3 C5               [11] 1036 	push	bc
      0004C4 77               [ 7] 1037 	ld	(hl), a
                                   1038 ;tetris.c:231: draw_piece(piece, 0);
      0004C5 AF               [ 4] 1039 	xor	a, a
      0004C6 F5               [11] 1040 	push	af
      0004C7 33               [ 6] 1041 	inc	sp
      0004C8 EB               [ 4] 1042 	ex	de, hl
      0004C9 CDr82r03         [17] 1043 	call	_draw_piece
                                   1044 ;tetris.c:232: return 1;
      0004CC 3E 01            [ 7] 1045 	ld	a, #0x01
      0004CE                       1046 00107$:
                                   1047 ;tetris.c:233: }
      0004CE DD F9            [10] 1048 	ld	sp, ix
      0004D0 DD E1            [14] 1049 	pop	ix
      0004D2 E1               [10] 1050 	pop	hl
      0004D3 C1               [10] 1051 	pop	bc
      0004D4 E9               [ 4] 1052 	jp	(hl)
                                   1053 ;tetris.c:235: uint8_t rotate_piece(Board* board, Piece* piece)
                                   1054 ;	---------------------------------
                                   1055 ; Function rotate_piece
                                   1056 ; ---------------------------------
      0004D5                       1057 _rotate_piece::
      0004D5 DD E5            [15] 1058 	push	ix
      0004D7 DD 21 00 00      [14] 1059 	ld	ix,#0
      0004DB DD 39            [15] 1060 	add	ix,sp
      0004DD FD 21 EB FF      [14] 1061 	ld	iy, #-21
      0004E1 FD 39            [15] 1062 	add	iy, sp
      0004E3 FD F9            [10] 1063 	ld	sp, iy
      0004E5 4D               [ 4] 1064 	ld	c, l
      0004E6 44               [ 4] 1065 	ld	b, h
      0004E7 DD 73 FD         [19] 1066 	ld	-3 (ix), e
      0004EA DD 72 FE         [19] 1067 	ld	-2 (ix), d
                                   1068 ;tetris.c:238: uint8_t j=0;
      0004ED 1E 00            [ 7] 1069 	ld	e, #0x00
                                   1070 ;tetris.c:239: for (uint8_t i = 0; i < 4; ++i, j+=2)
      0004EF DD 7E FD         [19] 1071 	ld	a, -3 (ix)
      0004F2 C6 02            [ 7] 1072 	add	a, #0x02
      0004F4 DD 77 F3         [19] 1073 	ld	-13 (ix), a
      0004F7 DD 7E FE         [19] 1074 	ld	a, -2 (ix)
      0004FA CE 00            [ 7] 1075 	adc	a, #0x00
      0004FC DD 77 F4         [19] 1076 	ld	-12 (ix), a
      0004FF DD 7E F3         [19] 1077 	ld	a, -13 (ix)
      000502 DD 77 F5         [19] 1078 	ld	-11 (ix), a
      000505 DD 7E F4         [19] 1079 	ld	a, -12 (ix)
      000508 DD 77 F6         [19] 1080 	ld	-10 (ix), a
      00050B DD 7E FD         [19] 1081 	ld	a, -3 (ix)
      00050E DD 77 F7         [19] 1082 	ld	-9 (ix), a
      000511 DD 7E FE         [19] 1083 	ld	a, -2 (ix)
      000514 DD 77 F8         [19] 1084 	ld	-8 (ix), a
      000517 DD 36 FF 00      [19] 1085 	ld	-1 (ix), #0x00
      00051B                       1086 00106$:
      00051B DD 7E FF         [19] 1087 	ld	a, -1 (ix)
      00051E D6 04            [ 7] 1088 	sub	a, #0x04
      000520 30 7C            [12] 1089 	jr	NC, 00103$
                                   1090 ;tetris.c:241: offsets[j] = -piece->offsets[j+1];
      000522 D5               [11] 1091 	push	de
      000523 16 00            [ 7] 1092 	ld	d, #0x00
      000525 21 02 00         [10] 1093 	ld	hl, #2
      000528 39               [11] 1094 	add	hl, sp
      000529 19               [11] 1095 	add	hl, de
      00052A D1               [10] 1096 	pop	de
      00052B DD 75 F9         [19] 1097 	ld	-7 (ix), l
      00052E DD 74 FA         [19] 1098 	ld	-6 (ix), h
      000531 DD 73 FB         [19] 1099 	ld	-5 (ix), e
      000534 53               [ 4] 1100 	ld	d, e
      000535 14               [ 4] 1101 	inc	d
      000536 7A               [ 4] 1102 	ld	a, d
      000537 DD 86 F5         [19] 1103 	add	a, -11 (ix)
      00053A 6F               [ 4] 1104 	ld	l, a
                                   1105 ;	spillPairReg hl
                                   1106 ;	spillPairReg hl
      00053B 3E 00            [ 7] 1107 	ld	a, #0x00
      00053D DD 8E F6         [19] 1108 	adc	a, -10 (ix)
      000540 67               [ 4] 1109 	ld	h, a
      000541 7E               [ 7] 1110 	ld	a, (hl)
      000542 ED 44            [ 8] 1111 	neg
      000544 DD 77 FC         [19] 1112 	ld	-4 (ix), a
      000547 DD 6E F9         [19] 1113 	ld	l, -7 (ix)
      00054A DD 66 FA         [19] 1114 	ld	h, -6 (ix)
      00054D DD 7E FC         [19] 1115 	ld	a, -4 (ix)
      000550 77               [ 7] 1116 	ld	(hl), a
                                   1117 ;tetris.c:242: offsets[j+1] = piece->offsets[j];
      000551 7A               [ 4] 1118 	ld	a, d
      000552 6F               [ 4] 1119 	ld	l, a
                                   1120 ;	spillPairReg hl
                                   1121 ;	spillPairReg hl
      000553 07               [ 4] 1122 	rlca
      000554 9F               [ 4] 1123 	sbc	a, a
      000555 57               [ 4] 1124 	ld	d, a
      000556 D5               [11] 1125 	push	de
      000557 5D               [ 4] 1126 	ld	e, l
      000558 21 02 00         [10] 1127 	ld	hl, #2
      00055B 39               [11] 1128 	add	hl, sp
      00055C 19               [11] 1129 	add	hl, de
      00055D D1               [10] 1130 	pop	de
      00055E DD 7E F5         [19] 1131 	ld	a, -11 (ix)
      000561 83               [ 4] 1132 	add	a, e
      000562 5F               [ 4] 1133 	ld	e, a
      000563 DD 7E F6         [19] 1134 	ld	a, -10 (ix)
      000566 CE 00            [ 7] 1135 	adc	a, #0x00
      000568 57               [ 4] 1136 	ld	d, a
      000569 1A               [ 7] 1137 	ld	a, (de)
      00056A 5F               [ 4] 1138 	ld	e, a
      00056B 73               [ 7] 1139 	ld	(hl), e
                                   1140 ;tetris.c:243: uint8_t x = offsets[j] + piece->cx;
      00056C DD 6E FD         [19] 1141 	ld	l, -3 (ix)
      00056F DD 66 FE         [19] 1142 	ld	h, -2 (ix)
      000572 7E               [ 7] 1143 	ld	a, (hl)
      000573 DD 86 FC         [19] 1144 	add	a, -4 (ix)
      000576 DD 77 FC         [19] 1145 	ld	-4 (ix), a
                                   1146 ;tetris.c:244: uint8_t y = offsets[j+1] + piece->cy;
      000579 DD 6E F7         [19] 1147 	ld	l, -9 (ix)
      00057C DD 66 F8         [19] 1148 	ld	h, -8 (ix)
      00057F 23               [ 6] 1149 	inc	hl
      000580 7E               [ 7] 1150 	ld	a, (hl)
      000581 83               [ 4] 1151 	add	a, e
                                   1152 ;tetris.c:245: if (!board_position_free(board, x, y))
      000582 C5               [11] 1153 	push	bc
      000583 F5               [11] 1154 	push	af
      000584 33               [ 6] 1155 	inc	sp
      000585 DD 7E FC         [19] 1156 	ld	a, -4 (ix)
      000588 F5               [11] 1157 	push	af
      000589 33               [ 6] 1158 	inc	sp
      00058A 69               [ 4] 1159 	ld	l, c
                                   1160 ;	spillPairReg hl
                                   1161 ;	spillPairReg hl
      00058B 60               [ 4] 1162 	ld	h, b
                                   1163 ;	spillPairReg hl
                                   1164 ;	spillPairReg hl
      00058C CDrE3r00         [17] 1165 	call	_board_position_free
      00058F C1               [10] 1166 	pop	bc
                                   1167 ;tetris.c:246: return 0;
      000590 B7               [ 4] 1168 	or	a,a
      000591 28 5C            [12] 1169 	jr	Z, 00111$
                                   1170 ;tetris.c:239: for (uint8_t i = 0; i < 4; ++i, j+=2)
      000593 DD 34 FF         [23] 1171 	inc	-1 (ix)
      000596 DD 5E FB         [19] 1172 	ld	e, -5 (ix)
      000599 1C               [ 4] 1173 	inc	e
      00059A 1C               [ 4] 1174 	inc	e
      00059B C3r1Br05         [10] 1175 	jp	00106$
      00059E                       1176 00103$:
                                   1177 ;tetris.c:248: draw_piece(piece, 1);
      00059E 3E 01            [ 7] 1178 	ld	a, #0x01
      0005A0 F5               [11] 1179 	push	af
      0005A1 33               [ 6] 1180 	inc	sp
      0005A2 DD 6E FD         [19] 1181 	ld	l, -3 (ix)
                                   1182 ;	spillPairReg hl
                                   1183 ;	spillPairReg hl
      0005A5 DD 66 FE         [19] 1184 	ld	h, -2 (ix)
                                   1185 ;	spillPairReg hl
                                   1186 ;	spillPairReg hl
      0005A8 CDr82r03         [17] 1187 	call	_draw_piece
                                   1188 ;tetris.c:249: for (uint8_t i = 0; i < 8; ++i)
      0005AB DD 4E F3         [19] 1189 	ld	c, -13 (ix)
      0005AE DD 46 F4         [19] 1190 	ld	b, -12 (ix)
      0005B1 21 00 00         [10] 1191 	ld	hl, #0
      0005B4 39               [11] 1192 	add	hl, sp
      0005B5 EB               [ 4] 1193 	ex	de, hl
      0005B6 DD 36 FF 00      [19] 1194 	ld	-1 (ix), #0x00
      0005BA                       1195 00109$:
      0005BA DD 7E FF         [19] 1196 	ld	a, -1 (ix)
      0005BD D6 08            [ 7] 1197 	sub	a, #0x08
      0005BF 30 20            [12] 1198 	jr	NC, 00104$
                                   1199 ;tetris.c:250: piece->offsets[i] = offsets[i];
      0005C1 79               [ 4] 1200 	ld	a, c
      0005C2 DD 86 FF         [19] 1201 	add	a, -1 (ix)
      0005C5 DD 77 FB         [19] 1202 	ld	-5 (ix), a
      0005C8 78               [ 4] 1203 	ld	a, b
      0005C9 CE 00            [ 7] 1204 	adc	a, #0x00
      0005CB DD 77 FC         [19] 1205 	ld	-4 (ix), a
      0005CE DD 6E FF         [19] 1206 	ld	l, -1 (ix)
      0005D1 26 00            [ 7] 1207 	ld	h, #0x00
      0005D3 19               [11] 1208 	add	hl, de
      0005D4 7E               [ 7] 1209 	ld	a, (hl)
      0005D5 DD 6E FB         [19] 1210 	ld	l, -5 (ix)
      0005D8 DD 66 FC         [19] 1211 	ld	h, -4 (ix)
      0005DB 77               [ 7] 1212 	ld	(hl), a
                                   1213 ;tetris.c:249: for (uint8_t i = 0; i < 8; ++i)
      0005DC DD 34 FF         [23] 1214 	inc	-1 (ix)
      0005DF 18 D9            [12] 1215 	jr	00109$
      0005E1                       1216 00104$:
                                   1217 ;tetris.c:251: draw_piece(piece, 0);
      0005E1 AF               [ 4] 1218 	xor	a, a
      0005E2 F5               [11] 1219 	push	af
      0005E3 33               [ 6] 1220 	inc	sp
      0005E4 DD 6E FD         [19] 1221 	ld	l, -3 (ix)
                                   1222 ;	spillPairReg hl
                                   1223 ;	spillPairReg hl
      0005E7 DD 66 FE         [19] 1224 	ld	h, -2 (ix)
                                   1225 ;	spillPairReg hl
                                   1226 ;	spillPairReg hl
      0005EA CDr82r03         [17] 1227 	call	_draw_piece
                                   1228 ;tetris.c:252: return 1;
      0005ED 3E 01            [ 7] 1229 	ld	a, #0x01
      0005EF                       1230 00111$:
                                   1231 ;tetris.c:253: }
      0005EF DD F9            [10] 1232 	ld	sp, ix
      0005F1 DD E1            [14] 1233 	pop	ix
      0005F3 C9               [10] 1234 	ret
                                   1235 ;tetris.c:255: void draw_frame()
                                   1236 ;	---------------------------------
                                   1237 ; Function draw_frame
                                   1238 ; ---------------------------------
      0005F4                       1239 _draw_frame::
                                   1240 ;tetris.c:259: for (word y = 0; y < H; ++y)
      0005F4 01 00 00         [10] 1241 	ld	bc, #0x0000
      0005F7                       1242 00104$:
      0005F7 69               [ 4] 1243 	ld	l, c
                                   1244 ;	spillPairReg hl
                                   1245 ;	spillPairReg hl
      0005F8 60               [ 4] 1246 	ld	h, b
                                   1247 ;	spillPairReg hl
                                   1248 ;	spillPairReg hl
      0005F9 7D               [ 4] 1249 	ld	a, l
      0005FA D6 10            [ 7] 1250 	sub	a, #0x10
      0005FC 7C               [ 4] 1251 	ld	a, h
      0005FD DE 00            [ 7] 1252 	sbc	a, #0x00
      0005FF 30 20            [12] 1253 	jr	NC, 00101$
                                   1254 ;tetris.c:261: draw_cube(x0, y * 16, 63);
      000601 29               [11] 1255 	add	hl, hl
      000602 29               [11] 1256 	add	hl, hl
      000603 29               [11] 1257 	add	hl, hl
      000604 29               [11] 1258 	add	hl, hl
      000605 C5               [11] 1259 	push	bc
      000606 EB               [ 4] 1260 	ex	de, hl
      000607 D5               [11] 1261 	push	de
      000608 3E 3F            [ 7] 1262 	ld	a, #0x3f
      00060A F5               [11] 1263 	push	af
      00060B 33               [ 6] 1264 	inc	sp
      00060C 21 60 00         [10] 1265 	ld	hl, #0x0060
      00060F CDr43r00         [17] 1266 	call	_draw_cube
      000612 D1               [10] 1267 	pop	de
      000613 3E 3F            [ 7] 1268 	ld	a, #0x3f
      000615 F5               [11] 1269 	push	af
      000616 33               [ 6] 1270 	inc	sp
      000617 21 20 01         [10] 1271 	ld	hl, #0x0120
      00061A CDr43r00         [17] 1272 	call	_draw_cube
      00061D C1               [10] 1273 	pop	bc
                                   1274 ;tetris.c:259: for (word y = 0; y < H; ++y)
      00061E 03               [ 6] 1275 	inc	bc
      00061F 18 D6            [12] 1276 	jr	00104$
      000621                       1277 00101$:
                                   1278 ;tetris.c:265: for (word x = L-1; x <= (L+W); ++x)
      000621 01 06 00         [10] 1279 	ld	bc, #0x0006
      000624                       1280 00107$:
      000624 3E 12            [ 7] 1281 	ld	a, #0x12
      000626 B9               [ 4] 1282 	cp	a, c
      000627 3E 00            [ 7] 1283 	ld	a, #0x00
      000629 98               [ 4] 1284 	sbc	a, b
      00062A D8               [11] 1285 	ret	C
                                   1286 ;tetris.c:267: draw_cube(x*16, y1, 63);
      00062B 69               [ 4] 1287 	ld	l, c
                                   1288 ;	spillPairReg hl
                                   1289 ;	spillPairReg hl
      00062C 60               [ 4] 1290 	ld	h, b
                                   1291 ;	spillPairReg hl
                                   1292 ;	spillPairReg hl
      00062D 29               [11] 1293 	add	hl, hl
      00062E 29               [11] 1294 	add	hl, hl
      00062F 29               [11] 1295 	add	hl, hl
      000630 29               [11] 1296 	add	hl, hl
      000631 C5               [11] 1297 	push	bc
      000632 3E 3F            [ 7] 1298 	ld	a, #0x3f
      000634 F5               [11] 1299 	push	af
      000635 33               [ 6] 1300 	inc	sp
      000636 11 00 01         [10] 1301 	ld	de, #0x0100
      000639 CDr43r00         [17] 1302 	call	_draw_cube
      00063C C1               [10] 1303 	pop	bc
                                   1304 ;tetris.c:265: for (word x = L-1; x <= (L+W); ++x)
      00063D 03               [ 6] 1305 	inc	bc
                                   1306 ;tetris.c:269: }
      00063E 18 E4            [12] 1307 	jr	00107$
                                   1308 ;tetris.c:271: void game()
                                   1309 ;	---------------------------------
                                   1310 ; Function game
                                   1311 ; ---------------------------------
      000640                       1312 _game::
      000640 DD E5            [15] 1313 	push	ix
      000642 DD 21 00 00      [14] 1314 	ld	ix,#0
      000646 DD 39            [15] 1315 	add	ix,sp
      000648 21 42 FF         [10] 1316 	ld	hl, #-190
      00064B 39               [11] 1317 	add	hl, sp
      00064C F9               [ 6] 1318 	ld	sp, hl
                                   1319 ;tetris.c:276: cls();
      00064D CDr0Cr00         [17] 1320 	call	_cls
                                   1321 ;tetris.c:277: initialize_board(&board);
      000650 21 00 00         [10] 1322 	ld	hl, #0
      000653 39               [11] 1323 	add	hl, sp
      000654 CDrD3r00         [17] 1324 	call	_initialize_board
                                   1325 ;tetris.c:278: piece.valid = 0;
      000657 DD 36 FD 00      [19] 1326 	ld	-3 (ix), #0x00
                                   1327 ;tetris.c:279: draw_frame();
      00065B CDrF4r05         [17] 1328 	call	_draw_frame
                                   1329 ;tetris.c:280: word last_timer=0;
      00065E AF               [ 4] 1330 	xor	a, a
      00065F DD 77 FE         [19] 1331 	ld	-2 (ix), a
      000662 DD 77 FF         [19] 1332 	ld	-1 (ix), a
                                   1333 ;tetris.c:281: while (1)
      000665                       1334 00125$:
                                   1335 ;tetris.c:283: if (piece.valid == 0)
      000665 DD 7E FD         [19] 1336 	ld	a, -3 (ix)
      000668 B7               [ 4] 1337 	or	a, a
      000669 20 1A            [12] 1338 	jr	NZ, 00107$
                                   1339 ;tetris.c:285: while (!generate_piece(&piece));
      00066B                       1340 00101$:
      00066B 21 B0 00         [10] 1341 	ld	hl, #176
      00066E 39               [11] 1342 	add	hl, sp
      00066F CDr11r03         [17] 1343 	call	_generate_piece
      000672 B7               [ 4] 1344 	or	a, a
      000673 28 F6            [12] 1345 	jr	Z, 00101$
                                   1346 ;tetris.c:286: if (piece.valid)
      000675 DD 7E FD         [19] 1347 	ld	a, -3 (ix)
      000678 B7               [ 4] 1348 	or	a, a
      000679 28 0A            [12] 1349 	jr	Z, 00107$
                                   1350 ;tetris.c:287: draw_piece(&piece, 0);
      00067B AF               [ 4] 1351 	xor	a, a
      00067C F5               [11] 1352 	push	af
      00067D 33               [ 6] 1353 	inc	sp
      00067E 21 B1 00         [10] 1354 	ld	hl, #177
      000681 39               [11] 1355 	add	hl, sp
      000682 CDr82r03         [17] 1356 	call	_draw_piece
      000685                       1357 00107$:
                                   1358 ;tetris.c:289: uint8_t key = wait_key();
      000685 CDrC5r00         [17] 1359 	call	_wait_key
                                   1360 ;tetris.c:290: if (key == '4')
      000688 4F               [ 4] 1361 	ld	c, a
      000689 D6 34            [ 7] 1362 	sub	a, #0x34
      00068B 20 12            [12] 1363 	jr	NZ, 00122$
                                   1364 ;tetris.c:291: move_piece(&board, &piece, 0xFF, 0);
      00068D 21 FF 00         [10] 1365 	ld	hl, #0xff
      000690 E5               [11] 1366 	push	hl
      000691 21 B2 00         [10] 1367 	ld	hl, #178
      000694 39               [11] 1368 	add	hl, sp
      000695 EB               [ 4] 1369 	ex	de, hl
      000696 21 02 00         [10] 1370 	ld	hl, #2
      000699 39               [11] 1371 	add	hl, sp
      00069A CDr17r04         [17] 1372 	call	_move_piece
      00069D 18 C6            [12] 1373 	jr	00125$
      00069F                       1374 00122$:
                                   1375 ;tetris.c:293: if (key == '6')
      00069F 79               [ 4] 1376 	ld	a, c
      0006A0 D6 36            [ 7] 1377 	sub	a, #0x36
      0006A2 20 12            [12] 1378 	jr	NZ, 00119$
                                   1379 ;tetris.c:294: move_piece(&board, &piece, 1, 0);
      0006A4 21 01 00         [10] 1380 	ld	hl, #0x01
      0006A7 E5               [11] 1381 	push	hl
      0006A8 21 B2 00         [10] 1382 	ld	hl, #178
      0006AB 39               [11] 1383 	add	hl, sp
      0006AC EB               [ 4] 1384 	ex	de, hl
      0006AD 21 02 00         [10] 1385 	ld	hl, #2
      0006B0 39               [11] 1386 	add	hl, sp
      0006B1 CDr17r04         [17] 1387 	call	_move_piece
      0006B4 18 AF            [12] 1388 	jr	00125$
      0006B6                       1389 00119$:
                                   1390 ;tetris.c:296: if (key == '2')
      0006B6 79               [ 4] 1391 	ld	a, c
      0006B7 D6 32            [ 7] 1392 	sub	a, #0x32
      0006B9 20 12            [12] 1393 	jr	NZ, 00116$
                                   1394 ;tetris.c:297: move_piece(&board, &piece, 0, 1);
      0006BB 21 00 01         [10] 1395 	ld	hl, #0x100
      0006BE E5               [11] 1396 	push	hl
      0006BF 21 B2 00         [10] 1397 	ld	hl, #178
      0006C2 39               [11] 1398 	add	hl, sp
      0006C3 EB               [ 4] 1399 	ex	de, hl
      0006C4 21 02 00         [10] 1400 	ld	hl, #2
      0006C7 39               [11] 1401 	add	hl, sp
      0006C8 CDr17r04         [17] 1402 	call	_move_piece
      0006CB 18 98            [12] 1403 	jr	00125$
      0006CD                       1404 00116$:
                                   1405 ;tetris.c:299: if (key == '5')
      0006CD 79               [ 4] 1406 	ld	a, c
      0006CE D6 35            [ 7] 1407 	sub	a, #0x35
      0006D0 20 0E            [12] 1408 	jr	NZ, 00113$
                                   1409 ;tetris.c:300: rotate_piece(&board, &piece);
      0006D2 21 B0 00         [10] 1410 	ld	hl, #176
      0006D5 39               [11] 1411 	add	hl, sp
      0006D6 EB               [ 4] 1412 	ex	de, hl
      0006D7 21 00 00         [10] 1413 	ld	hl, #0
      0006DA 39               [11] 1414 	add	hl, sp
      0006DB CDrD5r04         [17] 1415 	call	_rotate_piece
      0006DE 18 85            [12] 1416 	jr	00125$
      0006E0                       1417 00113$:
                                   1418 ;tetris.c:303: word cur_timer = system_call(2); /* timer */
      0006E0 3E 02            [ 7] 1419 	ld	a, #0x02
      0006E2 CDr00r00         [17] 1420 	call	_system_call
                                   1421 ;tetris.c:304: word diff = cur_timer - last_timer;
      0006E5 7B               [ 4] 1422 	ld	a, e
      0006E6 DD 96 FE         [19] 1423 	sub	a, -2 (ix)
      0006E9 4F               [ 4] 1424 	ld	c, a
      0006EA 7A               [ 4] 1425 	ld	a, d
      0006EB DD 9E FF         [19] 1426 	sbc	a, -1 (ix)
                                   1427 ;tetris.c:305: if (diff > 50)
      0006EE 47               [ 4] 1428 	ld	b, a
      0006EF 3E 32            [ 7] 1429 	ld	a, #0x32
      0006F1 B9               [ 4] 1430 	cp	a, c
      0006F2 3E 00            [ 7] 1431 	ld	a, #0x00
      0006F4 98               [ 4] 1432 	sbc	a, b
      0006F5 D2r65r06         [10] 1433 	jp	NC, 00125$
                                   1434 ;tetris.c:307: last_timer=cur_timer;
      0006F8 DD 73 FE         [19] 1435 	ld	-2 (ix), e
      0006FB DD 72 FF         [19] 1436 	ld	-1 (ix), d
                                   1437 ;tetris.c:308: if (!move_piece(&board, &piece, 0, 1))
      0006FE 3E 01            [ 7] 1438 	ld	a, #0x01
      000700 F5               [11] 1439 	push	af
      000701 33               [ 6] 1440 	inc	sp
      000702 AF               [ 4] 1441 	xor	a, a
      000703 F5               [11] 1442 	push	af
      000704 33               [ 6] 1443 	inc	sp
      000705 21 B2 00         [10] 1444 	ld	hl, #178
      000708 39               [11] 1445 	add	hl, sp
      000709 EB               [ 4] 1446 	ex	de, hl
      00070A 21 02 00         [10] 1447 	ld	hl, #2
      00070D 39               [11] 1448 	add	hl, sp
      00070E CDr17r04         [17] 1449 	call	_move_piece
      000711 B7               [ 4] 1450 	or	a, a
      000712 C2r65r06         [10] 1451 	jp	NZ, 00125$
                                   1452 ;tetris.c:310: place_piece(&board, &piece);
      000715 21 B0 00         [10] 1453 	ld	hl, #176
      000718 39               [11] 1454 	add	hl, sp
      000719 EB               [ 4] 1455 	ex	de, hl
      00071A 21 00 00         [10] 1456 	ld	hl, #0
      00071D 39               [11] 1457 	add	hl, sp
      00071E CDr49r02         [17] 1458 	call	_place_piece
                                   1459 ;tetris.c:311: remove_full_rows(&board);
      000721 21 00 00         [10] 1460 	ld	hl, #0
      000724 39               [11] 1461 	add	hl, sp
      000725 CDr1Cr01         [17] 1462 	call	_remove_full_rows
                                   1463 ;tetris.c:316: }
      000728 C3r65r06         [10] 1464 	jp	00125$
                                   1465 	.area _APP
                                   1466 	.area _INITIALIZER
                                   1467 	.area _CABS (ABS)
